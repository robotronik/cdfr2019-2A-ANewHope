ARM GAS  /tmp/ccEZGftl.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"tof.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.ToF_Init_Struct,"ax",%progbits
  21              		.align	2
  22              		.global	ToF_Init_Struct
  23              		.thumb
  24              		.thumb_func
  26              	ToF_Init_Struct:
  27              	.LFB123:
  28              		.file 1 "Src/tof.c"
   1:Src/tof.c     **** /*
   2:Src/tof.c     ****  * The code below is inspired by the STMicroelectronics X-CUBE-53L0A1 example source code. Here is 
   3:Src/tof.c     ****  * 
   4:Src/tof.c     ****  * COPYRIGHT(c) 2015 STMicroelectronics
   5:Src/tof.c     ****  *
   6:Src/tof.c     ****  * Redistribution and use in source and binary forms, with or without modification,
   7:Src/tof.c     ****  * are permitted provided that the following conditions are met:
   8:Src/tof.c     ****  *   1. Redistributions of source code must retain the above copyright notice,
   9:Src/tof.c     ****  *      this list of conditions and the following disclaimer.
  10:Src/tof.c     ****  *   2. Redistributions in binary form must reproduce the above copyright notice,
  11:Src/tof.c     ****  *      this list of conditions and the following disclaimer in the documentation
  12:Src/tof.c     ****  *      and/or other materials provided with the distribution.
  13:Src/tof.c     ****  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  14:Src/tof.c     ****  *      may be used to endorse or promote products derived from this software
  15:Src/tof.c     ****  *      without specific prior written permission.
  16:Src/tof.c     ****  *
  17:Src/tof.c     ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  18:Src/tof.c     ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  19:Src/tof.c     ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  20:Src/tof.c     ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  21:Src/tof.c     ****  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  22:Src/tof.c     ****  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  23:Src/tof.c     ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  24:Src/tof.c     ****  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  25:Src/tof.c     ****  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  26:Src/tof.c     ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  27:Src/tof.c     ****  *
  28:Src/tof.c     ****  ******************************************************************************
  29:Src/tof.c     ****  */
  30:Src/tof.c     **** #include "tof.h"
ARM GAS  /tmp/ccEZGftl.s 			page 2


  31:Src/tof.c     **** 
  32:Src/tof.c     **** 
  33:Src/tof.c     **** void ToF_Init_Struct(ToF_Handler *htof, I2C_HandleTypeDef *hi2c){
  29              		.loc 1 33 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 82B0     		sub	sp, sp, #8
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 16
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 7860     		str	r0, [r7, #4]
  45 0008 3960     		str	r1, [r7]
  34:Src/tof.c     ****   htof->dev.I2cHandle = hi2c;
  46              		.loc 1 34 0
  47 000a 7B68     		ldr	r3, [r7, #4]
  48 000c 3A68     		ldr	r2, [r7]
  49 000e C3F85C21 		str	r2, [r3, #348]
  35:Src/tof.c     ****   htof->dev.I2cDevAddr = 0x52;
  50              		.loc 1 35 0
  51 0012 7B68     		ldr	r3, [r7, #4]
  52 0014 5222     		movs	r2, #82
  53 0016 83F86021 		strb	r2, [r3, #352]
  36:Src/tof.c     ****   htof->dev.Present = 0;
  54              		.loc 1 36 0
  55 001a 7B68     		ldr	r3, [r7, #4]
  56 001c 0022     		movs	r2, #0
  57 001e C3F86821 		str	r2, [r3, #360]
  37:Src/tof.c     **** 
  38:Src/tof.c     ****   //Set I2C speed to 400KHz
  39:Src/tof.c     ****   VL53L0X_WrByte(&htof->dev, 0x88, 0x00);
  58              		.loc 1 39 0
  59 0022 7B68     		ldr	r3, [r7, #4]
  60 0024 1846     		mov	r0, r3
  61 0026 8821     		movs	r1, #136
  62 0028 0022     		movs	r2, #0
  63 002a FFF7FEFF 		bl	VL53L0X_WrByte
  40:Src/tof.c     **** }
  64              		.loc 1 40 0
  65 002e 0837     		adds	r7, r7, #8
  66              	.LCFI3:
  67              		.cfi_def_cfa_offset 8
  68 0030 BD46     		mov	sp, r7
  69              	.LCFI4:
  70              		.cfi_def_cfa_register 13
  71              		@ sp needed
  72 0032 80BD     		pop	{r7, pc}
  73              		.cfi_endproc
  74              	.LFE123:
  76              		.section	.text.ToF_Poke,"ax",%progbits
ARM GAS  /tmp/ccEZGftl.s 			page 3


  77              		.align	2
  78              		.global	ToF_Poke
  79              		.thumb
  80              		.thumb_func
  82              	ToF_Poke:
  83              	.LFB124:
  41:Src/tof.c     **** 
  42:Src/tof.c     **** int ToF_Poke(ToF_Dev *dev){
  84              		.loc 1 42 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 16
  87              		@ frame_needed = 1, uses_anonymous_args = 0
  88 0000 80B5     		push	{r7, lr}
  89              	.LCFI5:
  90              		.cfi_def_cfa_offset 8
  91              		.cfi_offset 7, -8
  92              		.cfi_offset 14, -4
  93 0002 84B0     		sub	sp, sp, #16
  94              	.LCFI6:
  95              		.cfi_def_cfa_offset 24
  96 0004 00AF     		add	r7, sp, #0
  97              	.LCFI7:
  98              		.cfi_def_cfa_register 7
  99 0006 7860     		str	r0, [r7, #4]
  43:Src/tof.c     ****   int status;
  44:Src/tof.c     ****   //Read ID to know if the address is correct
  45:Src/tof.c     ****   uint16_t id = 0;
 100              		.loc 1 45 0
 101 0008 0023     		movs	r3, #0
 102 000a 7B81     		strh	r3, [r7, #10]	@ movhi
  46:Src/tof.c     ****   status = VL53L0X_RdWord(dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, &id);
 103              		.loc 1 46 0
 104 000c 07F10A03 		add	r3, r7, #10
 105 0010 7868     		ldr	r0, [r7, #4]
 106 0012 C021     		movs	r1, #192
 107 0014 1A46     		mov	r2, r3
 108 0016 FFF7FEFF 		bl	VL53L0X_RdWord
 109 001a 0346     		mov	r3, r0
 110 001c FB60     		str	r3, [r7, #12]
  47:Src/tof.c     ****   
  48:Src/tof.c     ****   //I2C error or bad ID
  49:Src/tof.c     ****   if(status || id != 0xEEAA){
 111              		.loc 1 49 0
 112 001e FB68     		ldr	r3, [r7, #12]
 113 0020 002B     		cmp	r3, #0
 114 0022 04D1     		bne	.L3
 115              		.loc 1 49 0 is_stmt 0 discriminator 1
 116 0024 7B89     		ldrh	r3, [r7, #10]
 117 0026 4EF6AA62 		movw	r2, #61098
 118 002a 9342     		cmp	r3, r2
 119 002c 02D0     		beq	.L4
 120              	.L3:
  50:Src/tof.c     ****     return -1;
 121              		.loc 1 50 0 is_stmt 1
 122 002e 4FF0FF33 		mov	r3, #-1
 123 0032 00E0     		b	.L6
 124              	.L4:
ARM GAS  /tmp/ccEZGftl.s 			page 4


  51:Src/tof.c     ****   }
  52:Src/tof.c     ****   
  53:Src/tof.c     ****   return 0;
 125              		.loc 1 53 0
 126 0034 0023     		movs	r3, #0
 127              	.L6:
  54:Src/tof.c     **** }
 128              		.loc 1 54 0 discriminator 1
 129 0036 1846     		mov	r0, r3
 130 0038 1037     		adds	r7, r7, #16
 131              	.LCFI8:
 132              		.cfi_def_cfa_offset 8
 133 003a BD46     		mov	sp, r7
 134              	.LCFI9:
 135              		.cfi_def_cfa_register 13
 136              		@ sp needed
 137 003c 80BD     		pop	{r7, pc}
 138              		.cfi_endproc
 139              	.LFE124:
 141 003e 00BF     		.section	.text.ToF_Set_Address,"ax",%progbits
 142              		.align	2
 143              		.global	ToF_Set_Address
 144              		.thumb
 145              		.thumb_func
 147              	ToF_Set_Address:
 148              	.LFB125:
  55:Src/tof.c     **** 
  56:Src/tof.c     **** int ToF_Set_Address(ToF_Dev *dev, uint8_t addr){
 149              		.loc 1 56 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 16
 152              		@ frame_needed = 1, uses_anonymous_args = 0
 153 0000 80B5     		push	{r7, lr}
 154              	.LCFI10:
 155              		.cfi_def_cfa_offset 8
 156              		.cfi_offset 7, -8
 157              		.cfi_offset 14, -4
 158 0002 84B0     		sub	sp, sp, #16
 159              	.LCFI11:
 160              		.cfi_def_cfa_offset 24
 161 0004 00AF     		add	r7, sp, #0
 162              	.LCFI12:
 163              		.cfi_def_cfa_register 7
 164 0006 7860     		str	r0, [r7, #4]
 165 0008 0B46     		mov	r3, r1
 166 000a FB70     		strb	r3, [r7, #3]
  57:Src/tof.c     ****   //Set device address
  58:Src/tof.c     ****   int status = VL53L0X_SetDeviceAddress(dev, addr);
 167              		.loc 1 58 0
 168 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 169 000e 7868     		ldr	r0, [r7, #4]
 170 0010 1946     		mov	r1, r3
 171 0012 FFF7FEFF 		bl	VL53L0X_SetDeviceAddress
 172 0016 0346     		mov	r3, r0
 173 0018 FB60     		str	r3, [r7, #12]
  59:Src/tof.c     ****   if(status) return -1;
 174              		.loc 1 59 0
ARM GAS  /tmp/ccEZGftl.s 			page 5


 175 001a FB68     		ldr	r3, [r7, #12]
 176 001c 002B     		cmp	r3, #0
 177 001e 02D0     		beq	.L8
 178              		.loc 1 59 0 is_stmt 0 discriminator 1
 179 0020 4FF0FF33 		mov	r3, #-1
 180 0024 07E0     		b	.L9
 181              	.L8:
  60:Src/tof.c     ****   dev->I2cDevAddr = addr;
 182              		.loc 1 60 0 is_stmt 1
 183 0026 7B68     		ldr	r3, [r7, #4]
 184 0028 FA78     		ldrb	r2, [r7, #3]
 185 002a 83F86021 		strb	r2, [r3, #352]
  61:Src/tof.c     **** 
  62:Src/tof.c     ****   //Check if the device work with the new address
  63:Src/tof.c     ****   return ToF_Poke(dev);
 186              		.loc 1 63 0
 187 002e 7868     		ldr	r0, [r7, #4]
 188 0030 FFF7FEFF 		bl	ToF_Poke
 189 0034 0346     		mov	r3, r0
 190              	.L9:
  64:Src/tof.c     **** }
 191              		.loc 1 64 0
 192 0036 1846     		mov	r0, r3
 193 0038 1037     		adds	r7, r7, #16
 194              	.LCFI13:
 195              		.cfi_def_cfa_offset 8
 196 003a BD46     		mov	sp, r7
 197              	.LCFI14:
 198              		.cfi_def_cfa_register 13
 199              		@ sp needed
 200 003c 80BD     		pop	{r7, pc}
 201              		.cfi_endproc
 202              	.LFE125:
 204 003e 00BF     		.section	.text.ToF_Init_Device,"ax",%progbits
 205              		.align	2
 206              		.global	ToF_Init_Device
 207              		.thumb
 208              		.thumb_func
 210              	ToF_Init_Device:
 211              	.LFB126:
  65:Src/tof.c     **** 
  66:Src/tof.c     **** int ToF_Init_Device(ToF_Dev *dev){
 212              		.loc 1 66 0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 16
 215              		@ frame_needed = 1, uses_anonymous_args = 0
 216 0000 80B5     		push	{r7, lr}
 217              	.LCFI15:
 218              		.cfi_def_cfa_offset 8
 219              		.cfi_offset 7, -8
 220              		.cfi_offset 14, -4
 221 0002 84B0     		sub	sp, sp, #16
 222              	.LCFI16:
 223              		.cfi_def_cfa_offset 24
 224 0004 00AF     		add	r7, sp, #0
 225              	.LCFI17:
 226              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccEZGftl.s 			page 6


 227 0006 7860     		str	r0, [r7, #4]
  67:Src/tof.c     ****   //Init the device
  68:Src/tof.c     ****   int status = VL53L0X_DataInit(dev);
 228              		.loc 1 68 0
 229 0008 7868     		ldr	r0, [r7, #4]
 230 000a FFF7FEFF 		bl	VL53L0X_DataInit
 231 000e 0346     		mov	r3, r0
 232 0010 FB60     		str	r3, [r7, #12]
  69:Src/tof.c     ****   if(status == 0)
 233              		.loc 1 69 0
 234 0012 FB68     		ldr	r3, [r7, #12]
 235 0014 002B     		cmp	r3, #0
 236 0016 0CD1     		bne	.L11
  70:Src/tof.c     ****     dev->Present = 1;
 237              		.loc 1 70 0
 238 0018 7B68     		ldr	r3, [r7, #4]
 239 001a 0122     		movs	r2, #1
 240 001c C3F86821 		str	r2, [r3, #360]
  71:Src/tof.c     ****   else
  72:Src/tof.c     ****     return -1;
  73:Src/tof.c     ****   
  74:Src/tof.c     ****   //Static init
  75:Src/tof.c     ****   status = VL53L0X_StaticInit(dev);
 241              		.loc 1 75 0
 242 0020 7868     		ldr	r0, [r7, #4]
 243 0022 FFF7FEFF 		bl	VL53L0X_StaticInit
 244 0026 0346     		mov	r3, r0
 245 0028 FB60     		str	r3, [r7, #12]
  76:Src/tof.c     ****   if(status) return -1;
 246              		.loc 1 76 0
 247 002a FB68     		ldr	r3, [r7, #12]
 248 002c 002B     		cmp	r3, #0
 249 002e 06D0     		beq	.L14
 250 0030 02E0     		b	.L15
 251              	.L11:
  72:Src/tof.c     ****   
 252              		.loc 1 72 0
 253 0032 4FF0FF33 		mov	r3, #-1
 254 0036 03E0     		b	.L13
 255              	.L15:
 256              		.loc 1 76 0 discriminator 1
 257 0038 4FF0FF33 		mov	r3, #-1
 258 003c 00E0     		b	.L13
 259              	.L14:
  77:Src/tof.c     ****   return 0;
 260              		.loc 1 77 0
 261 003e 0023     		movs	r3, #0
 262              	.L13:
  78:Src/tof.c     **** }
 263              		.loc 1 78 0
 264 0040 1846     		mov	r0, r3
 265 0042 1037     		adds	r7, r7, #16
 266              	.LCFI18:
 267              		.cfi_def_cfa_offset 8
 268 0044 BD46     		mov	sp, r7
 269              	.LCFI19:
 270              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccEZGftl.s 			page 7


 271              		@ sp needed
 272 0046 80BD     		pop	{r7, pc}
 273              		.cfi_endproc
 274              	.LFE126:
 276              		.section	.text.ToF_Configure_Device,"ax",%progbits
 277              		.align	2
 278              		.global	ToF_Configure_Device
 279              		.thumb
 280              		.thumb_func
 282              	ToF_Configure_Device:
 283              	.LFB127:
  79:Src/tof.c     **** 
  80:Src/tof.c     **** int ToF_Configure_Device(ToF_Dev *dev, ToF_Params *params, VL53L0X_DeviceModes mode){
 284              		.loc 1 80 0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 24
 287              		@ frame_needed = 1, uses_anonymous_args = 0
 288 0000 80B5     		push	{r7, lr}
 289              	.LCFI20:
 290              		.cfi_def_cfa_offset 8
 291              		.cfi_offset 7, -8
 292              		.cfi_offset 14, -4
 293 0002 86B0     		sub	sp, sp, #24
 294              	.LCFI21:
 295              		.cfi_def_cfa_offset 32
 296 0004 00AF     		add	r7, sp, #0
 297              	.LCFI22:
 298              		.cfi_def_cfa_register 7
 299 0006 F860     		str	r0, [r7, #12]
 300 0008 B960     		str	r1, [r7, #8]
 301 000a 1346     		mov	r3, r2
 302 000c FB71     		strb	r3, [r7, #7]
  81:Src/tof.c     ****   int status = 0;
 303              		.loc 1 81 0
 304 000e 0023     		movs	r3, #0
 305 0010 7B61     		str	r3, [r7, #20]
  82:Src/tof.c     **** 
  83:Src/tof.c     ****   do{
  84:Src/tof.c     ****     //Ref Spad Management
  85:Src/tof.c     ****     status = VL53L0X_PerformRefSpadManagement(dev, &params->refSpadCount, &params->isApertureSpads)
 306              		.loc 1 85 0
 307 0012 BB68     		ldr	r3, [r7, #8]
 308 0014 1A1D     		adds	r2, r3, #4
 309 0016 BB68     		ldr	r3, [r7, #8]
 310 0018 0833     		adds	r3, r3, #8
 311 001a F868     		ldr	r0, [r7, #12]
 312 001c 1146     		mov	r1, r2
 313 001e 1A46     		mov	r2, r3
 314 0020 FFF7FEFF 		bl	VL53L0X_PerformRefSpadManagement
 315 0024 0346     		mov	r3, r0
 316 0026 7B61     		str	r3, [r7, #20]
  86:Src/tof.c     ****     if(status) break;
 317              		.loc 1 86 0
 318 0028 7B69     		ldr	r3, [r7, #20]
 319 002a 002B     		cmp	r3, #0
 320 002c 00D0     		beq	.L17
 321 002e 82E0     		b	.L18
ARM GAS  /tmp/ccEZGftl.s 			page 8


 322              	.L17:
  87:Src/tof.c     **** 
  88:Src/tof.c     ****     //Ref calibration
  89:Src/tof.c     ****     status = VL53L0X_PerformRefCalibration(dev, &params->VhvSettings, &params->PhaseCal);
 323              		.loc 1 89 0
 324 0030 BA68     		ldr	r2, [r7, #8]
 325 0032 BB68     		ldr	r3, [r7, #8]
 326 0034 0133     		adds	r3, r3, #1
 327 0036 F868     		ldr	r0, [r7, #12]
 328 0038 1146     		mov	r1, r2
 329 003a 1A46     		mov	r2, r3
 330 003c FFF7FEFF 		bl	VL53L0X_PerformRefCalibration
 331 0040 0346     		mov	r3, r0
 332 0042 7B61     		str	r3, [r7, #20]
  90:Src/tof.c     ****     if(status) break;
 333              		.loc 1 90 0
 334 0044 7B69     		ldr	r3, [r7, #20]
 335 0046 002B     		cmp	r3, #0
 336 0048 00D0     		beq	.L19
 337 004a 74E0     		b	.L18
 338              	.L19:
  91:Src/tof.c     ****    
  92:Src/tof.c     ****     //Set single ranging mode
  93:Src/tof.c     ****     status = VL53L0X_SetDeviceMode(dev, mode);
 339              		.loc 1 93 0
 340 004c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 341 004e F868     		ldr	r0, [r7, #12]
 342 0050 1946     		mov	r1, r3
 343 0052 FFF7FEFF 		bl	VL53L0X_SetDeviceMode
 344 0056 0346     		mov	r3, r0
 345 0058 7B61     		str	r3, [r7, #20]
  94:Src/tof.c     ****     if(status) break;
 346              		.loc 1 94 0
 347 005a 7B69     		ldr	r3, [r7, #20]
 348 005c 002B     		cmp	r3, #0
 349 005e 00D0     		beq	.L20
 350 0060 69E0     		b	.L18
 351              	.L20:
  95:Src/tof.c     ****   
  96:Src/tof.c     ****     //Enable Sigma Limit
  97:Src/tof.c     ****     status = VL53L0X_SetLimitCheckEnable(dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 352              		.loc 1 97 0
 353 0062 F868     		ldr	r0, [r7, #12]
 354 0064 0021     		movs	r1, #0
 355 0066 0122     		movs	r2, #1
 356 0068 FFF7FEFF 		bl	VL53L0X_SetLimitCheckEnable
 357 006c 0346     		mov	r3, r0
 358 006e 7B61     		str	r3, [r7, #20]
  98:Src/tof.c     ****     if(status) break;
 359              		.loc 1 98 0
 360 0070 7B69     		ldr	r3, [r7, #20]
 361 0072 002B     		cmp	r3, #0
 362 0074 00D0     		beq	.L21
 363 0076 5EE0     		b	.L18
 364              	.L21:
  99:Src/tof.c     ****   
 100:Src/tof.c     ****     //Enable Signal Limit
ARM GAS  /tmp/ccEZGftl.s 			page 9


 101:Src/tof.c     ****     status = VL53L0X_SetLimitCheckEnable(dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 365              		.loc 1 101 0
 366 0078 F868     		ldr	r0, [r7, #12]
 367 007a 0121     		movs	r1, #1
 368 007c 0122     		movs	r2, #1
 369 007e FFF7FEFF 		bl	VL53L0X_SetLimitCheckEnable
 370 0082 0346     		mov	r3, r0
 371 0084 7B61     		str	r3, [r7, #20]
 102:Src/tof.c     ****     if(status) break;
 372              		.loc 1 102 0
 373 0086 7B69     		ldr	r3, [r7, #20]
 374 0088 002B     		cmp	r3, #0
 375 008a 00D0     		beq	.L22
 376 008c 53E0     		b	.L18
 377              	.L22:
 103:Src/tof.c     ****   
 104:Src/tof.c     ****     status = VL53L0X_SetLimitCheckValue(dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, params->s
 378              		.loc 1 104 0
 379 008e BB68     		ldr	r3, [r7, #8]
 380 0090 DB68     		ldr	r3, [r3, #12]
 381 0092 F868     		ldr	r0, [r7, #12]
 382 0094 0121     		movs	r1, #1
 383 0096 1A46     		mov	r2, r3
 384 0098 FFF7FEFF 		bl	VL53L0X_SetLimitCheckValue
 385 009c 0346     		mov	r3, r0
 386 009e 7B61     		str	r3, [r7, #20]
 105:Src/tof.c     ****     if(status) break;
 387              		.loc 1 105 0
 388 00a0 7B69     		ldr	r3, [r7, #20]
 389 00a2 002B     		cmp	r3, #0
 390 00a4 00D0     		beq	.L23
 391 00a6 46E0     		b	.L18
 392              	.L23:
 106:Src/tof.c     ****   
 107:Src/tof.c     ****     status = VL53L0X_SetLimitCheckValue(dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, params->sigmaLi
 393              		.loc 1 107 0
 394 00a8 BB68     		ldr	r3, [r7, #8]
 395 00aa 1B69     		ldr	r3, [r3, #16]
 396 00ac F868     		ldr	r0, [r7, #12]
 397 00ae 0021     		movs	r1, #0
 398 00b0 1A46     		mov	r2, r3
 399 00b2 FFF7FEFF 		bl	VL53L0X_SetLimitCheckValue
 400 00b6 0346     		mov	r3, r0
 401 00b8 7B61     		str	r3, [r7, #20]
 108:Src/tof.c     ****     if(status) break;
 402              		.loc 1 108 0
 403 00ba 7B69     		ldr	r3, [r7, #20]
 404 00bc 002B     		cmp	r3, #0
 405 00be 00D0     		beq	.L24
 406 00c0 39E0     		b	.L18
 407              	.L24:
 109:Src/tof.c     ****   
 110:Src/tof.c     ****     status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(dev, params->timingBudget);
 408              		.loc 1 110 0
 409 00c2 BB68     		ldr	r3, [r7, #8]
 410 00c4 5B69     		ldr	r3, [r3, #20]
 411 00c6 F868     		ldr	r0, [r7, #12]
ARM GAS  /tmp/ccEZGftl.s 			page 10


 412 00c8 1946     		mov	r1, r3
 413 00ca FFF7FEFF 		bl	VL53L0X_SetMeasurementTimingBudgetMicroSeconds
 414 00ce 0346     		mov	r3, r0
 415 00d0 7B61     		str	r3, [r7, #20]
 111:Src/tof.c     ****     if(status) break;
 416              		.loc 1 111 0
 417 00d2 7B69     		ldr	r3, [r7, #20]
 418 00d4 002B     		cmp	r3, #0
 419 00d6 00D0     		beq	.L25
 420 00d8 2DE0     		b	.L18
 421              	.L25:
 112:Src/tof.c     ****   
 113:Src/tof.c     ****     status = VL53L0X_SetVcselPulsePeriod(dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, params->preRangeVcsel
 422              		.loc 1 113 0
 423 00da BB68     		ldr	r3, [r7, #8]
 424 00dc 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 425 00de F868     		ldr	r0, [r7, #12]
 426 00e0 0021     		movs	r1, #0
 427 00e2 1A46     		mov	r2, r3
 428 00e4 FFF7FEFF 		bl	VL53L0X_SetVcselPulsePeriod
 429 00e8 0346     		mov	r3, r0
 430 00ea 7B61     		str	r3, [r7, #20]
 114:Src/tof.c     ****     if(status) break;
 431              		.loc 1 114 0
 432 00ec 7B69     		ldr	r3, [r7, #20]
 433 00ee 002B     		cmp	r3, #0
 434 00f0 00D0     		beq	.L26
 435 00f2 20E0     		b	.L18
 436              	.L26:
 115:Src/tof.c     **** 
 116:Src/tof.c     ****     status = VL53L0X_SetVcselPulsePeriod(dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, params->finalRangeV
 437              		.loc 1 116 0
 438 00f4 BB68     		ldr	r3, [r7, #8]
 439 00f6 5B7E     		ldrb	r3, [r3, #25]	@ zero_extendqisi2
 440 00f8 F868     		ldr	r0, [r7, #12]
 441 00fa 0121     		movs	r1, #1
 442 00fc 1A46     		mov	r2, r3
 443 00fe FFF7FEFF 		bl	VL53L0X_SetVcselPulsePeriod
 444 0102 0346     		mov	r3, r0
 445 0104 7B61     		str	r3, [r7, #20]
 117:Src/tof.c     ****     if(status) break;
 446              		.loc 1 117 0
 447 0106 7B69     		ldr	r3, [r7, #20]
 448 0108 002B     		cmp	r3, #0
 449 010a 00D0     		beq	.L27
 450 010c 13E0     		b	.L18
 451              	.L27:
 118:Src/tof.c     ****   
 119:Src/tof.c     ****     status = VL53L0X_PerformRefCalibration(dev, &params->VhvSettings, &params->PhaseCal);
 452              		.loc 1 119 0
 453 010e BA68     		ldr	r2, [r7, #8]
 454 0110 BB68     		ldr	r3, [r7, #8]
 455 0112 0133     		adds	r3, r3, #1
 456 0114 F868     		ldr	r0, [r7, #12]
 457 0116 1146     		mov	r1, r2
 458 0118 1A46     		mov	r2, r3
 459 011a FFF7FEFF 		bl	VL53L0X_PerformRefCalibration
ARM GAS  /tmp/ccEZGftl.s 			page 11


 460 011e 0346     		mov	r3, r0
 461 0120 7B61     		str	r3, [r7, #20]
 120:Src/tof.c     ****     if(status) break;
 462              		.loc 1 120 0
 463 0122 7B69     		ldr	r3, [r7, #20]
 464 0124 002B     		cmp	r3, #0
 465 0126 00D0     		beq	.L28
 466 0128 05E0     		b	.L18
 467              	.L28:
 121:Src/tof.c     ****   
 122:Src/tof.c     ****     dev->LeakyFirst = 1;
 468              		.loc 1 122 0
 469 012a FB68     		ldr	r3, [r7, #12]
 470 012c 0122     		movs	r2, #1
 471 012e C3F87C21 		str	r2, [r3, #380]
 123:Src/tof.c     **** 
 124:Src/tof.c     ****     return 0;
 472              		.loc 1 124 0
 473 0132 0023     		movs	r3, #0
 474 0134 01E0     		b	.L29
 475              	.L18:
 125:Src/tof.c     ****   }while(0);
 126:Src/tof.c     ****   
 127:Src/tof.c     ****   return -1;
 476              		.loc 1 127 0
 477 0136 4FF0FF33 		mov	r3, #-1
 478              	.L29:
 128:Src/tof.c     **** }
 479              		.loc 1 128 0
 480 013a 1846     		mov	r0, r3
 481 013c 1837     		adds	r7, r7, #24
 482              	.LCFI23:
 483              		.cfi_def_cfa_offset 8
 484 013e BD46     		mov	sp, r7
 485              	.LCFI24:
 486              		.cfi_def_cfa_register 13
 487              		@ sp needed
 488 0140 80BD     		pop	{r7, pc}
 489              		.cfi_endproc
 490              	.LFE127:
 492 0142 00BF     		.section	.text.ToF_SetNewRange,"ax",%progbits
 493              		.align	2
 494              		.thumb
 495              		.thumb_func
 497              	ToF_SetNewRange:
 498              	.LFB128:
 129:Src/tof.c     **** 
 130:Src/tof.c     **** static void ToF_SetNewRange(ToF_Dev *dev, ToF_Data *data){
 499              		.loc 1 130 0
 500              		.cfi_startproc
 501              		@ args = 0, pretend = 0, frame = 8
 502              		@ frame_needed = 1, uses_anonymous_args = 0
 503              		@ link register save eliminated.
 504 0000 80B4     		push	{r7}
 505              	.LCFI25:
 506              		.cfi_def_cfa_offset 4
 507              		.cfi_offset 7, -4
ARM GAS  /tmp/ccEZGftl.s 			page 12


 508 0002 83B0     		sub	sp, sp, #12
 509              	.LCFI26:
 510              		.cfi_def_cfa_offset 16
 511 0004 00AF     		add	r7, sp, #0
 512              	.LCFI27:
 513              		.cfi_def_cfa_register 7
 514 0006 7860     		str	r0, [r7, #4]
 515 0008 3960     		str	r1, [r7]
 131:Src/tof.c     ****   /* Store new ranging data into the device structure, apply leaky
 132:Src/tof.c     ****      integrator if needed */
 133:Src/tof.c     ****   static int LeakyFactorFix8 = (int)( 0.6 *256);
 134:Src/tof.c     ****     
 135:Src/tof.c     ****   if(data->RangeStatus == 0){
 516              		.loc 1 135 0
 517 000a 3B68     		ldr	r3, [r7]
 518 000c 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 519 000e 002B     		cmp	r3, #0
 520 0010 24D1     		bne	.L31
 136:Src/tof.c     ****     if(dev->LeakyFirst){
 521              		.loc 1 136 0
 522 0012 7B68     		ldr	r3, [r7, #4]
 523 0014 D3F87C31 		ldr	r3, [r3, #380]
 524 0018 002B     		cmp	r3, #0
 525 001a 0AD0     		beq	.L32
 137:Src/tof.c     ****       dev->LeakyFirst = 0;
 526              		.loc 1 137 0
 527 001c 7B68     		ldr	r3, [r7, #4]
 528 001e 0022     		movs	r2, #0
 529 0020 C3F87C21 		str	r2, [r3, #380]
 138:Src/tof.c     ****       dev->LeakyRange = data->RangeMilliMeter;
 530              		.loc 1 138 0
 531 0024 3B68     		ldr	r3, [r7]
 532 0026 1B89     		ldrh	r3, [r3, #8]
 533 0028 1A46     		mov	r2, r3
 534 002a 7B68     		ldr	r3, [r7, #4]
 535 002c C3F87821 		str	r2, [r3, #376]
 536 0030 18E0     		b	.L30
 537              	.L32:
 139:Src/tof.c     ****     }
 140:Src/tof.c     ****     else{
 141:Src/tof.c     ****       dev->LeakyRange = (dev->LeakyRange*LeakyFactorFix8 + (256-LeakyFactorFix8)*data->RangeMilliMe
 538              		.loc 1 141 0
 539 0032 7B68     		ldr	r3, [r7, #4]
 540 0034 D3F87831 		ldr	r3, [r3, #376]
 541 0038 0D4A     		ldr	r2, .L35
 542 003a 1268     		ldr	r2, [r2]
 543 003c 02FB03F2 		mul	r2, r2, r3
 544 0040 0B4B     		ldr	r3, .L35
 545 0042 1B68     		ldr	r3, [r3]
 546 0044 C3F58073 		rsb	r3, r3, #256
 547 0048 3968     		ldr	r1, [r7]
 548 004a 0989     		ldrh	r1, [r1, #8]
 549 004c 01FB03F3 		mul	r3, r1, r3
 550 0050 1344     		add	r3, r3, r2
 551 0052 1A12     		asrs	r2, r3, #8
 552 0054 7B68     		ldr	r3, [r7, #4]
 553 0056 C3F87821 		str	r2, [r3, #376]
ARM GAS  /tmp/ccEZGftl.s 			page 13


 554 005a 03E0     		b	.L30
 555              	.L31:
 142:Src/tof.c     ****     }
 143:Src/tof.c     ****   }
 144:Src/tof.c     ****   else{
 145:Src/tof.c     ****     dev->LeakyFirst = 1;
 556              		.loc 1 145 0
 557 005c 7B68     		ldr	r3, [r7, #4]
 558 005e 0122     		movs	r2, #1
 559 0060 C3F87C21 		str	r2, [r3, #380]
 560              	.L30:
 146:Src/tof.c     ****   }
 147:Src/tof.c     **** }
 561              		.loc 1 147 0
 562 0064 0C37     		adds	r7, r7, #12
 563              	.LCFI28:
 564              		.cfi_def_cfa_offset 4
 565 0066 BD46     		mov	sp, r7
 566              	.LCFI29:
 567              		.cfi_def_cfa_register 13
 568              		@ sp needed
 569 0068 5DF8047B 		ldr	r7, [sp], #4
 570              	.LCFI30:
 571              		.cfi_restore 7
 572              		.cfi_def_cfa_offset 0
 573 006c 7047     		bx	lr
 574              	.L36:
 575 006e 00BF     		.align	2
 576              	.L35:
 577 0070 00000000 		.word	LeakyFactorFix8.8478
 578              		.cfi_endproc
 579              	.LFE128:
 581              		.section	.text.ToF_Poll_Measurement_Data,"ax",%progbits
 582              		.align	2
 583              		.global	ToF_Poll_Measurement_Data
 584              		.thumb
 585              		.thumb_func
 587              	ToF_Poll_Measurement_Data:
 588              	.LFB129:
 148:Src/tof.c     **** 
 149:Src/tof.c     **** int ToF_Poll_Measurement_Data(ToF_Handler *htof){
 589              		.loc 1 149 0
 590              		.cfi_startproc
 591              		@ args = 0, pretend = 0, frame = 16
 592              		@ frame_needed = 1, uses_anonymous_args = 0
 593 0000 80B5     		push	{r7, lr}
 594              	.LCFI31:
 595              		.cfi_def_cfa_offset 8
 596              		.cfi_offset 7, -8
 597              		.cfi_offset 14, -4
 598 0002 84B0     		sub	sp, sp, #16
 599              	.LCFI32:
 600              		.cfi_def_cfa_offset 24
 601 0004 00AF     		add	r7, sp, #0
 602              	.LCFI33:
 603              		.cfi_def_cfa_register 7
 604 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccEZGftl.s 			page 14


 150:Src/tof.c     ****   if(!htof->dev.Present) return -1;
 605              		.loc 1 150 0
 606 0008 7B68     		ldr	r3, [r7, #4]
 607 000a D3F86831 		ldr	r3, [r3, #360]
 608 000e 002B     		cmp	r3, #0
 609 0010 02D1     		bne	.L38
 610              		.loc 1 150 0 is_stmt 0 discriminator 1
 611 0012 4FF0FF33 		mov	r3, #-1
 612 0016 2EE0     		b	.L43
 613              	.L38:
 151:Src/tof.c     ****   
 152:Src/tof.c     ****   uint8_t ready;
 153:Src/tof.c     ****   if(VL53L0X_GetMeasurementDataReady(&htof->dev, &ready) != VL53L0X_ERROR_NONE){
 614              		.loc 1 153 0 is_stmt 1
 615 0018 7A68     		ldr	r2, [r7, #4]
 616 001a 07F10F03 		add	r3, r7, #15
 617 001e 1046     		mov	r0, r2
 618 0020 1946     		mov	r1, r3
 619 0022 FFF7FEFF 		bl	VL53L0X_GetMeasurementDataReady
 620 0026 0346     		mov	r3, r0
 621 0028 002B     		cmp	r3, #0
 622 002a 02D0     		beq	.L40
 154:Src/tof.c     ****     return -1;
 623              		.loc 1 154 0
 624 002c 4FF0FF33 		mov	r3, #-1
 625 0030 21E0     		b	.L43
 626              	.L40:
 155:Src/tof.c     ****   }
 156:Src/tof.c     **** 
 157:Src/tof.c     ****   if(!ready){
 627              		.loc 1 157 0
 628 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 629 0034 002B     		cmp	r3, #0
 630 0036 01D1     		bne	.L41
 158:Src/tof.c     ****     return 1;
 631              		.loc 1 158 0
 632 0038 0123     		movs	r3, #1
 633 003a 1CE0     		b	.L43
 634              	.L41:
 159:Src/tof.c     ****   }
 160:Src/tof.c     **** 
 161:Src/tof.c     ****   if(VL53L0X_GetRangingMeasurementData(&htof->dev, &htof->data) != VL53L0X_ERROR_NONE){
 635              		.loc 1 161 0
 636 003c 7A68     		ldr	r2, [r7, #4]
 637 003e 7B68     		ldr	r3, [r7, #4]
 638 0040 03F5C873 		add	r3, r3, #400
 639 0044 1046     		mov	r0, r2
 640 0046 1946     		mov	r1, r3
 641 0048 FFF7FEFF 		bl	VL53L0X_GetRangingMeasurementData
 642 004c 0346     		mov	r3, r0
 643 004e 002B     		cmp	r3, #0
 644 0050 02D0     		beq	.L42
 162:Src/tof.c     ****     return -1;
 645              		.loc 1 162 0
 646 0052 4FF0FF33 		mov	r3, #-1
 647 0056 0EE0     		b	.L43
 648              	.L42:
ARM GAS  /tmp/ccEZGftl.s 			page 15


 163:Src/tof.c     ****   }
 164:Src/tof.c     **** 
 165:Src/tof.c     ****   ToF_SetNewRange(&htof->dev, &htof->data);
 649              		.loc 1 165 0
 650 0058 7A68     		ldr	r2, [r7, #4]
 651 005a 7B68     		ldr	r3, [r7, #4]
 652 005c 03F5C873 		add	r3, r3, #400
 653 0060 1046     		mov	r0, r2
 654 0062 1946     		mov	r1, r3
 655 0064 FFF7FEFF 		bl	ToF_SetNewRange
 166:Src/tof.c     ****   
 167:Src/tof.c     ****   VL53L0X_ClearInterruptMask(&htof->dev, -1);
 656              		.loc 1 167 0
 657 0068 7B68     		ldr	r3, [r7, #4]
 658 006a 1846     		mov	r0, r3
 659 006c 4FF0FF31 		mov	r1, #-1
 660 0070 FFF7FEFF 		bl	VL53L0X_ClearInterruptMask
 168:Src/tof.c     ****   
 169:Src/tof.c     ****   return 0;
 661              		.loc 1 169 0
 662 0074 0023     		movs	r3, #0
 663              	.L43:
 170:Src/tof.c     **** }
 664              		.loc 1 170 0 discriminator 1
 665 0076 1846     		mov	r0, r3
 666 0078 1037     		adds	r7, r7, #16
 667              	.LCFI34:
 668              		.cfi_def_cfa_offset 8
 669 007a BD46     		mov	sp, r7
 670              	.LCFI35:
 671              		.cfi_def_cfa_register 13
 672              		@ sp needed
 673 007c 80BD     		pop	{r7, pc}
 674              		.cfi_endproc
 675              	.LFE129:
 677 007e 00BF     		.section	.text.ToF_Perform_Measurement,"ax",%progbits
 678              		.align	2
 679              		.global	ToF_Perform_Measurement
 680              		.thumb
 681              		.thumb_func
 683              	ToF_Perform_Measurement:
 684              	.LFB130:
 171:Src/tof.c     **** 
 172:Src/tof.c     **** int ToF_Perform_Measurement(ToF_Dev *dev, ToF_Data *data){
 685              		.loc 1 172 0
 686              		.cfi_startproc
 687              		@ args = 0, pretend = 0, frame = 8
 688              		@ frame_needed = 1, uses_anonymous_args = 0
 689 0000 80B5     		push	{r7, lr}
 690              	.LCFI36:
 691              		.cfi_def_cfa_offset 8
 692              		.cfi_offset 7, -8
 693              		.cfi_offset 14, -4
 694 0002 82B0     		sub	sp, sp, #8
 695              	.LCFI37:
 696              		.cfi_def_cfa_offset 16
 697 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccEZGftl.s 			page 16


 698              	.LCFI38:
 699              		.cfi_def_cfa_register 7
 700 0006 7860     		str	r0, [r7, #4]
 701 0008 3960     		str	r1, [r7]
 173:Src/tof.c     ****   if(!dev->Present) return -1;
 702              		.loc 1 173 0
 703 000a 7B68     		ldr	r3, [r7, #4]
 704 000c D3F86831 		ldr	r3, [r3, #360]
 705 0010 002B     		cmp	r3, #0
 706 0012 02D1     		bne	.L45
 707              		.loc 1 173 0 is_stmt 0 discriminator 1
 708 0014 4FF0FF33 		mov	r3, #-1
 709 0018 0EE0     		b	.L46
 710              	.L45:
 174:Src/tof.c     **** 
 175:Src/tof.c     ****   if(VL53L0X_PerformSingleRangingMeasurement(dev, data) != VL53L0X_ERROR_NONE){
 711              		.loc 1 175 0 is_stmt 1
 712 001a 7868     		ldr	r0, [r7, #4]
 713 001c 3968     		ldr	r1, [r7]
 714 001e FFF7FEFF 		bl	VL53L0X_PerformSingleRangingMeasurement
 715 0022 0346     		mov	r3, r0
 716 0024 002B     		cmp	r3, #0
 717 0026 02D0     		beq	.L47
 176:Src/tof.c     ****     return -1;
 718              		.loc 1 176 0
 719 0028 4FF0FF33 		mov	r3, #-1
 720 002c 04E0     		b	.L46
 721              	.L47:
 177:Src/tof.c     ****   }
 178:Src/tof.c     **** 
 179:Src/tof.c     ****   ToF_SetNewRange(dev, data);
 722              		.loc 1 179 0
 723 002e 7868     		ldr	r0, [r7, #4]
 724 0030 3968     		ldr	r1, [r7]
 725 0032 FFF7FEFF 		bl	ToF_SetNewRange
 180:Src/tof.c     ****   
 181:Src/tof.c     ****   return 0;
 726              		.loc 1 181 0
 727 0036 0023     		movs	r3, #0
 728              	.L46:
 182:Src/tof.c     **** }
 729              		.loc 1 182 0
 730 0038 1846     		mov	r0, r3
 731 003a 0837     		adds	r7, r7, #8
 732              	.LCFI39:
 733              		.cfi_def_cfa_offset 8
 734 003c BD46     		mov	sp, r7
 735              	.LCFI40:
 736              		.cfi_def_cfa_register 13
 737              		@ sp needed
 738 003e 80BD     		pop	{r7, pc}
 739              		.cfi_endproc
 740              	.LFE130:
 742              		.section	.text.ToF_Get_Last_Range,"ax",%progbits
 743              		.align	2
 744              		.global	ToF_Get_Last_Range
 745              		.thumb
ARM GAS  /tmp/ccEZGftl.s 			page 17


 746              		.thumb_func
 748              	ToF_Get_Last_Range:
 749              	.LFB131:
 183:Src/tof.c     **** 
 184:Src/tof.c     **** int ToF_Get_Last_Range(ToF_Handler *htof){
 750              		.loc 1 184 0
 751              		.cfi_startproc
 752              		@ args = 0, pretend = 0, frame = 16
 753              		@ frame_needed = 1, uses_anonymous_args = 0
 754              		@ link register save eliminated.
 755 0000 80B4     		push	{r7}
 756              	.LCFI41:
 757              		.cfi_def_cfa_offset 4
 758              		.cfi_offset 7, -4
 759 0002 85B0     		sub	sp, sp, #20
 760              	.LCFI42:
 761              		.cfi_def_cfa_offset 24
 762 0004 00AF     		add	r7, sp, #0
 763              	.LCFI43:
 764              		.cfi_def_cfa_register 7
 765 0006 7860     		str	r0, [r7, #4]
 766              	.LBB6:
 767              	.LBB7:
 768              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccEZGftl.s 			page 18


  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 769              		.loc 2 71 0
 770              	@ 71 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 771 0008 72B6     		cpsid i
 772              	@ 0 "" 2
 773              		.thumb
 774              	.LBE7:
 775              	.LBE6:
 185:Src/tof.c     ****   __disable_irq();
 186:Src/tof.c     ****   int r = (htof->data.RangeStatus==0)?(htof->dev.LeakyRange):0;
 776              		.loc 1 186 0
 777 000a 7B68     		ldr	r3, [r7, #4]
 778 000c 93F8A831 		ldrb	r3, [r3, #424]	@ zero_extendqisi2
 779 0010 002B     		cmp	r3, #0
 780 0012 03D1     		bne	.L49
 781              		.loc 1 186 0 is_stmt 0 discriminator 1
 782 0014 7B68     		ldr	r3, [r7, #4]
 783 0016 D3F87831 		ldr	r3, [r3, #376]
 784 001a 00E0     		b	.L50
 785              	.L49:
ARM GAS  /tmp/ccEZGftl.s 			page 19


 786              		.loc 1 186 0 discriminator 2
 787 001c 0023     		movs	r3, #0
 788              	.L50:
 789              		.loc 1 186 0 discriminator 4
 790 001e FB60     		str	r3, [r7, #12]
 791              	.LBB8:
 792              	.LBB9:
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 793              		.loc 2 60 0 is_stmt 1 discriminator 4
 794              	@ 60 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 795 0020 62B6     		cpsie i
 796              	@ 0 "" 2
 797              		.thumb
 798              	.LBE9:
 799              	.LBE8:
 187:Src/tof.c     ****   __enable_irq();
 188:Src/tof.c     ****   return r;
 800              		.loc 1 188 0 discriminator 4
 801 0022 FB68     		ldr	r3, [r7, #12]
 189:Src/tof.c     **** }
 802              		.loc 1 189 0 discriminator 4
 803 0024 1846     		mov	r0, r3
 804 0026 1437     		adds	r7, r7, #20
 805              	.LCFI44:
 806              		.cfi_def_cfa_offset 4
 807 0028 BD46     		mov	sp, r7
 808              	.LCFI45:
 809              		.cfi_def_cfa_register 13
 810              		@ sp needed
 811 002a 5DF8047B 		ldr	r7, [sp], #4
 812              	.LCFI46:
 813              		.cfi_restore 7
 814              		.cfi_def_cfa_offset 0
 815 002e 7047     		bx	lr
 816              		.cfi_endproc
 817              	.LFE131:
 819              		.section	.data.LeakyFactorFix8.8478,"aw",%progbits
 820              		.align	2
 823              	LeakyFactorFix8.8478:
 824 0000 99000000 		.word	153
 825              		.text
 826              	.Letext0:
 827              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 828              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 829              		.file 5 "Drivers/VL53L0X/API/vl53l0x_types.h"
 830              		.file 6 "Drivers/VL53L0X/API/vl53l0x_device.h"
 831              		.file 7 "Drivers/VL53L0X/API/vl53l0x_def.h"
 832              		.file 8 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303x8.h"
 833              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 834              		.file 10 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 835              		.file 11 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_i2c.h"
 836              		.file 12 "Drivers/VL53L0X/Platform/vl53l0x_platform.h"
 837              		.file 13 "Inc/tof.h"
 838              		.file 14 "Drivers/CMSIS/Include/core_cm4.h"
ARM GAS  /tmp/ccEZGftl.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tof.c
     /tmp/ccEZGftl.s:21     .text.ToF_Init_Struct:0000000000000000 $t
     /tmp/ccEZGftl.s:26     .text.ToF_Init_Struct:0000000000000000 ToF_Init_Struct
     /tmp/ccEZGftl.s:77     .text.ToF_Poke:0000000000000000 $t
     /tmp/ccEZGftl.s:82     .text.ToF_Poke:0000000000000000 ToF_Poke
     /tmp/ccEZGftl.s:142    .text.ToF_Set_Address:0000000000000000 $t
     /tmp/ccEZGftl.s:147    .text.ToF_Set_Address:0000000000000000 ToF_Set_Address
     /tmp/ccEZGftl.s:205    .text.ToF_Init_Device:0000000000000000 $t
     /tmp/ccEZGftl.s:210    .text.ToF_Init_Device:0000000000000000 ToF_Init_Device
     /tmp/ccEZGftl.s:277    .text.ToF_Configure_Device:0000000000000000 $t
     /tmp/ccEZGftl.s:282    .text.ToF_Configure_Device:0000000000000000 ToF_Configure_Device
     /tmp/ccEZGftl.s:493    .text.ToF_SetNewRange:0000000000000000 $t
     /tmp/ccEZGftl.s:497    .text.ToF_SetNewRange:0000000000000000 ToF_SetNewRange
     /tmp/ccEZGftl.s:577    .text.ToF_SetNewRange:0000000000000070 $d
     /tmp/ccEZGftl.s:823    .data.LeakyFactorFix8.8478:0000000000000000 LeakyFactorFix8.8478
     /tmp/ccEZGftl.s:582    .text.ToF_Poll_Measurement_Data:0000000000000000 $t
     /tmp/ccEZGftl.s:587    .text.ToF_Poll_Measurement_Data:0000000000000000 ToF_Poll_Measurement_Data
     /tmp/ccEZGftl.s:678    .text.ToF_Perform_Measurement:0000000000000000 $t
     /tmp/ccEZGftl.s:683    .text.ToF_Perform_Measurement:0000000000000000 ToF_Perform_Measurement
     /tmp/ccEZGftl.s:743    .text.ToF_Get_Last_Range:0000000000000000 $t
     /tmp/ccEZGftl.s:748    .text.ToF_Get_Last_Range:0000000000000000 ToF_Get_Last_Range
     /tmp/ccEZGftl.s:820    .data.LeakyFactorFix8.8478:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
VL53L0X_WrByte
VL53L0X_RdWord
VL53L0X_SetDeviceAddress
VL53L0X_DataInit
VL53L0X_StaticInit
VL53L0X_PerformRefSpadManagement
VL53L0X_PerformRefCalibration
VL53L0X_SetDeviceMode
VL53L0X_SetLimitCheckEnable
VL53L0X_SetLimitCheckValue
VL53L0X_SetMeasurementTimingBudgetMicroSeconds
VL53L0X_SetVcselPulsePeriod
VL53L0X_GetMeasurementDataReady
VL53L0X_GetRangingMeasurementData
VL53L0X_ClearInterruptMask
VL53L0X_PerformSingleRangingMeasurement
