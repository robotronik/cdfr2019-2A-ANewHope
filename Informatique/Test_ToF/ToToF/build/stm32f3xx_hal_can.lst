ARM GAS  /tmp/ccm0Y8sw.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"stm32f3xx_hal_can.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_CAN_Init,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_CAN_Init
  23              		.thumb
  24              		.thumb_func
  26              	HAL_CAN_Init:
  27              	.LFB123:
  28              		.file 1 "Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c"
   1:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
   2:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   ******************************************************************************
   3:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @file    stm32f3xx_hal_can.c
   4:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @author  MCD Application Team
   5:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief   CAN HAL module driver.
   6:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *          functionalities of the Controller Area Network (CAN) peripheral:
   8:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *           + Configuration functions
  10:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *           + Control functions
  11:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *           + Interrupts management
  12:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *           + Callbacks functions
  13:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *           + Peripheral State and Error functions
  14:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *
  15:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   @verbatim
  16:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   ==============================================================================
  17:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                         ##### How to use this driver #####
  18:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   ==============================================================================
  19:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     [..]
  20:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (#) Initialize the CAN low level resources by implementing the
  21:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           HAL_CAN_MspInit():
  22:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****          (++) Enable the CAN interface clock using __HAL_RCC_CANx_CLK_ENABLE()
  23:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****          (++) Configure CAN pins
  24:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****              (+++) Enable the clock for the CAN GPIOs
  25:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****              (+++) Configure CAN pins as alternate function open-drain
  26:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****          (++) In case of using interrupts (e.g. HAL_CAN_ActivateNotification())
  27:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****              (+++) Configure the CAN interrupt priority using
  28:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                    HAL_NVIC_SetPriority()
  29:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****              (+++) Enable the CAN IRQ handler using HAL_NVIC_EnableIRQ()
  30:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****              (+++) In CAN IRQ handler, call HAL_CAN_IRQHandler()
ARM GAS  /tmp/ccm0Y8sw.s 			page 2


  31:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
  32:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (#) Initialize the CAN peripheral using HAL_CAN_Init() function. This
  33:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           function resorts to HAL_CAN_MspInit() for low-level initialization.
  34:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
  35:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (#) Configure the reception filters using the following configuration
  36:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           functions:
  37:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             (++) HAL_CAN_ConfigFilter()
  38:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
  39:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (#) Start the CAN module using HAL_CAN_Start() function. At this level
  40:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           the node is active on the bus: it receive messages, and can send
  41:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           messages.
  42:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
  43:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (#) To manage messages transmission, the following Tx control functions
  44:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           can be used:
  45:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             (++) HAL_CAN_AddTxMessage() to request transmission of a new
  46:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                  message.
  47:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             (++) HAL_CAN_AbortTxRequest() to abort transmission of a pending
  48:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                  message.
  49:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             (++) HAL_CAN_GetTxMailboxesFreeLevel() to get the number of free Tx
  50:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                  mailboxes.
  51:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             (++) HAL_CAN_IsTxMessagePending() to check if a message is pending
  52:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                  in a Tx mailbox.
  53:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             (++) HAL_CAN_GetTxTimestamp() to get the timestamp of Tx message
  54:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                  sent, if time triggered communication mode is enabled.
  55:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
  56:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (#) When a message is received into the CAN Rx FIFOs, it can be retrieved
  57:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           using the HAL_CAN_GetRxMessage() function. The function
  58:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           HAL_CAN_GetRxFifoFillLevel() allows to know how many Rx message are
  59:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           stored in the Rx Fifo.
  60:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
  61:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (#) Calling the HAL_CAN_Stop() function stops the CAN module.
  62:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
  63:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (#) The deinitialization is achieved with HAL_CAN_DeInit() function.
  64:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
  65:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
  66:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       *** Polling mode operation ***
  67:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       ==============================
  68:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     [..]
  69:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (#) Reception:
  70:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             (++) Monitor reception of message using HAL_CAN_GetRxFifoFillLevel()
  71:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                  until at least one message is received.
  72:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             (++) Then get the message using HAL_CAN_GetRxMessage().
  73:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
  74:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (#) Transmission:
  75:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             (++) Monitor the Tx mailboxes availability until at least one Tx
  76:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                  mailbox is free, using HAL_CAN_GetTxMailboxesFreeLevel().
  77:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             (++) Then request transmission of a message using
  78:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                  HAL_CAN_AddTxMessage().
  79:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
  80:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
  81:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       *** Interrupt mode operation ***
  82:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       ================================
  83:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     [..]
  84:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (#) Notifications are activated using HAL_CAN_ActivateNotification()
  85:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           function. Then, the process can be controlled through the
  86:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           available user callbacks: HAL_CAN_xxxCallback(), using same APIs
  87:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           HAL_CAN_GetRxMessage() and HAL_CAN_AddTxMessage().
ARM GAS  /tmp/ccm0Y8sw.s 			page 3


  88:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
  89:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (#) Notifications can be deactivated using
  90:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           HAL_CAN_DeactivateNotification() function.
  91:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
  92:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (#) Special care should be taken for CAN_IT_RX_FIFO0_MSG_PENDING and
  93:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           CAN_IT_RX_FIFO1_MSG_PENDING notifications. These notifications trig
  94:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           the callbacks HAL_CAN_RxFIFO0MsgPendingCallback() and
  95:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           HAL_CAN_RxFIFO1MsgPendingCallback(). User has two possible options
  96:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           here.
  97:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             (++) Directly get the Rx message in the callback, using
  98:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                  HAL_CAN_GetRxMessage().
  99:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             (++) Or deactivate the notification in the callback without
 100:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                  getting the Rx message. The Rx message can then be got later
 101:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                  using HAL_CAN_GetRxMessage(). Once the Rx message have been
 102:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                  read, the notification can be activated again.
 103:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 104:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 105:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       *** Sleep mode ***
 106:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       ==================
 107:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     [..]
 108:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (#) The CAN peripheral can be put in sleep mode (low power), using
 109:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           HAL_CAN_RequestSleep(). The sleep mode will be entered as soon as the
 110:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           current CAN activity (transmission or reception of a CAN frame) will
 111:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           be completed.
 112:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 113:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (#) A notification can be activated to be informed when the sleep mode
 114:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           will be entered.
 115:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 116:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (#) It can be checked if the sleep mode is entered using
 117:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           HAL_CAN_IsSleepActive().
 118:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           Note that the CAN state (accessible from the API HAL_CAN_GetState())
 119:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           is HAL_CAN_STATE_SLEEP_PENDING as soon as the sleep mode request is
 120:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           submitted (the sleep mode is not yet entered), and become
 121:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           HAL_CAN_STATE_SLEEP_ACTIVE when the sleep mode is effective.
 122:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 123:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (#) The wake-up from sleep mode can be trigged by two ways:
 124:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             (++) Using HAL_CAN_WakeUp(). When returning from this function,
 125:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                  the sleep mode is exited (if return status is HAL_OK).
 126:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             (++) When a start of Rx CAN frame is detected by the CAN peripheral,
 127:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                  if automatic wake up mode is enabled.
 128:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 129:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   @endverbatim
 130:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   ******************************************************************************
 131:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @attention
 132:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *
 133:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
 134:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *
 135:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * Redistribution and use in source and binary forms, with or without modification,
 136:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * are permitted provided that the following conditions are met:
 137:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 138:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *      this list of conditions and the following disclaimer.
 139:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 140:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *      this list of conditions and the following disclaimer in the documentation
 141:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *      and/or other materials provided with the distribution.
 142:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 143:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *      may be used to endorse or promote products derived from this software
 144:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *      without specific prior written permission.
ARM GAS  /tmp/ccm0Y8sw.s 			page 4


 145:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *
 146:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 147:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 148:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 149:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 150:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 151:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 152:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 153:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 154:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 155:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 156:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *
 157:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   ******************************************************************************
 158:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
 159:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 160:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /* Includes ------------------------------------------------------------------*/
 161:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** #include "stm32f3xx_hal.h"
 162:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 163:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /** @addtogroup STM32F3xx_HAL_Driver
 164:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @{
 165:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
 166:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 167:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** #if defined(CAN)
 168:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 169:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /** @defgroup CAN CAN
 170:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief CAN driver modules
 171:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @{
 172:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
 173:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 174:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** #ifdef HAL_CAN_MODULE_ENABLED
 175:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 176:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** #ifdef HAL_CAN_LEGACY_MODULE_ENABLED
 177:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   #error "The CAN driver cannot be used with its legacy, Please enable only one CAN module at once"
 178:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** #endif
 179:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 180:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /* Private typedef -----------------------------------------------------------*/
 181:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /* Private define ------------------------------------------------------------*/
 182:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /** @defgroup CAN_Private_Constants CAN Private Constants
 183:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @{
 184:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
 185:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** #define CAN_TIMEOUT_VALUE 10U
 186:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
 187:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @}
 188:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
 189:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /* Private macro -------------------------------------------------------------*/
 190:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /* Private variables ---------------------------------------------------------*/
 191:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /* Private function prototypes -----------------------------------------------*/
 192:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /* Exported functions --------------------------------------------------------*/
 193:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 194:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /** @defgroup CAN_Exported_Functions CAN Exported Functions
 195:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @{
 196:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
 197:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 198:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group1 Initialization and de-initialization functions
 199:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****  *  @brief    Initialization and Configuration functions
 200:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****  *
 201:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** @verbatim
ARM GAS  /tmp/ccm0Y8sw.s 			page 5


 202:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   ==============================================================================
 203:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****               ##### Initialization and de-initialization functions #####
 204:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   ==============================================================================
 205:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     [..]  This section provides functions allowing to:
 206:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_Init                       : Initialize and configure the CAN.
 207:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_DeInit                     : De-initialize the CAN.
 208:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_MspInit                    : Initialize the CAN MSP.
 209:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_MspDeInit                  : DeInitialize the CAN MSP.
 210:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 211:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** @endverbatim
 212:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @{
 213:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
 214:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 215:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
 216:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Initializes the CAN peripheral according to the specified
 217:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         parameters in the CAN_InitStruct.
 218:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 219:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
 220:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval HAL status
 221:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
 222:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
 223:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
  29              		.loc 1 223 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 16
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 84B0     		sub	sp, sp, #16
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 24
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 7860     		str	r0, [r7, #4]
 224:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   uint32_t tickstart;
 225:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 226:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Check CAN handle */
 227:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if (hcan == NULL)
  45              		.loc 1 227 0
  46 0008 7B68     		ldr	r3, [r7, #4]
  47 000a 002B     		cmp	r3, #0
  48 000c 01D1     		bne	.L2
 228:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 229:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     return HAL_ERROR;
  49              		.loc 1 229 0
  50 000e 0123     		movs	r3, #1
  51 0010 ECE0     		b	.L3
  52              	.L2:
 230:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 231:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 232:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Check the parameters */
 233:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 234:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
ARM GAS  /tmp/ccm0Y8sw.s 			page 6


 235:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 236:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 237:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 238:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 239:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 240:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   assert_param(IS_CAN_MODE(hcan->Init.Mode));
 241:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 242:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 243:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 244:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 245:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 246:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_RESET)
  53              		.loc 1 246 0
  54 0012 7B68     		ldr	r3, [r7, #4]
  55 0014 93F82030 		ldrb	r3, [r3, #32]
  56 0018 DBB2     		uxtb	r3, r3
  57 001a 002B     		cmp	r3, #0
  58 001c 02D1     		bne	.L4
 247:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 248:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Init the low level hardware: CLOCK, NVIC */
 249:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     HAL_CAN_MspInit(hcan);
  59              		.loc 1 249 0
  60 001e 7868     		ldr	r0, [r7, #4]
  61 0020 FFF7FEFF 		bl	HAL_CAN_MspInit
  62              	.L4:
 250:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 251:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 252:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Exit from sleep mode */
 253:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
  63              		.loc 1 253 0
  64 0024 7B68     		ldr	r3, [r7, #4]
  65 0026 1B68     		ldr	r3, [r3]
  66 0028 7A68     		ldr	r2, [r7, #4]
  67 002a 1268     		ldr	r2, [r2]
  68 002c 1268     		ldr	r2, [r2]
  69 002e 22F00202 		bic	r2, r2, #2
  70 0032 1A60     		str	r2, [r3]
 254:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 255:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Get tick */
 256:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   tickstart = HAL_GetTick();
  71              		.loc 1 256 0
  72 0034 FFF7FEFF 		bl	HAL_GetTick
  73 0038 F860     		str	r0, [r7, #12]
 257:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 258:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Check Sleep mode leave acknowledge */
 259:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
  74              		.loc 1 259 0
  75 003a 12E0     		b	.L5
  76              	.L6:
 260:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 261:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
  77              		.loc 1 261 0
  78 003c FFF7FEFF 		bl	HAL_GetTick
  79 0040 0246     		mov	r2, r0
  80 0042 FB68     		ldr	r3, [r7, #12]
  81 0044 D31A     		subs	r3, r2, r3
  82 0046 0A2B     		cmp	r3, #10
ARM GAS  /tmp/ccm0Y8sw.s 			page 7


  83 0048 0BD9     		bls	.L5
 262:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
 263:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Update error code */
 264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
  84              		.loc 1 264 0
  85 004a 7B68     		ldr	r3, [r7, #4]
  86 004c 5B6A     		ldr	r3, [r3, #36]
  87 004e 43F40032 		orr	r2, r3, #131072
  88 0052 7B68     		ldr	r3, [r7, #4]
  89 0054 5A62     		str	r2, [r3, #36]
 265:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 266:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Change CAN state */
 267:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
  90              		.loc 1 267 0
  91 0056 7B68     		ldr	r3, [r7, #4]
  92 0058 0522     		movs	r2, #5
  93 005a 83F82020 		strb	r2, [r3, #32]
 268:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 269:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       return HAL_ERROR;
  94              		.loc 1 269 0
  95 005e 0123     		movs	r3, #1
  96 0060 C4E0     		b	.L3
  97              	.L5:
 259:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
  98              		.loc 1 259 0
  99 0062 7B68     		ldr	r3, [r7, #4]
 100 0064 1B68     		ldr	r3, [r3]
 101 0066 5B68     		ldr	r3, [r3, #4]
 102 0068 03F00203 		and	r3, r3, #2
 103 006c 002B     		cmp	r3, #0
 104 006e E5D1     		bne	.L6
 270:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
 271:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 272:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 273:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Request initialisation */
 274:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 105              		.loc 1 274 0
 106 0070 7B68     		ldr	r3, [r7, #4]
 107 0072 1B68     		ldr	r3, [r3]
 108 0074 7A68     		ldr	r2, [r7, #4]
 109 0076 1268     		ldr	r2, [r2]
 110 0078 1268     		ldr	r2, [r2]
 111 007a 42F00102 		orr	r2, r2, #1
 112 007e 1A60     		str	r2, [r3]
 275:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 276:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Get tick */
 277:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   tickstart = HAL_GetTick();
 113              		.loc 1 277 0
 114 0080 FFF7FEFF 		bl	HAL_GetTick
 115 0084 F860     		str	r0, [r7, #12]
 278:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 279:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Wait initialisation acknowledge */
 280:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 116              		.loc 1 280 0
 117 0086 12E0     		b	.L7
 118              	.L8:
 281:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
ARM GAS  /tmp/ccm0Y8sw.s 			page 8


 282:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 119              		.loc 1 282 0
 120 0088 FFF7FEFF 		bl	HAL_GetTick
 121 008c 0246     		mov	r2, r0
 122 008e FB68     		ldr	r3, [r7, #12]
 123 0090 D31A     		subs	r3, r2, r3
 124 0092 0A2B     		cmp	r3, #10
 125 0094 0BD9     		bls	.L7
 283:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
 284:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Update error code */
 285:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 126              		.loc 1 285 0
 127 0096 7B68     		ldr	r3, [r7, #4]
 128 0098 5B6A     		ldr	r3, [r3, #36]
 129 009a 43F40032 		orr	r2, r3, #131072
 130 009e 7B68     		ldr	r3, [r7, #4]
 131 00a0 5A62     		str	r2, [r3, #36]
 286:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 287:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Change CAN state */
 288:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       hcan->State = HAL_CAN_STATE_ERROR;
 132              		.loc 1 288 0
 133 00a2 7B68     		ldr	r3, [r7, #4]
 134 00a4 0522     		movs	r2, #5
 135 00a6 83F82020 		strb	r2, [r3, #32]
 289:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 290:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       return HAL_ERROR;
 136              		.loc 1 290 0
 137 00aa 0123     		movs	r3, #1
 138 00ac 9EE0     		b	.L3
 139              	.L7:
 280:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 140              		.loc 1 280 0
 141 00ae 7B68     		ldr	r3, [r7, #4]
 142 00b0 1B68     		ldr	r3, [r3]
 143 00b2 5B68     		ldr	r3, [r3, #4]
 144 00b4 03F00103 		and	r3, r3, #1
 145 00b8 002B     		cmp	r3, #0
 146 00ba E5D0     		beq	.L8
 291:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
 292:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 293:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 294:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Set the time triggered communication mode */
 295:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if (hcan->Init.TimeTriggeredMode == ENABLE)
 147              		.loc 1 295 0
 148 00bc 7B68     		ldr	r3, [r7, #4]
 149 00be 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 150 00c0 012B     		cmp	r3, #1
 151 00c2 08D1     		bne	.L9
 296:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 297:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 152              		.loc 1 297 0
 153 00c4 7B68     		ldr	r3, [r7, #4]
 154 00c6 1B68     		ldr	r3, [r3]
 155 00c8 7A68     		ldr	r2, [r7, #4]
 156 00ca 1268     		ldr	r2, [r2]
 157 00cc 1268     		ldr	r2, [r2]
 158 00ce 42F08002 		orr	r2, r2, #128
ARM GAS  /tmp/ccm0Y8sw.s 			page 9


 159 00d2 1A60     		str	r2, [r3]
 160 00d4 07E0     		b	.L10
 161              	.L9:
 298:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 299:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   else
 300:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 301:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 162              		.loc 1 301 0
 163 00d6 7B68     		ldr	r3, [r7, #4]
 164 00d8 1B68     		ldr	r3, [r3]
 165 00da 7A68     		ldr	r2, [r7, #4]
 166 00dc 1268     		ldr	r2, [r2]
 167 00de 1268     		ldr	r2, [r2]
 168 00e0 22F08002 		bic	r2, r2, #128
 169 00e4 1A60     		str	r2, [r3]
 170              	.L10:
 302:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 303:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 304:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Set the automatic bus-off management */
 305:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if (hcan->Init.AutoBusOff == ENABLE)
 171              		.loc 1 305 0
 172 00e6 7B68     		ldr	r3, [r7, #4]
 173 00e8 5B7E     		ldrb	r3, [r3, #25]	@ zero_extendqisi2
 174 00ea 012B     		cmp	r3, #1
 175 00ec 08D1     		bne	.L11
 306:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 307:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 176              		.loc 1 307 0
 177 00ee 7B68     		ldr	r3, [r7, #4]
 178 00f0 1B68     		ldr	r3, [r3]
 179 00f2 7A68     		ldr	r2, [r7, #4]
 180 00f4 1268     		ldr	r2, [r2]
 181 00f6 1268     		ldr	r2, [r2]
 182 00f8 42F04002 		orr	r2, r2, #64
 183 00fc 1A60     		str	r2, [r3]
 184 00fe 07E0     		b	.L12
 185              	.L11:
 308:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 309:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   else
 310:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 311:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 186              		.loc 1 311 0
 187 0100 7B68     		ldr	r3, [r7, #4]
 188 0102 1B68     		ldr	r3, [r3]
 189 0104 7A68     		ldr	r2, [r7, #4]
 190 0106 1268     		ldr	r2, [r2]
 191 0108 1268     		ldr	r2, [r2]
 192 010a 22F04002 		bic	r2, r2, #64
 193 010e 1A60     		str	r2, [r3]
 194              	.L12:
 312:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 313:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 314:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Set the automatic wake-up mode */
 315:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if (hcan->Init.AutoWakeUp == ENABLE)
 195              		.loc 1 315 0
 196 0110 7B68     		ldr	r3, [r7, #4]
 197 0112 9B7E     		ldrb	r3, [r3, #26]	@ zero_extendqisi2
ARM GAS  /tmp/ccm0Y8sw.s 			page 10


 198 0114 012B     		cmp	r3, #1
 199 0116 08D1     		bne	.L13
 316:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 317:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 200              		.loc 1 317 0
 201 0118 7B68     		ldr	r3, [r7, #4]
 202 011a 1B68     		ldr	r3, [r3]
 203 011c 7A68     		ldr	r2, [r7, #4]
 204 011e 1268     		ldr	r2, [r2]
 205 0120 1268     		ldr	r2, [r2]
 206 0122 42F02002 		orr	r2, r2, #32
 207 0126 1A60     		str	r2, [r3]
 208 0128 07E0     		b	.L14
 209              	.L13:
 318:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 319:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   else
 320:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 321:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 210              		.loc 1 321 0
 211 012a 7B68     		ldr	r3, [r7, #4]
 212 012c 1B68     		ldr	r3, [r3]
 213 012e 7A68     		ldr	r2, [r7, #4]
 214 0130 1268     		ldr	r2, [r2]
 215 0132 1268     		ldr	r2, [r2]
 216 0134 22F02002 		bic	r2, r2, #32
 217 0138 1A60     		str	r2, [r3]
 218              	.L14:
 322:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 323:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 324:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Set the automatic retransmission */
 325:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if (hcan->Init.AutoRetransmission == ENABLE)
 219              		.loc 1 325 0
 220 013a 7B68     		ldr	r3, [r7, #4]
 221 013c DB7E     		ldrb	r3, [r3, #27]	@ zero_extendqisi2
 222 013e 012B     		cmp	r3, #1
 223 0140 08D1     		bne	.L15
 326:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 327:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 224              		.loc 1 327 0
 225 0142 7B68     		ldr	r3, [r7, #4]
 226 0144 1B68     		ldr	r3, [r3]
 227 0146 7A68     		ldr	r2, [r7, #4]
 228 0148 1268     		ldr	r2, [r2]
 229 014a 1268     		ldr	r2, [r2]
 230 014c 22F01002 		bic	r2, r2, #16
 231 0150 1A60     		str	r2, [r3]
 232 0152 07E0     		b	.L16
 233              	.L15:
 328:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 329:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   else
 330:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 331:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 234              		.loc 1 331 0
 235 0154 7B68     		ldr	r3, [r7, #4]
 236 0156 1B68     		ldr	r3, [r3]
 237 0158 7A68     		ldr	r2, [r7, #4]
 238 015a 1268     		ldr	r2, [r2]
ARM GAS  /tmp/ccm0Y8sw.s 			page 11


 239 015c 1268     		ldr	r2, [r2]
 240 015e 42F01002 		orr	r2, r2, #16
 241 0162 1A60     		str	r2, [r3]
 242              	.L16:
 332:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 333:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 334:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Set the receive FIFO locked mode */
 335:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if (hcan->Init.ReceiveFifoLocked == ENABLE)
 243              		.loc 1 335 0
 244 0164 7B68     		ldr	r3, [r7, #4]
 245 0166 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 246 0168 012B     		cmp	r3, #1
 247 016a 08D1     		bne	.L17
 336:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 337:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 248              		.loc 1 337 0
 249 016c 7B68     		ldr	r3, [r7, #4]
 250 016e 1B68     		ldr	r3, [r3]
 251 0170 7A68     		ldr	r2, [r7, #4]
 252 0172 1268     		ldr	r2, [r2]
 253 0174 1268     		ldr	r2, [r2]
 254 0176 42F00802 		orr	r2, r2, #8
 255 017a 1A60     		str	r2, [r3]
 256 017c 07E0     		b	.L18
 257              	.L17:
 338:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 339:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   else
 340:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 341:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 258              		.loc 1 341 0
 259 017e 7B68     		ldr	r3, [r7, #4]
 260 0180 1B68     		ldr	r3, [r3]
 261 0182 7A68     		ldr	r2, [r7, #4]
 262 0184 1268     		ldr	r2, [r2]
 263 0186 1268     		ldr	r2, [r2]
 264 0188 22F00802 		bic	r2, r2, #8
 265 018c 1A60     		str	r2, [r3]
 266              	.L18:
 342:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 343:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 344:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Set the transmit FIFO priority */
 345:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if (hcan->Init.TransmitFifoPriority == ENABLE)
 267              		.loc 1 345 0
 268 018e 7B68     		ldr	r3, [r7, #4]
 269 0190 5B7F     		ldrb	r3, [r3, #29]	@ zero_extendqisi2
 270 0192 012B     		cmp	r3, #1
 271 0194 08D1     		bne	.L19
 346:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 347:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 272              		.loc 1 347 0
 273 0196 7B68     		ldr	r3, [r7, #4]
 274 0198 1B68     		ldr	r3, [r3]
 275 019a 7A68     		ldr	r2, [r7, #4]
 276 019c 1268     		ldr	r2, [r2]
 277 019e 1268     		ldr	r2, [r2]
 278 01a0 42F00402 		orr	r2, r2, #4
 279 01a4 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccm0Y8sw.s 			page 12


 280 01a6 07E0     		b	.L20
 281              	.L19:
 348:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 349:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   else
 350:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 351:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 282              		.loc 1 351 0
 283 01a8 7B68     		ldr	r3, [r7, #4]
 284 01aa 1B68     		ldr	r3, [r3]
 285 01ac 7A68     		ldr	r2, [r7, #4]
 286 01ae 1268     		ldr	r2, [r2]
 287 01b0 1268     		ldr	r2, [r2]
 288 01b2 22F00402 		bic	r2, r2, #4
 289 01b6 1A60     		str	r2, [r3]
 290              	.L20:
 352:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 353:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 354:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Set the bit timing register */
 355:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 291              		.loc 1 355 0
 292 01b8 7B68     		ldr	r3, [r7, #4]
 293 01ba 1B68     		ldr	r3, [r3]
 294 01bc 7A68     		ldr	r2, [r7, #4]
 295 01be 9168     		ldr	r1, [r2, #8]
 296 01c0 7A68     		ldr	r2, [r7, #4]
 297 01c2 D268     		ldr	r2, [r2, #12]
 298 01c4 1143     		orrs	r1, r1, r2
 299 01c6 7A68     		ldr	r2, [r7, #4]
 300 01c8 1269     		ldr	r2, [r2, #16]
 301 01ca 1143     		orrs	r1, r1, r2
 302 01cc 7A68     		ldr	r2, [r7, #4]
 303 01ce 5269     		ldr	r2, [r2, #20]
 304 01d0 1143     		orrs	r1, r1, r2
 305 01d2 7A68     		ldr	r2, [r7, #4]
 306 01d4 5268     		ldr	r2, [r2, #4]
 307 01d6 013A     		subs	r2, r2, #1
 308 01d8 0A43     		orrs	r2, r2, r1
 309 01da DA61     		str	r2, [r3, #28]
 356:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                                             hcan->Init.SyncJumpWidth  |
 357:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                                             hcan->Init.TimeSeg1       |
 358:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                                             hcan->Init.TimeSeg2       |
 359:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                                             (hcan->Init.Prescaler - 1U)));
 360:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 361:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Initialize the error code */
 362:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 310              		.loc 1 362 0
 311 01dc 7B68     		ldr	r3, [r7, #4]
 312 01de 0022     		movs	r2, #0
 313 01e0 5A62     		str	r2, [r3, #36]
 363:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 364:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Initialize the CAN state */
 365:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_READY;
 314              		.loc 1 365 0
 315 01e2 7B68     		ldr	r3, [r7, #4]
 316 01e4 0122     		movs	r2, #1
 317 01e6 83F82020 		strb	r2, [r3, #32]
 366:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
ARM GAS  /tmp/ccm0Y8sw.s 			page 13


 367:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Return function status */
 368:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   return HAL_OK;
 318              		.loc 1 368 0
 319 01ea 0023     		movs	r3, #0
 320              	.L3:
 369:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 321              		.loc 1 369 0
 322 01ec 1846     		mov	r0, r3
 323 01ee 1037     		adds	r7, r7, #16
 324              	.LCFI3:
 325              		.cfi_def_cfa_offset 8
 326 01f0 BD46     		mov	sp, r7
 327              	.LCFI4:
 328              		.cfi_def_cfa_register 13
 329              		@ sp needed
 330 01f2 80BD     		pop	{r7, pc}
 331              		.cfi_endproc
 332              	.LFE123:
 334              		.section	.text.HAL_CAN_DeInit,"ax",%progbits
 335              		.align	2
 336              		.global	HAL_CAN_DeInit
 337              		.thumb
 338              		.thumb_func
 340              	HAL_CAN_DeInit:
 341              	.LFB124:
 370:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 371:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
 372:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Deinitializes the CAN peripheral registers to their default
 373:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         reset values.
 374:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 375:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
 376:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval HAL status
 377:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
 378:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
 379:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 342              		.loc 1 379 0
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 8
 345              		@ frame_needed = 1, uses_anonymous_args = 0
 346 0000 80B5     		push	{r7, lr}
 347              	.LCFI5:
 348              		.cfi_def_cfa_offset 8
 349              		.cfi_offset 7, -8
 350              		.cfi_offset 14, -4
 351 0002 82B0     		sub	sp, sp, #8
 352              	.LCFI6:
 353              		.cfi_def_cfa_offset 16
 354 0004 00AF     		add	r7, sp, #0
 355              	.LCFI7:
 356              		.cfi_def_cfa_register 7
 357 0006 7860     		str	r0, [r7, #4]
 380:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Check CAN handle */
 381:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if (hcan == NULL)
 358              		.loc 1 381 0
 359 0008 7B68     		ldr	r3, [r7, #4]
 360 000a 002B     		cmp	r3, #0
 361 000c 01D1     		bne	.L22
ARM GAS  /tmp/ccm0Y8sw.s 			page 14


 382:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 383:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     return HAL_ERROR;
 362              		.loc 1 383 0
 363 000e 0123     		movs	r3, #1
 364 0010 15E0     		b	.L23
 365              	.L22:
 384:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 385:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 386:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Check the parameters */
 387:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 388:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 389:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Stop the CAN module */
 390:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   (void)HAL_CAN_Stop(hcan);
 366              		.loc 1 390 0
 367 0012 7868     		ldr	r0, [r7, #4]
 368 0014 FFF7FEFF 		bl	HAL_CAN_Stop
 391:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 392:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* DeInit the low level hardware: CLOCK, NVIC */
 393:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   HAL_CAN_MspDeInit(hcan);
 369              		.loc 1 393 0
 370 0018 7868     		ldr	r0, [r7, #4]
 371 001a FFF7FEFF 		bl	HAL_CAN_MspDeInit
 394:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 395:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Reset the CAN peripheral */
 396:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 372              		.loc 1 396 0
 373 001e 7B68     		ldr	r3, [r7, #4]
 374 0020 1B68     		ldr	r3, [r3]
 375 0022 7A68     		ldr	r2, [r7, #4]
 376 0024 1268     		ldr	r2, [r2]
 377 0026 1268     		ldr	r2, [r2]
 378 0028 42F40042 		orr	r2, r2, #32768
 379 002c 1A60     		str	r2, [r3]
 397:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 398:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Reset the CAN ErrorCode */
 399:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 380              		.loc 1 399 0
 381 002e 7B68     		ldr	r3, [r7, #4]
 382 0030 0022     		movs	r2, #0
 383 0032 5A62     		str	r2, [r3, #36]
 400:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 401:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Change CAN state */
 402:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   hcan->State = HAL_CAN_STATE_RESET;
 384              		.loc 1 402 0
 385 0034 7B68     		ldr	r3, [r7, #4]
 386 0036 0022     		movs	r2, #0
 387 0038 83F82020 		strb	r2, [r3, #32]
 403:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 404:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Return function status */
 405:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   return HAL_OK;
 388              		.loc 1 405 0
 389 003c 0023     		movs	r3, #0
 390              	.L23:
 406:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 391              		.loc 1 406 0
 392 003e 1846     		mov	r0, r3
 393 0040 0837     		adds	r7, r7, #8
ARM GAS  /tmp/ccm0Y8sw.s 			page 15


 394              	.LCFI8:
 395              		.cfi_def_cfa_offset 8
 396 0042 BD46     		mov	sp, r7
 397              	.LCFI9:
 398              		.cfi_def_cfa_register 13
 399              		@ sp needed
 400 0044 80BD     		pop	{r7, pc}
 401              		.cfi_endproc
 402              	.LFE124:
 404              		.section	.text.HAL_CAN_MspInit,"ax",%progbits
 405              		.align	2
 406              		.weak	HAL_CAN_MspInit
 407              		.thumb
 408              		.thumb_func
 410              	HAL_CAN_MspInit:
 411              	.LFB125:
 407:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 408:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
 409:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Initializes the CAN MSP.
 410:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 411:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
 412:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval None
 413:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
 414:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** __weak void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
 415:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 412              		.loc 1 415 0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 8
 415              		@ frame_needed = 1, uses_anonymous_args = 0
 416              		@ link register save eliminated.
 417 0000 80B4     		push	{r7}
 418              	.LCFI10:
 419              		.cfi_def_cfa_offset 4
 420              		.cfi_offset 7, -4
 421 0002 83B0     		sub	sp, sp, #12
 422              	.LCFI11:
 423              		.cfi_def_cfa_offset 16
 424 0004 00AF     		add	r7, sp, #0
 425              	.LCFI12:
 426              		.cfi_def_cfa_register 7
 427 0006 7860     		str	r0, [r7, #4]
 416:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 417:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   UNUSED(hcan);
 418:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 419:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 420:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             the HAL_CAN_MspInit could be implemented in the user file
 421:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****    */
 422:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 428              		.loc 1 422 0
 429 0008 0C37     		adds	r7, r7, #12
 430              	.LCFI13:
 431              		.cfi_def_cfa_offset 4
 432 000a BD46     		mov	sp, r7
 433              	.LCFI14:
 434              		.cfi_def_cfa_register 13
 435              		@ sp needed
 436 000c 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccm0Y8sw.s 			page 16


 437              	.LCFI15:
 438              		.cfi_restore 7
 439              		.cfi_def_cfa_offset 0
 440 0010 7047     		bx	lr
 441              		.cfi_endproc
 442              	.LFE125:
 444 0012 00BF     		.section	.text.HAL_CAN_MspDeInit,"ax",%progbits
 445              		.align	2
 446              		.weak	HAL_CAN_MspDeInit
 447              		.thumb
 448              		.thumb_func
 450              	HAL_CAN_MspDeInit:
 451              	.LFB126:
 423:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 424:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
 425:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  DeInitializes the CAN MSP.
 426:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 427:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
 428:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval None
 429:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
 430:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** __weak void HAL_CAN_MspDeInit(CAN_HandleTypeDef *hcan)
 431:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 452              		.loc 1 431 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 8
 455              		@ frame_needed = 1, uses_anonymous_args = 0
 456              		@ link register save eliminated.
 457 0000 80B4     		push	{r7}
 458              	.LCFI16:
 459              		.cfi_def_cfa_offset 4
 460              		.cfi_offset 7, -4
 461 0002 83B0     		sub	sp, sp, #12
 462              	.LCFI17:
 463              		.cfi_def_cfa_offset 16
 464 0004 00AF     		add	r7, sp, #0
 465              	.LCFI18:
 466              		.cfi_def_cfa_register 7
 467 0006 7860     		str	r0, [r7, #4]
 432:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
 433:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   UNUSED(hcan);
 434:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 435:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 436:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             the HAL_CAN_MspDeInit could be implemented in the user file
 437:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****    */
 438:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 468              		.loc 1 438 0
 469 0008 0C37     		adds	r7, r7, #12
 470              	.LCFI19:
 471              		.cfi_def_cfa_offset 4
 472 000a BD46     		mov	sp, r7
 473              	.LCFI20:
 474              		.cfi_def_cfa_register 13
 475              		@ sp needed
 476 000c 5DF8047B 		ldr	r7, [sp], #4
 477              	.LCFI21:
 478              		.cfi_restore 7
 479              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccm0Y8sw.s 			page 17


 480 0010 7047     		bx	lr
 481              		.cfi_endproc
 482              	.LFE126:
 484 0012 00BF     		.section	.text.HAL_CAN_ConfigFilter,"ax",%progbits
 485              		.align	2
 486              		.global	HAL_CAN_ConfigFilter
 487              		.thumb
 488              		.thumb_func
 490              	HAL_CAN_ConfigFilter:
 491              	.LFB127:
 439:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 440:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 441:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
 442:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @}
 443:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
 444:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 445:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group2 Configuration functions
 446:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****  *  @brief    Configuration functions.
 447:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****  *
 448:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** @verbatim
 449:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   ==============================================================================
 450:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****               ##### Configuration functions #####
 451:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   ==============================================================================
 452:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     [..]  This section provides functions allowing to:
 453:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_ConfigFilter            : Configure the CAN reception filters
 454:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 455:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** @endverbatim
 456:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @{
 457:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
 458:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 459:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
 460:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Configures the CAN reception filter according to the specified
 461:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         parameters in the CAN_FilterInitStruct.
 462:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 463:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
 464:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
 465:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         contains the filter configuration information.
 466:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval None
 467:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
 468:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
 469:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 492              		.loc 1 469 0
 493              		.cfi_startproc
 494              		@ args = 0, pretend = 0, frame = 24
 495              		@ frame_needed = 1, uses_anonymous_args = 0
 496              		@ link register save eliminated.
 497 0000 80B4     		push	{r7}
 498              	.LCFI22:
 499              		.cfi_def_cfa_offset 4
 500              		.cfi_offset 7, -4
 501 0002 87B0     		sub	sp, sp, #28
 502              	.LCFI23:
 503              		.cfi_def_cfa_offset 32
 504 0004 00AF     		add	r7, sp, #0
 505              	.LCFI24:
 506              		.cfi_def_cfa_register 7
 507 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccm0Y8sw.s 			page 18


 508 0008 3960     		str	r1, [r7]
 470:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   uint32_t filternbrbitpos;
 471:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   CAN_TypeDef *can_ip = hcan->Instance;
 509              		.loc 1 471 0
 510 000a 7B68     		ldr	r3, [r7, #4]
 511 000c 1B68     		ldr	r3, [r3]
 512 000e 7B61     		str	r3, [r7, #20]
 472:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 513              		.loc 1 472 0
 514 0010 7B68     		ldr	r3, [r7, #4]
 515 0012 93F82030 		ldrb	r3, [r3, #32]
 516 0016 FB74     		strb	r3, [r7, #19]
 473:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 474:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 517              		.loc 1 474 0
 518 0018 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 519 001a 012B     		cmp	r3, #1
 520 001c 03D0     		beq	.L27
 521              		.loc 1 474 0 is_stmt 0 discriminator 1
 522 001e FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 523 0020 022B     		cmp	r3, #2
 524 0022 40F0AA80 		bne	.L28
 525              	.L27:
 475:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 476:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 477:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Check the parameters */
 478:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 479:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 480:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 481:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 482:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 483:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 484:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 485:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 486:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 487:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* CAN is single instance with 14 dedicated filters banks */
 488:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 489:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Check the parameters */
 490:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
 491:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 492:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Initialisation mode for the filter */
 493:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 526              		.loc 1 493 0 is_stmt 1
 527 0026 7B69     		ldr	r3, [r7, #20]
 528 0028 D3F80032 		ldr	r3, [r3, #512]
 529 002c 43F00102 		orr	r2, r3, #1
 530 0030 7B69     		ldr	r3, [r7, #20]
 531 0032 C3F80022 		str	r2, [r3, #512]
 494:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 495:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Convert filter number into bit position */
 496:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 532              		.loc 1 496 0
 533 0036 3B68     		ldr	r3, [r7]
 534 0038 5B69     		ldr	r3, [r3, #20]
 535 003a 03F01F03 		and	r3, r3, #31
 536 003e 0122     		movs	r2, #1
 537 0040 02FA03F3 		lsl	r3, r2, r3
ARM GAS  /tmp/ccm0Y8sw.s 			page 19


 538 0044 FB60     		str	r3, [r7, #12]
 497:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 498:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Filter Deactivation */
 499:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 539              		.loc 1 499 0
 540 0046 7B69     		ldr	r3, [r7, #20]
 541 0048 D3F81C22 		ldr	r2, [r3, #540]
 542 004c FB68     		ldr	r3, [r7, #12]
 543 004e DB43     		mvns	r3, r3
 544 0050 1A40     		ands	r2, r2, r3
 545 0052 7B69     		ldr	r3, [r7, #20]
 546 0054 C3F81C22 		str	r2, [r3, #540]
 500:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 501:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Filter Scale */
 502:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 547              		.loc 1 502 0
 548 0058 3B68     		ldr	r3, [r7]
 549 005a DB69     		ldr	r3, [r3, #28]
 550 005c 002B     		cmp	r3, #0
 551 005e 23D1     		bne	.L29
 503:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
 504:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* 16-bit scale for the filter */
 505:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 552              		.loc 1 505 0
 553 0060 7B69     		ldr	r3, [r7, #20]
 554 0062 D3F80C22 		ldr	r2, [r3, #524]
 555 0066 FB68     		ldr	r3, [r7, #12]
 556 0068 DB43     		mvns	r3, r3
 557 006a 1A40     		ands	r2, r2, r3
 558 006c 7B69     		ldr	r3, [r7, #20]
 559 006e C3F80C22 		str	r2, [r3, #524]
 506:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 507:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* First 16-bit identifier and First 16-bit mask */
 508:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Or First 16-bit identifier and Second 16-bit identifier */
 509:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 560              		.loc 1 509 0
 561 0072 3B68     		ldr	r3, [r7]
 562 0074 5A69     		ldr	r2, [r3, #20]
 510:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 563              		.loc 1 510 0
 564 0076 3B68     		ldr	r3, [r7]
 565 0078 DB68     		ldr	r3, [r3, #12]
 566 007a 1904     		lsls	r1, r3, #16
 511:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 567              		.loc 1 511 0
 568 007c 3B68     		ldr	r3, [r7]
 569 007e 5B68     		ldr	r3, [r3, #4]
 570 0080 9BB2     		uxth	r3, r3
 510:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 571              		.loc 1 510 0
 572 0082 1943     		orrs	r1, r1, r3
 509:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 573              		.loc 1 509 0
 574 0084 7B69     		ldr	r3, [r7, #20]
 575 0086 4832     		adds	r2, r2, #72
 576 0088 43F83210 		str	r1, [r3, r2, lsl #3]
 512:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
ARM GAS  /tmp/ccm0Y8sw.s 			page 20


 513:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Second 16-bit identifier and Second 16-bit mask */
 514:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Or Third 16-bit identifier and Fourth 16-bit identifier */
 515:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 577              		.loc 1 515 0
 578 008c 3B68     		ldr	r3, [r7]
 579 008e 5B69     		ldr	r3, [r3, #20]
 516:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 580              		.loc 1 516 0
 581 0090 3A68     		ldr	r2, [r7]
 582 0092 9268     		ldr	r2, [r2, #8]
 583 0094 1104     		lsls	r1, r2, #16
 517:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 584              		.loc 1 517 0
 585 0096 3A68     		ldr	r2, [r7]
 586 0098 1268     		ldr	r2, [r2]
 587 009a 92B2     		uxth	r2, r2
 516:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 588              		.loc 1 516 0
 589 009c 0A43     		orrs	r2, r2, r1
 515:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 590              		.loc 1 515 0
 591 009e 7969     		ldr	r1, [r7, #20]
 592 00a0 4833     		adds	r3, r3, #72
 593 00a2 DB00     		lsls	r3, r3, #3
 594 00a4 0B44     		add	r3, r3, r1
 595 00a6 5A60     		str	r2, [r3, #4]
 596              	.L29:
 518:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
 519:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 520:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 597              		.loc 1 520 0
 598 00a8 3B68     		ldr	r3, [r7]
 599 00aa DB69     		ldr	r3, [r3, #28]
 600 00ac 012B     		cmp	r3, #1
 601 00ae 22D1     		bne	.L30
 521:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
 522:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* 32-bit scale for the filter */
 523:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       SET_BIT(can_ip->FS1R, filternbrbitpos);
 602              		.loc 1 523 0
 603 00b0 7B69     		ldr	r3, [r7, #20]
 604 00b2 D3F80C22 		ldr	r2, [r3, #524]
 605 00b6 FB68     		ldr	r3, [r7, #12]
 606 00b8 1A43     		orrs	r2, r2, r3
 607 00ba 7B69     		ldr	r3, [r7, #20]
 608 00bc C3F80C22 		str	r2, [r3, #524]
 524:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 525:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* 32-bit identifier or First 32-bit identifier */
 526:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 609              		.loc 1 526 0
 610 00c0 3B68     		ldr	r3, [r7]
 611 00c2 5A69     		ldr	r2, [r3, #20]
 527:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 612              		.loc 1 527 0
 613 00c4 3B68     		ldr	r3, [r7]
 614 00c6 1B68     		ldr	r3, [r3]
 615 00c8 1904     		lsls	r1, r3, #16
 528:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
ARM GAS  /tmp/ccm0Y8sw.s 			page 21


 616              		.loc 1 528 0
 617 00ca 3B68     		ldr	r3, [r7]
 618 00cc 5B68     		ldr	r3, [r3, #4]
 619 00ce 9BB2     		uxth	r3, r3
 527:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 620              		.loc 1 527 0
 621 00d0 1943     		orrs	r1, r1, r3
 526:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 622              		.loc 1 526 0
 623 00d2 7B69     		ldr	r3, [r7, #20]
 624 00d4 4832     		adds	r2, r2, #72
 625 00d6 43F83210 		str	r1, [r3, r2, lsl #3]
 529:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 530:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* 32-bit mask or Second 32-bit identifier */
 531:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 626              		.loc 1 531 0
 627 00da 3B68     		ldr	r3, [r7]
 628 00dc 5B69     		ldr	r3, [r3, #20]
 532:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 629              		.loc 1 532 0
 630 00de 3A68     		ldr	r2, [r7]
 631 00e0 9268     		ldr	r2, [r2, #8]
 632 00e2 1104     		lsls	r1, r2, #16
 533:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 633              		.loc 1 533 0
 634 00e4 3A68     		ldr	r2, [r7]
 635 00e6 D268     		ldr	r2, [r2, #12]
 636 00e8 92B2     		uxth	r2, r2
 532:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 637              		.loc 1 532 0
 638 00ea 0A43     		orrs	r2, r2, r1
 531:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 639              		.loc 1 531 0
 640 00ec 7969     		ldr	r1, [r7, #20]
 641 00ee 4833     		adds	r3, r3, #72
 642 00f0 DB00     		lsls	r3, r3, #3
 643 00f2 0B44     		add	r3, r3, r1
 644 00f4 5A60     		str	r2, [r3, #4]
 645              	.L30:
 534:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
 535:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 536:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Filter Mode */
 537:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 646              		.loc 1 537 0
 647 00f6 3B68     		ldr	r3, [r7]
 648 00f8 9B69     		ldr	r3, [r3, #24]
 649 00fa 002B     		cmp	r3, #0
 650 00fc 09D1     		bne	.L31
 538:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
 539:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Id/Mask mode for the filter*/
 540:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 651              		.loc 1 540 0
 652 00fe 7B69     		ldr	r3, [r7, #20]
 653 0100 D3F80422 		ldr	r2, [r3, #516]
 654 0104 FB68     		ldr	r3, [r7, #12]
 655 0106 DB43     		mvns	r3, r3
 656 0108 1A40     		ands	r2, r2, r3
ARM GAS  /tmp/ccm0Y8sw.s 			page 22


 657 010a 7B69     		ldr	r3, [r7, #20]
 658 010c C3F80422 		str	r2, [r3, #516]
 659 0110 07E0     		b	.L32
 660              	.L31:
 541:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
 542:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
 543:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
 544:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Identifier list mode for the filter*/
 545:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       SET_BIT(can_ip->FM1R, filternbrbitpos);
 661              		.loc 1 545 0
 662 0112 7B69     		ldr	r3, [r7, #20]
 663 0114 D3F80422 		ldr	r2, [r3, #516]
 664 0118 FB68     		ldr	r3, [r7, #12]
 665 011a 1A43     		orrs	r2, r2, r3
 666 011c 7B69     		ldr	r3, [r7, #20]
 667 011e C3F80422 		str	r2, [r3, #516]
 668              	.L32:
 546:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
 547:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 548:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Filter FIFO assignment */
 549:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 669              		.loc 1 549 0
 670 0122 3B68     		ldr	r3, [r7]
 671 0124 1B69     		ldr	r3, [r3, #16]
 672 0126 002B     		cmp	r3, #0
 673 0128 09D1     		bne	.L33
 550:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
 551:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* FIFO 0 assignation for the filter */
 552:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 674              		.loc 1 552 0
 675 012a 7B69     		ldr	r3, [r7, #20]
 676 012c D3F81422 		ldr	r2, [r3, #532]
 677 0130 FB68     		ldr	r3, [r7, #12]
 678 0132 DB43     		mvns	r3, r3
 679 0134 1A40     		ands	r2, r2, r3
 680 0136 7B69     		ldr	r3, [r7, #20]
 681 0138 C3F81422 		str	r2, [r3, #532]
 682 013c 07E0     		b	.L34
 683              	.L33:
 553:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
 554:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     else
 555:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
 556:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* FIFO 1 assignation for the filter */
 557:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       SET_BIT(can_ip->FFA1R, filternbrbitpos);
 684              		.loc 1 557 0
 685 013e 7B69     		ldr	r3, [r7, #20]
 686 0140 D3F81422 		ldr	r2, [r3, #532]
 687 0144 FB68     		ldr	r3, [r7, #12]
 688 0146 1A43     		orrs	r2, r2, r3
 689 0148 7B69     		ldr	r3, [r7, #20]
 690 014a C3F81422 		str	r2, [r3, #532]
 691              	.L34:
 558:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
 559:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 560:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Filter activation */
 561:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 692              		.loc 1 561 0
ARM GAS  /tmp/ccm0Y8sw.s 			page 23


 693 014e 3B68     		ldr	r3, [r7]
 694 0150 1B6A     		ldr	r3, [r3, #32]
 695 0152 012B     		cmp	r3, #1
 696 0154 07D1     		bne	.L35
 562:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
 563:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       SET_BIT(can_ip->FA1R, filternbrbitpos);
 697              		.loc 1 563 0
 698 0156 7B69     		ldr	r3, [r7, #20]
 699 0158 D3F81C22 		ldr	r2, [r3, #540]
 700 015c FB68     		ldr	r3, [r7, #12]
 701 015e 1A43     		orrs	r2, r2, r3
 702 0160 7B69     		ldr	r3, [r7, #20]
 703 0162 C3F81C22 		str	r2, [r3, #540]
 704              	.L35:
 564:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
 565:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 566:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Leave the initialisation mode for the filter */
 567:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 705              		.loc 1 567 0
 706 0166 7B69     		ldr	r3, [r7, #20]
 707 0168 D3F80032 		ldr	r3, [r3, #512]
 708 016c 23F00102 		bic	r2, r3, #1
 709 0170 7B69     		ldr	r3, [r7, #20]
 710 0172 C3F80022 		str	r2, [r3, #512]
 568:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 569:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Return function status */
 570:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     return HAL_OK;
 711              		.loc 1 570 0
 712 0176 0023     		movs	r3, #0
 713 0178 06E0     		b	.L36
 714              	.L28:
 571:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 572:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   else
 573:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 574:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Update error code */
 575:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 715              		.loc 1 575 0
 716 017a 7B68     		ldr	r3, [r7, #4]
 717 017c 5B6A     		ldr	r3, [r3, #36]
 718 017e 43F48022 		orr	r2, r3, #262144
 719 0182 7B68     		ldr	r3, [r7, #4]
 720 0184 5A62     		str	r2, [r3, #36]
 576:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 577:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     return HAL_ERROR;
 721              		.loc 1 577 0
 722 0186 0123     		movs	r3, #1
 723              	.L36:
 578:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 579:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 724              		.loc 1 579 0
 725 0188 1846     		mov	r0, r3
 726 018a 1C37     		adds	r7, r7, #28
 727              	.LCFI25:
 728              		.cfi_def_cfa_offset 4
 729 018c BD46     		mov	sp, r7
 730              	.LCFI26:
 731              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccm0Y8sw.s 			page 24


 732              		@ sp needed
 733 018e 5DF8047B 		ldr	r7, [sp], #4
 734              	.LCFI27:
 735              		.cfi_restore 7
 736              		.cfi_def_cfa_offset 0
 737 0192 7047     		bx	lr
 738              		.cfi_endproc
 739              	.LFE127:
 741              		.section	.text.HAL_CAN_Start,"ax",%progbits
 742              		.align	2
 743              		.global	HAL_CAN_Start
 744              		.thumb
 745              		.thumb_func
 747              	HAL_CAN_Start:
 748              	.LFB128:
 580:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 581:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
 582:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @}
 583:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
 584:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 585:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group3 Control functions
 586:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****  *  @brief    Control functions
 587:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****  *
 588:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** @verbatim
 589:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   ==============================================================================
 590:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                       ##### Control functions #####
 591:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   ==============================================================================
 592:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     [..]  This section provides functions allowing to:
 593:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_Start                    : Start the CAN module
 594:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_Stop                     : Stop the CAN module
 595:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_RequestSleep             : Request sleep mode entry.
 596:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_WakeUp                   : Wake up from sleep mode.
 597:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_IsSleepActive            : Check is sleep mode is active.
 598:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_AddTxMessage             : Add a message to the Tx mailboxes
 599:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                                              and activate the corresponding
 600:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                                              transmission request
 601:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_AbortTxRequest           : Abort transmission request
 602:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_GetTxMailboxesFreeLevel  : Return Tx mailboxes free level
 603:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_IsTxMessagePending       : Check if a transmission request is
 604:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                                              pending on the selected Tx mailbox
 605:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_GetRxMessage             : Get a CAN frame from the Rx FIFO
 606:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_GetRxFifoFillLevel       : Return Rx FIFO fill level
 607:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 608:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** @endverbatim
 609:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @{
 610:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
 611:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 612:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
 613:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Start the CAN module.
 614:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 615:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
 616:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval HAL status
 617:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
 618:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
 619:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 749              		.loc 1 619 0
 750              		.cfi_startproc
ARM GAS  /tmp/ccm0Y8sw.s 			page 25


 751              		@ args = 0, pretend = 0, frame = 16
 752              		@ frame_needed = 1, uses_anonymous_args = 0
 753 0000 80B5     		push	{r7, lr}
 754              	.LCFI28:
 755              		.cfi_def_cfa_offset 8
 756              		.cfi_offset 7, -8
 757              		.cfi_offset 14, -4
 758 0002 84B0     		sub	sp, sp, #16
 759              	.LCFI29:
 760              		.cfi_def_cfa_offset 24
 761 0004 00AF     		add	r7, sp, #0
 762              	.LCFI30:
 763              		.cfi_def_cfa_register 7
 764 0006 7860     		str	r0, [r7, #4]
 620:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   uint32_t tickstart;
 621:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 622:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_READY)
 765              		.loc 1 622 0
 766 0008 7B68     		ldr	r3, [r7, #4]
 767 000a 93F82030 		ldrb	r3, [r3, #32]
 768 000e DBB2     		uxtb	r3, r3
 769 0010 012B     		cmp	r3, #1
 770 0012 2ED1     		bne	.L38
 623:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 624:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Change CAN peripheral state */
 625:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_LISTENING;
 771              		.loc 1 625 0
 772 0014 7B68     		ldr	r3, [r7, #4]
 773 0016 0222     		movs	r2, #2
 774 0018 83F82020 		strb	r2, [r3, #32]
 626:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 627:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Request leave initialisation */
 628:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 775              		.loc 1 628 0
 776 001c 7B68     		ldr	r3, [r7, #4]
 777 001e 1B68     		ldr	r3, [r3]
 778 0020 7A68     		ldr	r2, [r7, #4]
 779 0022 1268     		ldr	r2, [r2]
 780 0024 1268     		ldr	r2, [r2]
 781 0026 22F00102 		bic	r2, r2, #1
 782 002a 1A60     		str	r2, [r3]
 629:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 630:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Get tick */
 631:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     tickstart = HAL_GetTick();
 783              		.loc 1 631 0
 784 002c FFF7FEFF 		bl	HAL_GetTick
 785 0030 F860     		str	r0, [r7, #12]
 632:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 633:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Wait the acknowledge */
 634:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 786              		.loc 1 634 0
 787 0032 12E0     		b	.L39
 788              	.L41:
 635:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
 636:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Check for the Timeout */
 637:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 789              		.loc 1 637 0
ARM GAS  /tmp/ccm0Y8sw.s 			page 26


 790 0034 FFF7FEFF 		bl	HAL_GetTick
 791 0038 0246     		mov	r2, r0
 792 003a FB68     		ldr	r3, [r7, #12]
 793 003c D31A     		subs	r3, r2, r3
 794 003e 0A2B     		cmp	r3, #10
 795 0040 0BD9     		bls	.L39
 638:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       {
 639:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         /* Update error code */
 640:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 796              		.loc 1 640 0
 797 0042 7B68     		ldr	r3, [r7, #4]
 798 0044 5B6A     		ldr	r3, [r3, #36]
 799 0046 43F40032 		orr	r2, r3, #131072
 800 004a 7B68     		ldr	r3, [r7, #4]
 801 004c 5A62     		str	r2, [r3, #36]
 641:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 642:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         /* Change CAN state */
 643:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
 802              		.loc 1 643 0
 803 004e 7B68     		ldr	r3, [r7, #4]
 804 0050 0522     		movs	r2, #5
 805 0052 83F82020 		strb	r2, [r3, #32]
 644:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 645:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         return HAL_ERROR;
 806              		.loc 1 645 0
 807 0056 0123     		movs	r3, #1
 808 0058 12E0     		b	.L40
 809              	.L39:
 634:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
 810              		.loc 1 634 0
 811 005a 7B68     		ldr	r3, [r7, #4]
 812 005c 1B68     		ldr	r3, [r3]
 813 005e 5B68     		ldr	r3, [r3, #4]
 814 0060 03F00103 		and	r3, r3, #1
 815 0064 002B     		cmp	r3, #0
 816 0066 E5D1     		bne	.L41
 646:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       }
 647:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
 648:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 649:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Reset the CAN ErrorCode */
 650:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 817              		.loc 1 650 0
 818 0068 7B68     		ldr	r3, [r7, #4]
 819 006a 0022     		movs	r2, #0
 820 006c 5A62     		str	r2, [r3, #36]
 651:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 652:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Return function status */
 653:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     return HAL_OK;
 821              		.loc 1 653 0
 822 006e 0023     		movs	r3, #0
 823 0070 06E0     		b	.L40
 824              	.L38:
 654:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 655:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   else
 656:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 657:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Update error code */
 658:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
ARM GAS  /tmp/ccm0Y8sw.s 			page 27


 825              		.loc 1 658 0
 826 0072 7B68     		ldr	r3, [r7, #4]
 827 0074 5B6A     		ldr	r3, [r3, #36]
 828 0076 43F40022 		orr	r2, r3, #524288
 829 007a 7B68     		ldr	r3, [r7, #4]
 830 007c 5A62     		str	r2, [r3, #36]
 659:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 660:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     return HAL_ERROR;
 831              		.loc 1 660 0
 832 007e 0123     		movs	r3, #1
 833              	.L40:
 661:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 662:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 834              		.loc 1 662 0
 835 0080 1846     		mov	r0, r3
 836 0082 1037     		adds	r7, r7, #16
 837              	.LCFI31:
 838              		.cfi_def_cfa_offset 8
 839 0084 BD46     		mov	sp, r7
 840              	.LCFI32:
 841              		.cfi_def_cfa_register 13
 842              		@ sp needed
 843 0086 80BD     		pop	{r7, pc}
 844              		.cfi_endproc
 845              	.LFE128:
 847              		.section	.text.HAL_CAN_Stop,"ax",%progbits
 848              		.align	2
 849              		.global	HAL_CAN_Stop
 850              		.thumb
 851              		.thumb_func
 853              	HAL_CAN_Stop:
 854              	.LFB129:
 663:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 664:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
 665:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Stop the CAN module and enable access to configuration registers.
 666:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 667:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
 668:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval HAL status
 669:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
 670:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
 671:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 855              		.loc 1 671 0
 856              		.cfi_startproc
 857              		@ args = 0, pretend = 0, frame = 16
 858              		@ frame_needed = 1, uses_anonymous_args = 0
 859 0000 80B5     		push	{r7, lr}
 860              	.LCFI33:
 861              		.cfi_def_cfa_offset 8
 862              		.cfi_offset 7, -8
 863              		.cfi_offset 14, -4
 864 0002 84B0     		sub	sp, sp, #16
 865              	.LCFI34:
 866              		.cfi_def_cfa_offset 24
 867 0004 00AF     		add	r7, sp, #0
 868              	.LCFI35:
 869              		.cfi_def_cfa_register 7
 870 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccm0Y8sw.s 			page 28


 672:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   uint32_t tickstart;
 673:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 674:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if (hcan->State == HAL_CAN_STATE_LISTENING)
 871              		.loc 1 674 0
 872 0008 7B68     		ldr	r3, [r7, #4]
 873 000a 93F82030 		ldrb	r3, [r3, #32]
 874 000e DBB2     		uxtb	r3, r3
 875 0010 022B     		cmp	r3, #2
 876 0012 33D1     		bne	.L43
 675:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 676:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Request initialisation */
 677:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 877              		.loc 1 677 0
 878 0014 7B68     		ldr	r3, [r7, #4]
 879 0016 1B68     		ldr	r3, [r3]
 880 0018 7A68     		ldr	r2, [r7, #4]
 881 001a 1268     		ldr	r2, [r2]
 882 001c 1268     		ldr	r2, [r2]
 883 001e 42F00102 		orr	r2, r2, #1
 884 0022 1A60     		str	r2, [r3]
 678:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 679:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Get tick */
 680:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     tickstart = HAL_GetTick();
 885              		.loc 1 680 0
 886 0024 FFF7FEFF 		bl	HAL_GetTick
 887 0028 F860     		str	r0, [r7, #12]
 681:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 682:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Wait the acknowledge */
 683:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 888              		.loc 1 683 0
 889 002a 12E0     		b	.L44
 890              	.L46:
 684:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
 685:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Check for the Timeout */
 686:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 891              		.loc 1 686 0
 892 002c FFF7FEFF 		bl	HAL_GetTick
 893 0030 0246     		mov	r2, r0
 894 0032 FB68     		ldr	r3, [r7, #12]
 895 0034 D31A     		subs	r3, r2, r3
 896 0036 0A2B     		cmp	r3, #10
 897 0038 0BD9     		bls	.L44
 687:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       {
 688:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         /* Update error code */
 689:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 898              		.loc 1 689 0
 899 003a 7B68     		ldr	r3, [r7, #4]
 900 003c 5B6A     		ldr	r3, [r3, #36]
 901 003e 43F40032 		orr	r2, r3, #131072
 902 0042 7B68     		ldr	r3, [r7, #4]
 903 0044 5A62     		str	r2, [r3, #36]
 690:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 691:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         /* Change CAN state */
 692:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         hcan->State = HAL_CAN_STATE_ERROR;
 904              		.loc 1 692 0
 905 0046 7B68     		ldr	r3, [r7, #4]
 906 0048 0522     		movs	r2, #5
ARM GAS  /tmp/ccm0Y8sw.s 			page 29


 907 004a 83F82020 		strb	r2, [r3, #32]
 693:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 694:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         return HAL_ERROR;
 908              		.loc 1 694 0
 909 004e 0123     		movs	r3, #1
 910 0050 1BE0     		b	.L45
 911              	.L44:
 683:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
 912              		.loc 1 683 0
 913 0052 7B68     		ldr	r3, [r7, #4]
 914 0054 1B68     		ldr	r3, [r3]
 915 0056 5B68     		ldr	r3, [r3, #4]
 916 0058 03F00103 		and	r3, r3, #1
 917 005c 002B     		cmp	r3, #0
 918 005e E5D0     		beq	.L46
 695:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       }
 696:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
 697:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 698:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Exit from sleep mode */
 699:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 919              		.loc 1 699 0
 920 0060 7B68     		ldr	r3, [r7, #4]
 921 0062 1B68     		ldr	r3, [r3]
 922 0064 7A68     		ldr	r2, [r7, #4]
 923 0066 1268     		ldr	r2, [r2]
 924 0068 1268     		ldr	r2, [r2]
 925 006a 22F00202 		bic	r2, r2, #2
 926 006e 1A60     		str	r2, [r3]
 700:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 701:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Change CAN peripheral state */
 702:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     hcan->State = HAL_CAN_STATE_READY;
 927              		.loc 1 702 0
 928 0070 7B68     		ldr	r3, [r7, #4]
 929 0072 0122     		movs	r2, #1
 930 0074 83F82020 		strb	r2, [r3, #32]
 703:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 704:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Return function status */
 705:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     return HAL_OK;
 931              		.loc 1 705 0
 932 0078 0023     		movs	r3, #0
 933 007a 06E0     		b	.L45
 934              	.L43:
 706:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 707:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   else
 708:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 709:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Update error code */
 710:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 935              		.loc 1 710 0
 936 007c 7B68     		ldr	r3, [r7, #4]
 937 007e 5B6A     		ldr	r3, [r3, #36]
 938 0080 43F48012 		orr	r2, r3, #1048576
 939 0084 7B68     		ldr	r3, [r7, #4]
 940 0086 5A62     		str	r2, [r3, #36]
 711:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 712:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     return HAL_ERROR;
 941              		.loc 1 712 0
 942 0088 0123     		movs	r3, #1
ARM GAS  /tmp/ccm0Y8sw.s 			page 30


 943              	.L45:
 713:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 714:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 944              		.loc 1 714 0
 945 008a 1846     		mov	r0, r3
 946 008c 1037     		adds	r7, r7, #16
 947              	.LCFI36:
 948              		.cfi_def_cfa_offset 8
 949 008e BD46     		mov	sp, r7
 950              	.LCFI37:
 951              		.cfi_def_cfa_register 13
 952              		@ sp needed
 953 0090 80BD     		pop	{r7, pc}
 954              		.cfi_endproc
 955              	.LFE129:
 957 0092 00BF     		.section	.text.HAL_CAN_RequestSleep,"ax",%progbits
 958              		.align	2
 959              		.global	HAL_CAN_RequestSleep
 960              		.thumb
 961              		.thumb_func
 963              	HAL_CAN_RequestSleep:
 964              	.LFB130:
 715:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 716:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
 717:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Request the sleep mode (low power) entry.
 718:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         When returning from this function, Sleep mode will be entered
 719:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         as soon as the current CAN activity (transmission or reception
 720:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         of a CAN frame) has been completed.
 721:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 722:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
 723:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval HAL status.
 724:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
 725:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_RequestSleep(CAN_HandleTypeDef *hcan)
 726:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 965              		.loc 1 726 0
 966              		.cfi_startproc
 967              		@ args = 0, pretend = 0, frame = 16
 968              		@ frame_needed = 1, uses_anonymous_args = 0
 969              		@ link register save eliminated.
 970 0000 80B4     		push	{r7}
 971              	.LCFI38:
 972              		.cfi_def_cfa_offset 4
 973              		.cfi_offset 7, -4
 974 0002 85B0     		sub	sp, sp, #20
 975              	.LCFI39:
 976              		.cfi_def_cfa_offset 24
 977 0004 00AF     		add	r7, sp, #0
 978              	.LCFI40:
 979              		.cfi_def_cfa_register 7
 980 0006 7860     		str	r0, [r7, #4]
 727:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 981              		.loc 1 727 0
 982 0008 7B68     		ldr	r3, [r7, #4]
 983 000a 93F82030 		ldrb	r3, [r3, #32]
 984 000e FB73     		strb	r3, [r7, #15]
 728:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 729:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
ARM GAS  /tmp/ccm0Y8sw.s 			page 31


 985              		.loc 1 729 0
 986 0010 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 987 0012 012B     		cmp	r3, #1
 988 0014 02D0     		beq	.L48
 989              		.loc 1 729 0 is_stmt 0 discriminator 1
 990 0016 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 991 0018 022B     		cmp	r3, #2
 992 001a 09D1     		bne	.L49
 993              	.L48:
 730:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 731:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 732:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Request Sleep mode */
 733:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     SET_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 994              		.loc 1 733 0 is_stmt 1
 995 001c 7B68     		ldr	r3, [r7, #4]
 996 001e 1B68     		ldr	r3, [r3]
 997 0020 7A68     		ldr	r2, [r7, #4]
 998 0022 1268     		ldr	r2, [r2]
 999 0024 1268     		ldr	r2, [r2]
 1000 0026 42F00202 		orr	r2, r2, #2
 1001 002a 1A60     		str	r2, [r3]
 734:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 735:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Return function status */
 736:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     return HAL_OK;
 1002              		.loc 1 736 0
 1003 002c 0023     		movs	r3, #0
 1004 002e 06E0     		b	.L50
 1005              	.L49:
 737:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 738:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   else
 739:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 740:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Update error code */
 741:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1006              		.loc 1 741 0
 1007 0030 7B68     		ldr	r3, [r7, #4]
 1008 0032 5B6A     		ldr	r3, [r3, #36]
 1009 0034 43F48022 		orr	r2, r3, #262144
 1010 0038 7B68     		ldr	r3, [r7, #4]
 1011 003a 5A62     		str	r2, [r3, #36]
 742:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 743:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Return function status */
 744:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     return HAL_ERROR;
 1012              		.loc 1 744 0
 1013 003c 0123     		movs	r3, #1
 1014              	.L50:
 745:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 746:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 1015              		.loc 1 746 0
 1016 003e 1846     		mov	r0, r3
 1017 0040 1437     		adds	r7, r7, #20
 1018              	.LCFI41:
 1019              		.cfi_def_cfa_offset 4
 1020 0042 BD46     		mov	sp, r7
 1021              	.LCFI42:
 1022              		.cfi_def_cfa_register 13
 1023              		@ sp needed
 1024 0044 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccm0Y8sw.s 			page 32


 1025              	.LCFI43:
 1026              		.cfi_restore 7
 1027              		.cfi_def_cfa_offset 0
 1028 0048 7047     		bx	lr
 1029              		.cfi_endproc
 1030              	.LFE130:
 1032 004a 00BF     		.section	.text.HAL_CAN_WakeUp,"ax",%progbits
 1033              		.align	2
 1034              		.global	HAL_CAN_WakeUp
 1035              		.thumb
 1036              		.thumb_func
 1038              	HAL_CAN_WakeUp:
 1039              	.LFB131:
 747:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 748:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
 749:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Wake up from sleep mode.
 750:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         When returning with HAL_OK status from this function, Sleep mode
 751:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         is exited.
 752:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 753:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
 754:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval HAL status.
 755:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
 756:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
 757:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 1040              		.loc 1 757 0
 1041              		.cfi_startproc
 1042              		@ args = 0, pretend = 0, frame = 24
 1043              		@ frame_needed = 1, uses_anonymous_args = 0
 1044              		@ link register save eliminated.
 1045 0000 80B4     		push	{r7}
 1046              	.LCFI44:
 1047              		.cfi_def_cfa_offset 4
 1048              		.cfi_offset 7, -4
 1049 0002 87B0     		sub	sp, sp, #28
 1050              	.LCFI45:
 1051              		.cfi_def_cfa_offset 32
 1052 0004 00AF     		add	r7, sp, #0
 1053              	.LCFI46:
 1054              		.cfi_def_cfa_register 7
 1055 0006 7860     		str	r0, [r7, #4]
 758:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   __IO uint32_t count = 0;
 1056              		.loc 1 758 0
 1057 0008 0023     		movs	r3, #0
 1058 000a FB60     		str	r3, [r7, #12]
 759:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   uint32_t timeout = 1000000U;
 1059              		.loc 1 759 0
 1060 000c 1C4B     		ldr	r3, .L57
 1061 000e 7B61     		str	r3, [r7, #20]
 760:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1062              		.loc 1 760 0
 1063 0010 7B68     		ldr	r3, [r7, #4]
 1064 0012 93F82030 		ldrb	r3, [r3, #32]
 1065 0016 FB74     		strb	r3, [r7, #19]
 761:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 762:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1066              		.loc 1 762 0
 1067 0018 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
ARM GAS  /tmp/ccm0Y8sw.s 			page 33


 1068 001a 012B     		cmp	r3, #1
 1069 001c 02D0     		beq	.L52
 1070              		.loc 1 762 0 is_stmt 0 discriminator 1
 1071 001e FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1072 0020 022B     		cmp	r3, #2
 1073 0022 1FD1     		bne	.L53
 1074              	.L52:
 763:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 764:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 765:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Wake up request */
 766:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 1075              		.loc 1 766 0 is_stmt 1
 1076 0024 7B68     		ldr	r3, [r7, #4]
 1077 0026 1B68     		ldr	r3, [r3]
 1078 0028 7A68     		ldr	r2, [r7, #4]
 1079 002a 1268     		ldr	r2, [r2]
 1080 002c 1268     		ldr	r2, [r2]
 1081 002e 22F00202 		bic	r2, r2, #2
 1082 0032 1A60     		str	r2, [r3]
 1083              	.L56:
 767:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 768:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Wait sleep mode is exited */
 769:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     do
 770:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
 771:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Increment counter */
 772:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       count++;
 1084              		.loc 1 772 0
 1085 0034 FB68     		ldr	r3, [r7, #12]
 1086 0036 0133     		adds	r3, r3, #1
 1087 0038 FB60     		str	r3, [r7, #12]
 773:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 774:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Check if timeout is reached */
 775:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       if (count > timeout)
 1088              		.loc 1 775 0
 1089 003a FA68     		ldr	r2, [r7, #12]
 1090 003c 7B69     		ldr	r3, [r7, #20]
 1091 003e 9A42     		cmp	r2, r3
 1092 0040 07D9     		bls	.L54
 776:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       {
 777:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         /* Update error code */
 778:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 1093              		.loc 1 778 0
 1094 0042 7B68     		ldr	r3, [r7, #4]
 1095 0044 5B6A     		ldr	r3, [r3, #36]
 1096 0046 43F40032 		orr	r2, r3, #131072
 1097 004a 7B68     		ldr	r3, [r7, #4]
 1098 004c 5A62     		str	r2, [r3, #36]
 779:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 780:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         return HAL_ERROR;
 1099              		.loc 1 780 0
 1100 004e 0123     		movs	r3, #1
 1101 0050 0FE0     		b	.L55
 1102              	.L54:
 781:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       }
 782:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
 783:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U);
 1103              		.loc 1 783 0
ARM GAS  /tmp/ccm0Y8sw.s 			page 34


 1104 0052 7B68     		ldr	r3, [r7, #4]
 1105 0054 1B68     		ldr	r3, [r3]
 1106 0056 5B68     		ldr	r3, [r3, #4]
 1107 0058 03F00203 		and	r3, r3, #2
 1108 005c 002B     		cmp	r3, #0
 1109 005e E9D1     		bne	.L56
 784:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 785:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Return function status */
 786:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     return HAL_OK;
 1110              		.loc 1 786 0
 1111 0060 0023     		movs	r3, #0
 1112 0062 06E0     		b	.L55
 1113              	.L53:
 787:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 788:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   else
 789:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 790:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Update error code */
 791:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1114              		.loc 1 791 0
 1115 0064 7B68     		ldr	r3, [r7, #4]
 1116 0066 5B6A     		ldr	r3, [r3, #36]
 1117 0068 43F48022 		orr	r2, r3, #262144
 1118 006c 7B68     		ldr	r3, [r7, #4]
 1119 006e 5A62     		str	r2, [r3, #36]
 792:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 793:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     return HAL_ERROR;
 1120              		.loc 1 793 0
 1121 0070 0123     		movs	r3, #1
 1122              	.L55:
 794:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 795:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 1123              		.loc 1 795 0
 1124 0072 1846     		mov	r0, r3
 1125 0074 1C37     		adds	r7, r7, #28
 1126              	.LCFI47:
 1127              		.cfi_def_cfa_offset 4
 1128 0076 BD46     		mov	sp, r7
 1129              	.LCFI48:
 1130              		.cfi_def_cfa_register 13
 1131              		@ sp needed
 1132 0078 5DF8047B 		ldr	r7, [sp], #4
 1133              	.LCFI49:
 1134              		.cfi_restore 7
 1135              		.cfi_def_cfa_offset 0
 1136 007c 7047     		bx	lr
 1137              	.L58:
 1138 007e 00BF     		.align	2
 1139              	.L57:
 1140 0080 40420F00 		.word	1000000
 1141              		.cfi_endproc
 1142              	.LFE131:
 1144              		.section	.text.HAL_CAN_IsSleepActive,"ax",%progbits
 1145              		.align	2
 1146              		.global	HAL_CAN_IsSleepActive
 1147              		.thumb
 1148              		.thumb_func
 1150              	HAL_CAN_IsSleepActive:
ARM GAS  /tmp/ccm0Y8sw.s 			page 35


 1151              	.LFB132:
 796:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 797:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
 798:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Check is sleep mode is active.
 799:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 800:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
 801:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval Status
 802:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *          - 0 : Sleep mode is not active.
 803:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *          - 1 : Sleep mode is active.
 804:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
 805:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** uint32_t HAL_CAN_IsSleepActive(CAN_HandleTypeDef *hcan)
 806:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 1152              		.loc 1 806 0
 1153              		.cfi_startproc
 1154              		@ args = 0, pretend = 0, frame = 16
 1155              		@ frame_needed = 1, uses_anonymous_args = 0
 1156              		@ link register save eliminated.
 1157 0000 80B4     		push	{r7}
 1158              	.LCFI50:
 1159              		.cfi_def_cfa_offset 4
 1160              		.cfi_offset 7, -4
 1161 0002 85B0     		sub	sp, sp, #20
 1162              	.LCFI51:
 1163              		.cfi_def_cfa_offset 24
 1164 0004 00AF     		add	r7, sp, #0
 1165              	.LCFI52:
 1166              		.cfi_def_cfa_register 7
 1167 0006 7860     		str	r0, [r7, #4]
 807:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   uint32_t status = 0U;
 1168              		.loc 1 807 0
 1169 0008 0023     		movs	r3, #0
 1170 000a FB60     		str	r3, [r7, #12]
 808:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1171              		.loc 1 808 0
 1172 000c 7B68     		ldr	r3, [r7, #4]
 1173 000e 93F82030 		ldrb	r3, [r3, #32]
 1174 0012 FB72     		strb	r3, [r7, #11]
 809:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 810:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1175              		.loc 1 810 0
 1176 0014 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1177 0016 012B     		cmp	r3, #1
 1178 0018 02D0     		beq	.L60
 1179              		.loc 1 810 0 is_stmt 0 discriminator 1
 1180 001a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1181 001c 022B     		cmp	r3, #2
 1182 001e 08D1     		bne	.L61
 1183              	.L60:
 811:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 812:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 813:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Check Sleep mode */
 814:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 1184              		.loc 1 814 0 is_stmt 1
 1185 0020 7B68     		ldr	r3, [r7, #4]
 1186 0022 1B68     		ldr	r3, [r3]
 1187 0024 5B68     		ldr	r3, [r3, #4]
 1188 0026 03F00203 		and	r3, r3, #2
ARM GAS  /tmp/ccm0Y8sw.s 			page 36


 1189 002a 002B     		cmp	r3, #0
 1190 002c 01D0     		beq	.L61
 815:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
 816:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       status = 1U;
 1191              		.loc 1 816 0
 1192 002e 0123     		movs	r3, #1
 1193 0030 FB60     		str	r3, [r7, #12]
 1194              	.L61:
 817:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
 818:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 819:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 820:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Return function status */
 821:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   return status;
 1195              		.loc 1 821 0
 1196 0032 FB68     		ldr	r3, [r7, #12]
 822:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 1197              		.loc 1 822 0
 1198 0034 1846     		mov	r0, r3
 1199 0036 1437     		adds	r7, r7, #20
 1200              	.LCFI53:
 1201              		.cfi_def_cfa_offset 4
 1202 0038 BD46     		mov	sp, r7
 1203              	.LCFI54:
 1204              		.cfi_def_cfa_register 13
 1205              		@ sp needed
 1206 003a 5DF8047B 		ldr	r7, [sp], #4
 1207              	.LCFI55:
 1208              		.cfi_restore 7
 1209              		.cfi_def_cfa_offset 0
 1210 003e 7047     		bx	lr
 1211              		.cfi_endproc
 1212              	.LFE132:
 1214              		.section	.text.HAL_CAN_AddTxMessage,"ax",%progbits
 1215              		.align	2
 1216              		.global	HAL_CAN_AddTxMessage
 1217              		.thumb
 1218              		.thumb_func
 1220              	HAL_CAN_AddTxMessage:
 1221              	.LFB133:
 823:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 824:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
 825:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Add a message to the first free Tx mailbox and activate the
 826:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         corresponding transmission request.
 827:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 828:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
 829:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  pHeader pointer to a CAN_TxHeaderTypeDef structure.
 830:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  aData array containing the payload of the Tx frame.
 831:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  pTxMailbox pointer to a variable where the function will return
 832:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the TxMailbox used to store the Tx message.
 833:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
 834:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval HAL status
 835:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
 836:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8
 837:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 1222              		.loc 1 837 0
 1223              		.cfi_startproc
 1224              		@ args = 0, pretend = 0, frame = 32
ARM GAS  /tmp/ccm0Y8sw.s 			page 37


 1225              		@ frame_needed = 1, uses_anonymous_args = 0
 1226              		@ link register save eliminated.
 1227 0000 80B4     		push	{r7}
 1228              	.LCFI56:
 1229              		.cfi_def_cfa_offset 4
 1230              		.cfi_offset 7, -4
 1231 0002 89B0     		sub	sp, sp, #36
 1232              	.LCFI57:
 1233              		.cfi_def_cfa_offset 40
 1234 0004 00AF     		add	r7, sp, #0
 1235              	.LCFI58:
 1236              		.cfi_def_cfa_register 7
 1237 0006 F860     		str	r0, [r7, #12]
 1238 0008 B960     		str	r1, [r7, #8]
 1239 000a 7A60     		str	r2, [r7, #4]
 1240 000c 3B60     		str	r3, [r7]
 838:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   uint32_t transmitmailbox;
 839:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1241              		.loc 1 839 0
 1242 000e FB68     		ldr	r3, [r7, #12]
 1243 0010 93F82030 		ldrb	r3, [r3, #32]
 1244 0014 FB77     		strb	r3, [r7, #31]
 840:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   uint32_t tsr = READ_REG(hcan->Instance->TSR);
 1245              		.loc 1 840 0
 1246 0016 FB68     		ldr	r3, [r7, #12]
 1247 0018 1B68     		ldr	r3, [r3]
 1248 001a 9B68     		ldr	r3, [r3, #8]
 1249 001c BB61     		str	r3, [r7, #24]
 841:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 842:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Check the parameters */
 843:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 844:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   assert_param(IS_CAN_RTR(pHeader->RTR));
 845:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   assert_param(IS_CAN_DLC(pHeader->DLC));
 846:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if (pHeader->IDE == CAN_ID_STD)
 847:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 848:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     assert_param(IS_CAN_STDID(pHeader->StdId));
 849:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 850:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   else
 851:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 852:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     assert_param(IS_CAN_EXTID(pHeader->ExtId));
 853:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 854:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 855:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 856:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1250              		.loc 1 856 0
 1251 001e FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1252 0020 012B     		cmp	r3, #1
 1253 0022 03D0     		beq	.L64
 1254              		.loc 1 856 0 is_stmt 0 discriminator 1
 1255 0024 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 1256 0026 022B     		cmp	r3, #2
 1257 0028 40F0B180 		bne	.L65
 1258              	.L64:
 857:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 858:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 859:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Check that all the Tx mailboxes are not full */
 860:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if (((tsr & CAN_TSR_TME0) != 0U) ||
ARM GAS  /tmp/ccm0Y8sw.s 			page 38


 1259              		.loc 1 860 0 is_stmt 1
 1260 002c BB69     		ldr	r3, [r7, #24]
 1261 002e 03F08063 		and	r3, r3, #67108864
 1262 0032 002B     		cmp	r3, #0
 1263 0034 0AD1     		bne	.L66
 861:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         ((tsr & CAN_TSR_TME1) != 0U) ||
 1264              		.loc 1 861 0 discriminator 1
 1265 0036 BB69     		ldr	r3, [r7, #24]
 1266 0038 03F00063 		and	r3, r3, #134217728
 860:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         ((tsr & CAN_TSR_TME1) != 0U) ||
 1267              		.loc 1 860 0 discriminator 1
 1268 003c 002B     		cmp	r3, #0
 1269 003e 05D1     		bne	.L66
 862:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         ((tsr & CAN_TSR_TME2) != 0U))
 1270              		.loc 1 862 0
 1271 0040 BB69     		ldr	r3, [r7, #24]
 1272 0042 03F08053 		and	r3, r3, #268435456
 861:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         ((tsr & CAN_TSR_TME1) != 0U) ||
 1273              		.loc 1 861 0
 1274 0046 002B     		cmp	r3, #0
 1275 0048 00F09980 		beq	.L67
 1276              	.L66:
 863:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
 864:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Select an empty transmit mailbox */
 865:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 1277              		.loc 1 865 0
 1278 004c BB69     		ldr	r3, [r7, #24]
 1279 004e 03F04073 		and	r3, r3, #50331648
 1280 0052 1B0E     		lsrs	r3, r3, #24
 1281 0054 7B61     		str	r3, [r7, #20]
 866:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 867:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Check transmit mailbox value */
 868:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       if (transmitmailbox > 2U)
 1282              		.loc 1 868 0
 1283 0056 7B69     		ldr	r3, [r7, #20]
 1284 0058 022B     		cmp	r3, #2
 1285 005a 07D9     		bls	.L68
 869:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       {
 870:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         /* Update error code */
 871:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 1286              		.loc 1 871 0
 1287 005c FB68     		ldr	r3, [r7, #12]
 1288 005e 5B6A     		ldr	r3, [r3, #36]
 1289 0060 43F40002 		orr	r2, r3, #8388608
 1290 0064 FB68     		ldr	r3, [r7, #12]
 1291 0066 5A62     		str	r2, [r3, #36]
 872:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 873:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         return HAL_ERROR;
 1292              		.loc 1 873 0
 1293 0068 0123     		movs	r3, #1
 1294 006a 97E0     		b	.L69
 1295              	.L68:
 874:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       }
 875:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 876:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Store the Tx mailbox */
 877:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       *pTxMailbox = (uint32_t)1 << transmitmailbox;
 1296              		.loc 1 877 0
ARM GAS  /tmp/ccm0Y8sw.s 			page 39


 1297 006c 7B69     		ldr	r3, [r7, #20]
 1298 006e 0122     		movs	r2, #1
 1299 0070 9A40     		lsls	r2, r2, r3
 1300 0072 3B68     		ldr	r3, [r7]
 1301 0074 1A60     		str	r2, [r3]
 878:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 879:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Set up the Id */
 880:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       if (pHeader->IDE == CAN_ID_STD)
 1302              		.loc 1 880 0
 1303 0076 BB68     		ldr	r3, [r7, #8]
 1304 0078 9B68     		ldr	r3, [r3, #8]
 1305 007a 002B     		cmp	r3, #0
 1306 007c 0DD1     		bne	.L70
 881:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       {
 882:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 1307              		.loc 1 882 0
 1308 007e FB68     		ldr	r3, [r7, #12]
 1309 0080 1968     		ldr	r1, [r3]
 1310 0082 BB68     		ldr	r3, [r7, #8]
 1311 0084 1B68     		ldr	r3, [r3]
 1312 0086 5A05     		lsls	r2, r3, #21
 883:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                                                            pHeader->RTR);
 1313              		.loc 1 883 0
 1314 0088 BB68     		ldr	r3, [r7, #8]
 1315 008a DB68     		ldr	r3, [r3, #12]
 882:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                                                            pHeader->RTR);
 1316              		.loc 1 882 0
 1317 008c 1A43     		orrs	r2, r2, r3
 1318 008e 7B69     		ldr	r3, [r7, #20]
 1319 0090 1833     		adds	r3, r3, #24
 1320 0092 1B01     		lsls	r3, r3, #4
 1321 0094 0B44     		add	r3, r3, r1
 1322 0096 1A60     		str	r2, [r3]
 1323 0098 0FE0     		b	.L71
 1324              	.L70:
 884:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       }
 885:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       else
 886:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       {
 887:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 1325              		.loc 1 887 0
 1326 009a FB68     		ldr	r3, [r7, #12]
 1327 009c 1968     		ldr	r1, [r3]
 1328 009e BB68     		ldr	r3, [r7, #8]
 1329 00a0 5B68     		ldr	r3, [r3, #4]
 1330 00a2 DA00     		lsls	r2, r3, #3
 888:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                                                            pHeader->IDE |
 1331              		.loc 1 888 0
 1332 00a4 BB68     		ldr	r3, [r7, #8]
 1333 00a6 9B68     		ldr	r3, [r3, #8]
 887:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                                                            pHeader->IDE |
 1334              		.loc 1 887 0
 1335 00a8 1A43     		orrs	r2, r2, r3
 889:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                                                            pHeader->RTR);
 1336              		.loc 1 889 0
 1337 00aa BB68     		ldr	r3, [r7, #8]
 1338 00ac DB68     		ldr	r3, [r3, #12]
 888:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                                                            pHeader->IDE |
ARM GAS  /tmp/ccm0Y8sw.s 			page 40


 1339              		.loc 1 888 0
 1340 00ae 1A43     		orrs	r2, r2, r3
 887:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                                                            pHeader->IDE |
 1341              		.loc 1 887 0
 1342 00b0 7B69     		ldr	r3, [r7, #20]
 1343 00b2 1833     		adds	r3, r3, #24
 1344 00b4 1B01     		lsls	r3, r3, #4
 1345 00b6 0B44     		add	r3, r3, r1
 1346 00b8 1A60     		str	r2, [r3]
 1347              	.L71:
 890:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       }
 891:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 892:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Set up the DLC */
 893:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 1348              		.loc 1 893 0
 1349 00ba FB68     		ldr	r3, [r7, #12]
 1350 00bc 1968     		ldr	r1, [r3]
 1351 00be BB68     		ldr	r3, [r7, #8]
 1352 00c0 1A69     		ldr	r2, [r3, #16]
 1353 00c2 7B69     		ldr	r3, [r7, #20]
 1354 00c4 1833     		adds	r3, r3, #24
 1355 00c6 1B01     		lsls	r3, r3, #4
 1356 00c8 0B44     		add	r3, r3, r1
 1357 00ca 5A60     		str	r2, [r3, #4]
 894:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 895:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Set up the Transmit Global Time mode */
 896:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       if (pHeader->TransmitGlobalTime == ENABLE)
 1358              		.loc 1 896 0
 1359 00cc BB68     		ldr	r3, [r7, #8]
 1360 00ce 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1361 00d0 012B     		cmp	r3, #1
 1362 00d2 0FD1     		bne	.L72
 897:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       {
 898:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 1363              		.loc 1 898 0
 1364 00d4 FB68     		ldr	r3, [r7, #12]
 1365 00d6 1968     		ldr	r1, [r3]
 1366 00d8 FB68     		ldr	r3, [r7, #12]
 1367 00da 1A68     		ldr	r2, [r3]
 1368 00dc 7B69     		ldr	r3, [r7, #20]
 1369 00de 1833     		adds	r3, r3, #24
 1370 00e0 1B01     		lsls	r3, r3, #4
 1371 00e2 1344     		add	r3, r3, r2
 1372 00e4 5B68     		ldr	r3, [r3, #4]
 1373 00e6 43F48072 		orr	r2, r3, #256
 1374 00ea 7B69     		ldr	r3, [r7, #20]
 1375 00ec 1833     		adds	r3, r3, #24
 1376 00ee 1B01     		lsls	r3, r3, #4
 1377 00f0 0B44     		add	r3, r3, r1
 1378 00f2 5A60     		str	r2, [r3, #4]
 1379              	.L72:
 899:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       }
 900:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 901:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Set up the data field */
 902:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 1380              		.loc 1 902 0
 1381 00f4 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccm0Y8sw.s 			page 41


 1382 00f6 1968     		ldr	r1, [r3]
 1383 00f8 7B68     		ldr	r3, [r7, #4]
 1384 00fa 0733     		adds	r3, r3, #7
 1385 00fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1386 00fe 1A06     		lsls	r2, r3, #24
 1387 0100 7B68     		ldr	r3, [r7, #4]
 1388 0102 0633     		adds	r3, r3, #6
 1389 0104 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1390 0106 1B04     		lsls	r3, r3, #16
 1391 0108 1A43     		orrs	r2, r2, r3
 1392 010a 7B68     		ldr	r3, [r7, #4]
 1393 010c 0533     		adds	r3, r3, #5
 1394 010e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1395 0110 1B02     		lsls	r3, r3, #8
 1396 0112 1343     		orrs	r3, r3, r2
 1397 0114 7A68     		ldr	r2, [r7, #4]
 1398 0116 0432     		adds	r2, r2, #4
 1399 0118 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1400 011a 1A43     		orrs	r2, r2, r3
 1401 011c 7B69     		ldr	r3, [r7, #20]
 1402 011e 1B01     		lsls	r3, r3, #4
 1403 0120 0B44     		add	r3, r3, r1
 1404 0122 03F5C473 		add	r3, r3, #392
 1405 0126 5A60     		str	r2, [r3, #4]
 903:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                 ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
 904:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                 ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
 905:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                 ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
 906:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                 ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
 907:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 1406              		.loc 1 907 0
 1407 0128 FB68     		ldr	r3, [r7, #12]
 1408 012a 1968     		ldr	r1, [r3]
 1409 012c 7B68     		ldr	r3, [r7, #4]
 1410 012e 0333     		adds	r3, r3, #3
 1411 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1412 0132 1A06     		lsls	r2, r3, #24
 1413 0134 7B68     		ldr	r3, [r7, #4]
 1414 0136 0233     		adds	r3, r3, #2
 1415 0138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1416 013a 1B04     		lsls	r3, r3, #16
 1417 013c 1A43     		orrs	r2, r2, r3
 1418 013e 7B68     		ldr	r3, [r7, #4]
 1419 0140 0133     		adds	r3, r3, #1
 1420 0142 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1421 0144 1B02     		lsls	r3, r3, #8
 1422 0146 1343     		orrs	r3, r3, r2
 1423 0148 7A68     		ldr	r2, [r7, #4]
 1424 014a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1425 014c 1A43     		orrs	r2, r2, r3
 1426 014e 7B69     		ldr	r3, [r7, #20]
 1427 0150 1B01     		lsls	r3, r3, #4
 1428 0152 0B44     		add	r3, r3, r1
 1429 0154 03F5C473 		add	r3, r3, #392
 1430 0158 1A60     		str	r2, [r3]
 908:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                 ((uint32_t)aData[3] << CAN_TDL0R_DATA3_Pos) |
 909:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                 ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
 910:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                 ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
ARM GAS  /tmp/ccm0Y8sw.s 			page 42


 911:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                 ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));
 912:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 913:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Request transmission */
 914:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 1431              		.loc 1 914 0
 1432 015a FB68     		ldr	r3, [r7, #12]
 1433 015c 1968     		ldr	r1, [r3]
 1434 015e FB68     		ldr	r3, [r7, #12]
 1435 0160 1A68     		ldr	r2, [r3]
 1436 0162 7B69     		ldr	r3, [r7, #20]
 1437 0164 1833     		adds	r3, r3, #24
 1438 0166 1B01     		lsls	r3, r3, #4
 1439 0168 1344     		add	r3, r3, r2
 1440 016a 1B68     		ldr	r3, [r3]
 1441 016c 43F00102 		orr	r2, r3, #1
 1442 0170 7B69     		ldr	r3, [r7, #20]
 1443 0172 1833     		adds	r3, r3, #24
 1444 0174 1B01     		lsls	r3, r3, #4
 1445 0176 0B44     		add	r3, r3, r1
 1446 0178 1A60     		str	r2, [r3]
 915:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 916:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Return function status */
 917:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       return HAL_OK;
 1447              		.loc 1 917 0
 1448 017a 0023     		movs	r3, #0
 1449 017c 0EE0     		b	.L69
 1450              	.L67:
 918:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
 919:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     else
 920:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
 921:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Update error code */
 922:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1451              		.loc 1 922 0
 1452 017e FB68     		ldr	r3, [r7, #12]
 1453 0180 5B6A     		ldr	r3, [r3, #36]
 1454 0182 43F40012 		orr	r2, r3, #2097152
 1455 0186 FB68     		ldr	r3, [r7, #12]
 1456 0188 5A62     		str	r2, [r3, #36]
 923:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 924:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       return HAL_ERROR;
 1457              		.loc 1 924 0
 1458 018a 0123     		movs	r3, #1
 1459 018c 06E0     		b	.L69
 1460              	.L65:
 925:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
 926:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 927:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   else
 928:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 929:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Update error code */
 930:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1461              		.loc 1 930 0
 1462 018e FB68     		ldr	r3, [r7, #12]
 1463 0190 5B6A     		ldr	r3, [r3, #36]
 1464 0192 43F48022 		orr	r2, r3, #262144
 1465 0196 FB68     		ldr	r3, [r7, #12]
 1466 0198 5A62     		str	r2, [r3, #36]
 931:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
ARM GAS  /tmp/ccm0Y8sw.s 			page 43


 932:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     return HAL_ERROR;
 1467              		.loc 1 932 0
 1468 019a 0123     		movs	r3, #1
 1469              	.L69:
 933:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 934:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 1470              		.loc 1 934 0
 1471 019c 1846     		mov	r0, r3
 1472 019e 2437     		adds	r7, r7, #36
 1473              	.LCFI59:
 1474              		.cfi_def_cfa_offset 4
 1475 01a0 BD46     		mov	sp, r7
 1476              	.LCFI60:
 1477              		.cfi_def_cfa_register 13
 1478              		@ sp needed
 1479 01a2 5DF8047B 		ldr	r7, [sp], #4
 1480              	.LCFI61:
 1481              		.cfi_restore 7
 1482              		.cfi_def_cfa_offset 0
 1483 01a6 7047     		bx	lr
 1484              		.cfi_endproc
 1485              	.LFE133:
 1487              		.section	.text.HAL_CAN_AbortTxRequest,"ax",%progbits
 1488              		.align	2
 1489              		.global	HAL_CAN_AbortTxRequest
 1490              		.thumb
 1491              		.thumb_func
 1493              	HAL_CAN_AbortTxRequest:
 1494              	.LFB134:
 935:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 936:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
 937:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Abort transmission requests
 938:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
 939:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
 940:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  TxMailboxes List of the Tx Mailboxes to abort.
 941:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
 942:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval HAL status
 943:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
 944:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_AbortTxRequest(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
 945:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 1495              		.loc 1 945 0
 1496              		.cfi_startproc
 1497              		@ args = 0, pretend = 0, frame = 16
 1498              		@ frame_needed = 1, uses_anonymous_args = 0
 1499              		@ link register save eliminated.
 1500 0000 80B4     		push	{r7}
 1501              	.LCFI62:
 1502              		.cfi_def_cfa_offset 4
 1503              		.cfi_offset 7, -4
 1504 0002 85B0     		sub	sp, sp, #20
 1505              	.LCFI63:
 1506              		.cfi_def_cfa_offset 24
 1507 0004 00AF     		add	r7, sp, #0
 1508              	.LCFI64:
 1509              		.cfi_def_cfa_register 7
 1510 0006 7860     		str	r0, [r7, #4]
 1511 0008 3960     		str	r1, [r7]
ARM GAS  /tmp/ccm0Y8sw.s 			page 44


 946:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1512              		.loc 1 946 0
 1513 000a 7B68     		ldr	r3, [r7, #4]
 1514 000c 93F82030 		ldrb	r3, [r3, #32]
 1515 0010 FB73     		strb	r3, [r7, #15]
 947:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 948:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Check function parameters */
 949:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
 950:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 951:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1516              		.loc 1 951 0
 1517 0012 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1518 0014 012B     		cmp	r3, #1
 1519 0016 02D0     		beq	.L74
 1520              		.loc 1 951 0 is_stmt 0 discriminator 1
 1521 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1522 001a 022B     		cmp	r3, #2
 1523 001c 28D1     		bne	.L75
 1524              	.L74:
 952:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
 953:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 954:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Check Tx Mailbox 0 */
 955:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX0) != 0U)
 1525              		.loc 1 955 0 is_stmt 1
 1526 001e 3B68     		ldr	r3, [r7]
 1527 0020 03F00103 		and	r3, r3, #1
 1528 0024 002B     		cmp	r3, #0
 1529 0026 07D0     		beq	.L76
 956:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
 957:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 0 */
 958:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ0);
 1530              		.loc 1 958 0
 1531 0028 7B68     		ldr	r3, [r7, #4]
 1532 002a 1B68     		ldr	r3, [r3]
 1533 002c 7A68     		ldr	r2, [r7, #4]
 1534 002e 1268     		ldr	r2, [r2]
 1535 0030 9268     		ldr	r2, [r2, #8]
 1536 0032 42F08002 		orr	r2, r2, #128
 1537 0036 9A60     		str	r2, [r3, #8]
 1538              	.L76:
 959:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
 960:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 961:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Check Tx Mailbox 1 */
 962:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX1) != 0U)
 1539              		.loc 1 962 0
 1540 0038 3B68     		ldr	r3, [r7]
 1541 003a 03F00203 		and	r3, r3, #2
 1542 003e 002B     		cmp	r3, #0
 1543 0040 07D0     		beq	.L77
 963:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
 964:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 1 */
 965:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ1);
 1544              		.loc 1 965 0
 1545 0042 7B68     		ldr	r3, [r7, #4]
 1546 0044 1B68     		ldr	r3, [r3]
 1547 0046 7A68     		ldr	r2, [r7, #4]
 1548 0048 1268     		ldr	r2, [r2]
ARM GAS  /tmp/ccm0Y8sw.s 			page 45


 1549 004a 9268     		ldr	r2, [r2, #8]
 1550 004c 42F40042 		orr	r2, r2, #32768
 1551 0050 9A60     		str	r2, [r3, #8]
 1552              	.L77:
 966:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
 967:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 968:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Check Tx Mailbox 2 */
 969:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if ((TxMailboxes & CAN_TX_MAILBOX2) != 0U)
 1553              		.loc 1 969 0
 1554 0052 3B68     		ldr	r3, [r7]
 1555 0054 03F00403 		and	r3, r3, #4
 1556 0058 002B     		cmp	r3, #0
 1557 005a 07D0     		beq	.L78
 970:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
 971:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Add cancellation request for Tx Mailbox 2 */
 972:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       SET_BIT(hcan->Instance->TSR, CAN_TSR_ABRQ2);
 1558              		.loc 1 972 0
 1559 005c 7B68     		ldr	r3, [r7, #4]
 1560 005e 1B68     		ldr	r3, [r3]
 1561 0060 7A68     		ldr	r2, [r7, #4]
 1562 0062 1268     		ldr	r2, [r2]
 1563 0064 9268     		ldr	r2, [r2, #8]
 1564 0066 42F40002 		orr	r2, r2, #8388608
 1565 006a 9A60     		str	r2, [r3, #8]
 1566              	.L78:
 973:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
 974:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 975:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Return function status */
 976:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     return HAL_OK;
 1567              		.loc 1 976 0
 1568 006c 0023     		movs	r3, #0
 1569 006e 06E0     		b	.L79
 1570              	.L75:
 977:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 978:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   else
 979:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
 980:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Update error code */
 981:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 1571              		.loc 1 981 0
 1572 0070 7B68     		ldr	r3, [r7, #4]
 1573 0072 5B6A     		ldr	r3, [r3, #36]
 1574 0074 43F48022 		orr	r2, r3, #262144
 1575 0078 7B68     		ldr	r3, [r7, #4]
 1576 007a 5A62     		str	r2, [r3, #36]
 982:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 983:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     return HAL_ERROR;
 1577              		.loc 1 983 0
 1578 007c 0123     		movs	r3, #1
 1579              	.L79:
 984:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
 985:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 1580              		.loc 1 985 0
 1581 007e 1846     		mov	r0, r3
 1582 0080 1437     		adds	r7, r7, #20
 1583              	.LCFI65:
 1584              		.cfi_def_cfa_offset 4
 1585 0082 BD46     		mov	sp, r7
ARM GAS  /tmp/ccm0Y8sw.s 			page 46


 1586              	.LCFI66:
 1587              		.cfi_def_cfa_register 13
 1588              		@ sp needed
 1589 0084 5DF8047B 		ldr	r7, [sp], #4
 1590              	.LCFI67:
 1591              		.cfi_restore 7
 1592              		.cfi_def_cfa_offset 0
 1593 0088 7047     		bx	lr
 1594              		.cfi_endproc
 1595              	.LFE134:
 1597 008a 00BF     		.section	.text.HAL_CAN_GetTxMailboxesFreeLevel,"ax",%progbits
 1598              		.align	2
 1599              		.global	HAL_CAN_GetTxMailboxesFreeLevel
 1600              		.thumb
 1601              		.thumb_func
 1603              	HAL_CAN_GetTxMailboxesFreeLevel:
 1604              	.LFB135:
 986:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 987:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
 988:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Return Tx Mailboxes free level: number of free Tx Mailboxes.
 989:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
 990:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
 991:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval Number of free Tx Mailboxes.
 992:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
 993:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
 994:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 1605              		.loc 1 994 0
 1606              		.cfi_startproc
 1607              		@ args = 0, pretend = 0, frame = 16
 1608              		@ frame_needed = 1, uses_anonymous_args = 0
 1609              		@ link register save eliminated.
 1610 0000 80B4     		push	{r7}
 1611              	.LCFI68:
 1612              		.cfi_def_cfa_offset 4
 1613              		.cfi_offset 7, -4
 1614 0002 85B0     		sub	sp, sp, #20
 1615              	.LCFI69:
 1616              		.cfi_def_cfa_offset 24
 1617 0004 00AF     		add	r7, sp, #0
 1618              	.LCFI70:
 1619              		.cfi_def_cfa_register 7
 1620 0006 7860     		str	r0, [r7, #4]
 995:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   uint32_t freelevel = 0U;
 1621              		.loc 1 995 0
 1622 0008 0023     		movs	r3, #0
 1623 000a FB60     		str	r3, [r7, #12]
 996:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1624              		.loc 1 996 0
 1625 000c 7B68     		ldr	r3, [r7, #4]
 1626 000e 93F82030 		ldrb	r3, [r3, #32]
 1627 0012 FB72     		strb	r3, [r7, #11]
 997:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
 998:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1628              		.loc 1 998 0
 1629 0014 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1630 0016 012B     		cmp	r3, #1
 1631 0018 02D0     		beq	.L81
ARM GAS  /tmp/ccm0Y8sw.s 			page 47


 1632              		.loc 1 998 0 is_stmt 0 discriminator 1
 1633 001a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1634 001c 022B     		cmp	r3, #2
 1635 001e 1DD1     		bne	.L82
 1636              	.L81:
 999:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1000:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
1001:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Check Tx Mailbox 0 status */
1002:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 1637              		.loc 1 1002 0 is_stmt 1
 1638 0020 7B68     		ldr	r3, [r7, #4]
 1639 0022 1B68     		ldr	r3, [r3]
 1640 0024 9B68     		ldr	r3, [r3, #8]
 1641 0026 03F08063 		and	r3, r3, #67108864
 1642 002a 002B     		cmp	r3, #0
 1643 002c 02D0     		beq	.L83
1003:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1004:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       freelevel++;
 1644              		.loc 1 1004 0
 1645 002e FB68     		ldr	r3, [r7, #12]
 1646 0030 0133     		adds	r3, r3, #1
 1647 0032 FB60     		str	r3, [r7, #12]
 1648              	.L83:
1005:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1006:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1007:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Check Tx Mailbox 1 status */
1008:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 1649              		.loc 1 1008 0
 1650 0034 7B68     		ldr	r3, [r7, #4]
 1651 0036 1B68     		ldr	r3, [r3]
 1652 0038 9B68     		ldr	r3, [r3, #8]
 1653 003a 03F00063 		and	r3, r3, #134217728
 1654 003e 002B     		cmp	r3, #0
 1655 0040 02D0     		beq	.L84
1009:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1010:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       freelevel++;
 1656              		.loc 1 1010 0
 1657 0042 FB68     		ldr	r3, [r7, #12]
 1658 0044 0133     		adds	r3, r3, #1
 1659 0046 FB60     		str	r3, [r7, #12]
 1660              	.L84:
1011:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1012:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1013:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Check Tx Mailbox 2 status */
1014:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 1661              		.loc 1 1014 0
 1662 0048 7B68     		ldr	r3, [r7, #4]
 1663 004a 1B68     		ldr	r3, [r3]
 1664 004c 9B68     		ldr	r3, [r3, #8]
 1665 004e 03F08053 		and	r3, r3, #268435456
 1666 0052 002B     		cmp	r3, #0
 1667 0054 02D0     		beq	.L82
1015:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1016:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       freelevel++;
 1668              		.loc 1 1016 0
 1669 0056 FB68     		ldr	r3, [r7, #12]
 1670 0058 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccm0Y8sw.s 			page 48


 1671 005a FB60     		str	r3, [r7, #12]
 1672              	.L82:
1017:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1018:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
1019:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1020:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Return Tx Mailboxes free level */
1021:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   return freelevel;
 1673              		.loc 1 1021 0
 1674 005c FB68     		ldr	r3, [r7, #12]
1022:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 1675              		.loc 1 1022 0
 1676 005e 1846     		mov	r0, r3
 1677 0060 1437     		adds	r7, r7, #20
 1678              	.LCFI71:
 1679              		.cfi_def_cfa_offset 4
 1680 0062 BD46     		mov	sp, r7
 1681              	.LCFI72:
 1682              		.cfi_def_cfa_register 13
 1683              		@ sp needed
 1684 0064 5DF8047B 		ldr	r7, [sp], #4
 1685              	.LCFI73:
 1686              		.cfi_restore 7
 1687              		.cfi_def_cfa_offset 0
 1688 0068 7047     		bx	lr
 1689              		.cfi_endproc
 1690              	.LFE135:
 1692 006a 00BF     		.section	.text.HAL_CAN_IsTxMessagePending,"ax",%progbits
 1693              		.align	2
 1694              		.global	HAL_CAN_IsTxMessagePending
 1695              		.thumb
 1696              		.thumb_func
 1698              	HAL_CAN_IsTxMessagePending:
 1699              	.LFB136:
1023:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1024:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1025:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Check if a transmission request is pending on the selected Tx
1026:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         Mailboxes.
1027:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1028:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
1029:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  TxMailboxes List of Tx Mailboxes to check.
1030:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Tx_Mailboxes.
1031:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval Status
1032:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *          - 0 : No pending transmission request on any selected Tx Mailboxes.
1033:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *          - 1 : Pending transmission request on at least one of the selected
1034:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *                Tx Mailbox.
1035:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1036:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
1037:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 1700              		.loc 1 1037 0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 16
 1703              		@ frame_needed = 1, uses_anonymous_args = 0
 1704              		@ link register save eliminated.
 1705 0000 80B4     		push	{r7}
 1706              	.LCFI74:
 1707              		.cfi_def_cfa_offset 4
 1708              		.cfi_offset 7, -4
ARM GAS  /tmp/ccm0Y8sw.s 			page 49


 1709 0002 85B0     		sub	sp, sp, #20
 1710              	.LCFI75:
 1711              		.cfi_def_cfa_offset 24
 1712 0004 00AF     		add	r7, sp, #0
 1713              	.LCFI76:
 1714              		.cfi_def_cfa_register 7
 1715 0006 7860     		str	r0, [r7, #4]
 1716 0008 3960     		str	r1, [r7]
1038:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   uint32_t status = 0U;
 1717              		.loc 1 1038 0
 1718 000a 0023     		movs	r3, #0
 1719 000c FB60     		str	r3, [r7, #12]
1039:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1720              		.loc 1 1039 0
 1721 000e 7B68     		ldr	r3, [r7, #4]
 1722 0010 93F82030 		ldrb	r3, [r3, #32]
 1723 0014 FB72     		strb	r3, [r7, #11]
1040:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1041:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Check function parameters */
1042:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));
1043:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1044:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1724              		.loc 1 1044 0
 1725 0016 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1726 0018 012B     		cmp	r3, #1
 1727 001a 02D0     		beq	.L87
 1728              		.loc 1 1044 0 is_stmt 0 discriminator 1
 1729 001c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1730 001e 022B     		cmp	r3, #2
 1731 0020 0BD1     		bne	.L88
 1732              	.L87:
1045:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1046:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
1047:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Check pending transmission request on the selected Tx Mailboxes */
1048:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_P
 1733              		.loc 1 1048 0 is_stmt 1
 1734 0022 7B68     		ldr	r3, [r7, #4]
 1735 0024 1B68     		ldr	r3, [r3]
 1736 0026 9A68     		ldr	r2, [r3, #8]
 1737 0028 3B68     		ldr	r3, [r7]
 1738 002a 9B06     		lsls	r3, r3, #26
 1739 002c 1A40     		ands	r2, r2, r3
 1740 002e 3B68     		ldr	r3, [r7]
 1741 0030 9B06     		lsls	r3, r3, #26
 1742 0032 9A42     		cmp	r2, r3
 1743 0034 01D0     		beq	.L88
1049:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1050:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       status = 1U;
 1744              		.loc 1 1050 0
 1745 0036 0123     		movs	r3, #1
 1746 0038 FB60     		str	r3, [r7, #12]
 1747              	.L88:
1051:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1052:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
1053:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1054:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Return status */
1055:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   return status;
ARM GAS  /tmp/ccm0Y8sw.s 			page 50


 1748              		.loc 1 1055 0
 1749 003a FB68     		ldr	r3, [r7, #12]
1056:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 1750              		.loc 1 1056 0
 1751 003c 1846     		mov	r0, r3
 1752 003e 1437     		adds	r7, r7, #20
 1753              	.LCFI77:
 1754              		.cfi_def_cfa_offset 4
 1755 0040 BD46     		mov	sp, r7
 1756              	.LCFI78:
 1757              		.cfi_def_cfa_register 13
 1758              		@ sp needed
 1759 0042 5DF8047B 		ldr	r7, [sp], #4
 1760              	.LCFI79:
 1761              		.cfi_restore 7
 1762              		.cfi_def_cfa_offset 0
 1763 0046 7047     		bx	lr
 1764              		.cfi_endproc
 1765              	.LFE136:
 1767              		.section	.text.HAL_CAN_GetTxTimestamp,"ax",%progbits
 1768              		.align	2
 1769              		.global	HAL_CAN_GetTxTimestamp
 1770              		.thumb
 1771              		.thumb_func
 1773              	HAL_CAN_GetTxTimestamp:
 1774              	.LFB137:
1057:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1058:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1059:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Return timestamp of Tx message sent, if time triggered communication
1060:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             mode is enabled.
1061:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1062:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
1063:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  TxMailbox Tx Mailbox where the timestamp of message sent will be
1064:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         read.
1065:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         This parameter can be one value of @arg CAN_Tx_Mailboxes.
1066:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval Timestamp of message sent from Tx Mailbox.
1067:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1068:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** uint32_t HAL_CAN_GetTxTimestamp(CAN_HandleTypeDef *hcan, uint32_t TxMailbox)
1069:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 1775              		.loc 1 1069 0
 1776              		.cfi_startproc
 1777              		@ args = 0, pretend = 0, frame = 32
 1778              		@ frame_needed = 1, uses_anonymous_args = 0
 1779              		@ link register save eliminated.
 1780 0000 80B4     		push	{r7}
 1781              	.LCFI80:
 1782              		.cfi_def_cfa_offset 4
 1783              		.cfi_offset 7, -4
 1784 0002 89B0     		sub	sp, sp, #36
 1785              	.LCFI81:
 1786              		.cfi_def_cfa_offset 40
 1787 0004 00AF     		add	r7, sp, #0
 1788              	.LCFI82:
 1789              		.cfi_def_cfa_register 7
 1790 0006 7860     		str	r0, [r7, #4]
 1791 0008 3960     		str	r1, [r7]
1070:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   uint32_t timestamp = 0U;
ARM GAS  /tmp/ccm0Y8sw.s 			page 51


 1792              		.loc 1 1070 0
 1793 000a 0023     		movs	r3, #0
 1794 000c FB61     		str	r3, [r7, #28]
1071:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   uint32_t transmitmailbox;
1072:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1795              		.loc 1 1072 0
 1796 000e 7B68     		ldr	r3, [r7, #4]
 1797 0010 93F82030 		ldrb	r3, [r3, #32]
 1798 0014 FB76     		strb	r3, [r7, #27]
1073:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1074:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Check function parameters */
1075:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   assert_param(IS_CAN_TX_MAILBOX(TxMailbox));
1076:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1077:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1799              		.loc 1 1077 0
 1800 0016 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 1801 0018 012B     		cmp	r3, #1
 1802 001a 02D0     		beq	.L91
 1803              		.loc 1 1077 0 is_stmt 0 discriminator 1
 1804 001c FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 1805 001e 022B     		cmp	r3, #2
 1806 0020 12D1     		bne	.L92
 1807              	.L91:
 1808 0022 3B68     		ldr	r3, [r7]
 1809 0024 3B61     		str	r3, [r7, #16]
 1810              	.LBB4:
 1811              	.LBB5:
 1812              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARM GAS  /tmp/ccm0Y8sw.s 			page 52


  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccm0Y8sw.s 			page 53


  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccm0Y8sw.s 			page 54


 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccm0Y8sw.s 			page 55


 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccm0Y8sw.s 			page 56


 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
ARM GAS  /tmp/ccm0Y8sw.s 			page 57


 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
ARM GAS  /tmp/ccm0Y8sw.s 			page 58


 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccm0Y8sw.s 			page 59


 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccm0Y8sw.s 			page 60


 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1813              		.loc 2 531 0 is_stmt 1
 1814 0026 3B69     		ldr	r3, [r7, #16]
 1815              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1816 0028 93FAA3F3 		rbit r3, r3
 1817              	@ 0 "" 2
 1818              		.thumb
 1819 002c FB60     		str	r3, [r7, #12]
 532:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 533:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t s = 4 /*sizeof(v)*/ * 8 - 1; /* extra shift needed at end */
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
ARM GAS  /tmp/ccm0Y8sw.s 			page 61


 536:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value; value >>= 1U)
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 1820              		.loc 2 544 0
 1821 002e FB68     		ldr	r3, [r7, #12]
 1822              	.LBE5:
 1823              	.LBE4:
1078:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1079:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
1080:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Select the Tx mailbox */
1081:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     transmitmailbox = POSITION_VAL(TxMailbox);
 1824              		.loc 1 1081 0
 1825 0030 B3FA83F3 		clz	r3, r3
 1826 0034 7B61     		str	r3, [r7, #20]
1082:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1083:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Get timestamp */
1084:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     timestamp = (hcan->Instance->sTxMailBox[transmitmailbox].TDTR & CAN_TDT0R_TIME) >> CAN_TDT0R_TI
 1827              		.loc 1 1084 0
 1828 0036 7B68     		ldr	r3, [r7, #4]
 1829 0038 1A68     		ldr	r2, [r3]
 1830 003a 7B69     		ldr	r3, [r7, #20]
 1831 003c 1833     		adds	r3, r3, #24
 1832 003e 1B01     		lsls	r3, r3, #4
 1833 0040 1344     		add	r3, r3, r2
 1834 0042 5B68     		ldr	r3, [r3, #4]
 1835 0044 1B0C     		lsrs	r3, r3, #16
 1836 0046 FB61     		str	r3, [r7, #28]
 1837              	.L92:
1085:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
1086:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1087:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Return the timestamp */
1088:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   return timestamp;
 1838              		.loc 1 1088 0
 1839 0048 FB69     		ldr	r3, [r7, #28]
1089:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 1840              		.loc 1 1089 0
 1841 004a 1846     		mov	r0, r3
 1842 004c 2437     		adds	r7, r7, #36
 1843              	.LCFI83:
 1844              		.cfi_def_cfa_offset 4
 1845 004e BD46     		mov	sp, r7
 1846              	.LCFI84:
 1847              		.cfi_def_cfa_register 13
 1848              		@ sp needed
 1849 0050 5DF8047B 		ldr	r7, [sp], #4
 1850              	.LCFI85:
 1851              		.cfi_restore 7
 1852              		.cfi_def_cfa_offset 0
 1853 0054 7047     		bx	lr
 1854              		.cfi_endproc
 1855              	.LFE137:
ARM GAS  /tmp/ccm0Y8sw.s 			page 62


 1857 0056 00BF     		.section	.text.HAL_CAN_GetRxMessage,"ax",%progbits
 1858              		.align	2
 1859              		.global	HAL_CAN_GetRxMessage
 1860              		.thumb
 1861              		.thumb_func
 1863              	HAL_CAN_GetRxMessage:
 1864              	.LFB138:
1090:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1091:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1092:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Get an CAN frame from the Rx FIFO zone into the message RAM.
1093:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1094:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
1095:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  RxFifo Fifo number of the received message to be read.
1096:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1097:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  pHeader pointer to a CAN_RxHeaderTypeDef structure where the header
1098:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         of the Rx frame will be stored.
1099:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  aData array where the payload of the Rx frame will be stored.
1100:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval HAL status
1101:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1102:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDe
1103:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 1865              		.loc 1 1103 0
 1866              		.cfi_startproc
 1867              		@ args = 0, pretend = 0, frame = 24
 1868              		@ frame_needed = 1, uses_anonymous_args = 0
 1869              		@ link register save eliminated.
 1870 0000 80B4     		push	{r7}
 1871              	.LCFI86:
 1872              		.cfi_def_cfa_offset 4
 1873              		.cfi_offset 7, -4
 1874 0002 87B0     		sub	sp, sp, #28
 1875              	.LCFI87:
 1876              		.cfi_def_cfa_offset 32
 1877 0004 00AF     		add	r7, sp, #0
 1878              	.LCFI88:
 1879              		.cfi_def_cfa_register 7
 1880 0006 F860     		str	r0, [r7, #12]
 1881 0008 B960     		str	r1, [r7, #8]
 1882 000a 7A60     		str	r2, [r7, #4]
 1883 000c 3B60     		str	r3, [r7]
1104:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 1884              		.loc 1 1104 0
 1885 000e FB68     		ldr	r3, [r7, #12]
 1886 0010 93F82030 		ldrb	r3, [r3, #32]
 1887 0014 FB75     		strb	r3, [r7, #23]
1105:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1106:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
1107:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1108:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 1888              		.loc 1 1108 0
 1889 0016 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1890 0018 012B     		cmp	r3, #1
 1891 001a 03D0     		beq	.L96
 1892              		.loc 1 1108 0 is_stmt 0 discriminator 1
 1893 001c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1894 001e 022B     		cmp	r3, #2
 1895 0020 40F0F580 		bne	.L97
ARM GAS  /tmp/ccm0Y8sw.s 			page 63


 1896              	.L96:
1109:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1110:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
1111:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Check the Rx FIFO */
1112:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 1897              		.loc 1 1112 0 is_stmt 1
 1898 0024 BB68     		ldr	r3, [r7, #8]
 1899 0026 002B     		cmp	r3, #0
 1900 0028 0ED1     		bne	.L98
1113:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1114:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Check that the Rx FIFO 0 is not empty */
1115:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 1901              		.loc 1 1115 0
 1902 002a FB68     		ldr	r3, [r7, #12]
 1903 002c 1B68     		ldr	r3, [r3]
 1904 002e DB68     		ldr	r3, [r3, #12]
 1905 0030 03F00303 		and	r3, r3, #3
 1906 0034 002B     		cmp	r3, #0
 1907 0036 16D1     		bne	.L99
1116:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       {
1117:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         /* Update error code */
1118:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1908              		.loc 1 1118 0
 1909 0038 FB68     		ldr	r3, [r7, #12]
 1910 003a 5B6A     		ldr	r3, [r3, #36]
 1911 003c 43F40012 		orr	r2, r3, #2097152
 1912 0040 FB68     		ldr	r3, [r7, #12]
 1913 0042 5A62     		str	r2, [r3, #36]
1119:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1120:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         return HAL_ERROR;
 1914              		.loc 1 1120 0
 1915 0044 0123     		movs	r3, #1
 1916 0046 E9E0     		b	.L100
 1917              	.L98:
1121:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       }
1122:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1123:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     else /* Rx element is assigned to Rx FIFO 1 */
1124:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1125:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Check that the Rx FIFO 1 is not empty */
1126:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 1918              		.loc 1 1126 0
 1919 0048 FB68     		ldr	r3, [r7, #12]
 1920 004a 1B68     		ldr	r3, [r3]
 1921 004c 1B69     		ldr	r3, [r3, #16]
 1922 004e 03F00303 		and	r3, r3, #3
 1923 0052 002B     		cmp	r3, #0
 1924 0054 07D1     		bne	.L99
1127:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       {
1128:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         /* Update error code */
1129:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 1925              		.loc 1 1129 0
 1926 0056 FB68     		ldr	r3, [r7, #12]
 1927 0058 5B6A     		ldr	r3, [r3, #36]
 1928 005a 43F40012 		orr	r2, r3, #2097152
 1929 005e FB68     		ldr	r3, [r7, #12]
 1930 0060 5A62     		str	r2, [r3, #36]
1130:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
ARM GAS  /tmp/ccm0Y8sw.s 			page 64


1131:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         return HAL_ERROR;
 1931              		.loc 1 1131 0
 1932 0062 0123     		movs	r3, #1
 1933 0064 DAE0     		b	.L100
 1934              	.L99:
1132:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       }
1133:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1134:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1135:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Get the header */
1136:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 1935              		.loc 1 1136 0
 1936 0066 FB68     		ldr	r3, [r7, #12]
 1937 0068 1A68     		ldr	r2, [r3]
 1938 006a BB68     		ldr	r3, [r7, #8]
 1939 006c 1B33     		adds	r3, r3, #27
 1940 006e 1B01     		lsls	r3, r3, #4
 1941 0070 1344     		add	r3, r3, r2
 1942 0072 1B68     		ldr	r3, [r3]
 1943 0074 03F00402 		and	r2, r3, #4
 1944 0078 7B68     		ldr	r3, [r7, #4]
 1945 007a 9A60     		str	r2, [r3, #8]
1137:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if (pHeader->IDE == CAN_ID_STD)
 1946              		.loc 1 1137 0
 1947 007c 7B68     		ldr	r3, [r7, #4]
 1948 007e 9B68     		ldr	r3, [r3, #8]
 1949 0080 002B     		cmp	r3, #0
 1950 0082 0AD1     		bne	.L101
1138:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1139:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_
 1951              		.loc 1 1139 0
 1952 0084 FB68     		ldr	r3, [r7, #12]
 1953 0086 1A68     		ldr	r2, [r3]
 1954 0088 BB68     		ldr	r3, [r7, #8]
 1955 008a 1B33     		adds	r3, r3, #27
 1956 008c 1B01     		lsls	r3, r3, #4
 1957 008e 1344     		add	r3, r3, r2
 1958 0090 1B68     		ldr	r3, [r3]
 1959 0092 5A0D     		lsrs	r2, r3, #21
 1960 0094 7B68     		ldr	r3, [r7, #4]
 1961 0096 1A60     		str	r2, [r3]
 1962 0098 09E0     		b	.L102
 1963              	.L101:
1140:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1141:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     else
1142:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1143:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR)
 1964              		.loc 1 1143 0
 1965 009a FB68     		ldr	r3, [r7, #12]
 1966 009c 1A68     		ldr	r2, [r3]
 1967 009e BB68     		ldr	r3, [r7, #8]
 1968 00a0 1B33     		adds	r3, r3, #27
 1969 00a2 1B01     		lsls	r3, r3, #4
 1970 00a4 1344     		add	r3, r3, r2
 1971 00a6 1B68     		ldr	r3, [r3]
 1972 00a8 DA08     		lsrs	r2, r3, #3
 1973 00aa 7B68     		ldr	r3, [r7, #4]
 1974 00ac 5A60     		str	r2, [r3, #4]
ARM GAS  /tmp/ccm0Y8sw.s 			page 65


 1975              	.L102:
1144:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1145:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 1976              		.loc 1 1145 0
 1977 00ae FB68     		ldr	r3, [r7, #12]
 1978 00b0 1A68     		ldr	r2, [r3]
 1979 00b2 BB68     		ldr	r3, [r7, #8]
 1980 00b4 1B33     		adds	r3, r3, #27
 1981 00b6 1B01     		lsls	r3, r3, #4
 1982 00b8 1344     		add	r3, r3, r2
 1983 00ba 1B68     		ldr	r3, [r3]
 1984 00bc 03F00203 		and	r3, r3, #2
 1985 00c0 5A08     		lsrs	r2, r3, #1
 1986 00c2 7B68     		ldr	r3, [r7, #4]
 1987 00c4 DA60     		str	r2, [r3, #12]
1146:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos
 1988              		.loc 1 1146 0
 1989 00c6 FB68     		ldr	r3, [r7, #12]
 1990 00c8 1A68     		ldr	r2, [r3]
 1991 00ca BB68     		ldr	r3, [r7, #8]
 1992 00cc 1B33     		adds	r3, r3, #27
 1993 00ce 1B01     		lsls	r3, r3, #4
 1994 00d0 1344     		add	r3, r3, r2
 1995 00d2 5B68     		ldr	r3, [r3, #4]
 1996 00d4 03F00F02 		and	r2, r3, #15
 1997 00d8 7B68     		ldr	r3, [r7, #4]
 1998 00da 1A61     		str	r2, [r3, #16]
1147:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_
 1999              		.loc 1 1147 0
 2000 00dc FB68     		ldr	r3, [r7, #12]
 2001 00de 1A68     		ldr	r2, [r3]
 2002 00e0 BB68     		ldr	r3, [r7, #8]
 2003 00e2 1B33     		adds	r3, r3, #27
 2004 00e4 1B01     		lsls	r3, r3, #4
 2005 00e6 1344     		add	r3, r3, r2
 2006 00e8 5B68     		ldr	r3, [r3, #4]
 2007 00ea 03F47F43 		and	r3, r3, #65280
 2008 00ee 1A0A     		lsrs	r2, r3, #8
 2009 00f0 7B68     		ldr	r3, [r7, #4]
 2010 00f2 9A61     		str	r2, [r3, #24]
1148:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_
 2011              		.loc 1 1148 0
 2012 00f4 FB68     		ldr	r3, [r7, #12]
 2013 00f6 1A68     		ldr	r2, [r3]
 2014 00f8 BB68     		ldr	r3, [r7, #8]
 2015 00fa 1B33     		adds	r3, r3, #27
 2016 00fc 1B01     		lsls	r3, r3, #4
 2017 00fe 1344     		add	r3, r3, r2
 2018 0100 5B68     		ldr	r3, [r3, #4]
 2019 0102 1A0C     		lsrs	r2, r3, #16
 2020 0104 7B68     		ldr	r3, [r7, #4]
 2021 0106 5A61     		str	r2, [r3, #20]
1149:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1150:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Get the data */
1151:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 2022              		.loc 1 1151 0
 2023 0108 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccm0Y8sw.s 			page 66


 2024 010a 1A68     		ldr	r2, [r3]
 2025 010c BB68     		ldr	r3, [r7, #8]
 2026 010e 1B01     		lsls	r3, r3, #4
 2027 0110 1344     		add	r3, r3, r2
 2028 0112 03F5DC73 		add	r3, r3, #440
 2029 0116 1B68     		ldr	r3, [r3]
 2030 0118 DAB2     		uxtb	r2, r3
 2031 011a 3B68     		ldr	r3, [r7]
 2032 011c 1A70     		strb	r2, [r3]
1152:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 2033              		.loc 1 1152 0
 2034 011e 3B68     		ldr	r3, [r7]
 2035 0120 0133     		adds	r3, r3, #1
 2036 0122 FA68     		ldr	r2, [r7, #12]
 2037 0124 1168     		ldr	r1, [r2]
 2038 0126 BA68     		ldr	r2, [r7, #8]
 2039 0128 1201     		lsls	r2, r2, #4
 2040 012a 0A44     		add	r2, r2, r1
 2041 012c 02F5DC72 		add	r2, r2, #440
 2042 0130 1268     		ldr	r2, [r2]
 2043 0132 02F47F42 		and	r2, r2, #65280
 2044 0136 120A     		lsrs	r2, r2, #8
 2045 0138 D2B2     		uxtb	r2, r2
 2046 013a 1A70     		strb	r2, [r3]
1153:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 2047              		.loc 1 1153 0
 2048 013c 3B68     		ldr	r3, [r7]
 2049 013e 0233     		adds	r3, r3, #2
 2050 0140 FA68     		ldr	r2, [r7, #12]
 2051 0142 1168     		ldr	r1, [r2]
 2052 0144 BA68     		ldr	r2, [r7, #8]
 2053 0146 1201     		lsls	r2, r2, #4
 2054 0148 0A44     		add	r2, r2, r1
 2055 014a 02F5DC72 		add	r2, r2, #440
 2056 014e 1268     		ldr	r2, [r2]
 2057 0150 02F47F02 		and	r2, r2, #16711680
 2058 0154 120C     		lsrs	r2, r2, #16
 2059 0156 D2B2     		uxtb	r2, r2
 2060 0158 1A70     		strb	r2, [r3]
1154:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R
 2061              		.loc 1 1154 0
 2062 015a 3B68     		ldr	r3, [r7]
 2063 015c 0333     		adds	r3, r3, #3
 2064 015e FA68     		ldr	r2, [r7, #12]
 2065 0160 1168     		ldr	r1, [r2]
 2066 0162 BA68     		ldr	r2, [r7, #8]
 2067 0164 1201     		lsls	r2, r2, #4
 2068 0166 0A44     		add	r2, r2, r1
 2069 0168 02F5DC72 		add	r2, r2, #440
 2070 016c 1268     		ldr	r2, [r2]
 2071 016e 120E     		lsrs	r2, r2, #24
 2072 0170 D2B2     		uxtb	r2, r2
 2073 0172 1A70     		strb	r2, [r3]
1155:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 2074              		.loc 1 1155 0
 2075 0174 3B68     		ldr	r3, [r7]
 2076 0176 0433     		adds	r3, r3, #4
ARM GAS  /tmp/ccm0Y8sw.s 			page 67


 2077 0178 FA68     		ldr	r2, [r7, #12]
 2078 017a 1168     		ldr	r1, [r2]
 2079 017c BA68     		ldr	r2, [r7, #8]
 2080 017e 1201     		lsls	r2, r2, #4
 2081 0180 0A44     		add	r2, r2, r1
 2082 0182 02F5DC72 		add	r2, r2, #440
 2083 0186 5268     		ldr	r2, [r2, #4]
 2084 0188 D2B2     		uxtb	r2, r2
 2085 018a 1A70     		strb	r2, [r3]
1156:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 2086              		.loc 1 1156 0
 2087 018c 3B68     		ldr	r3, [r7]
 2088 018e 0533     		adds	r3, r3, #5
 2089 0190 FA68     		ldr	r2, [r7, #12]
 2090 0192 1168     		ldr	r1, [r2]
 2091 0194 BA68     		ldr	r2, [r7, #8]
 2092 0196 1201     		lsls	r2, r2, #4
 2093 0198 0A44     		add	r2, r2, r1
 2094 019a 02F5DC72 		add	r2, r2, #440
 2095 019e 5268     		ldr	r2, [r2, #4]
 2096 01a0 02F47F42 		and	r2, r2, #65280
 2097 01a4 120A     		lsrs	r2, r2, #8
 2098 01a6 D2B2     		uxtb	r2, r2
 2099 01a8 1A70     		strb	r2, [r3]
1157:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 2100              		.loc 1 1157 0
 2101 01aa 3B68     		ldr	r3, [r7]
 2102 01ac 0633     		adds	r3, r3, #6
 2103 01ae FA68     		ldr	r2, [r7, #12]
 2104 01b0 1168     		ldr	r1, [r2]
 2105 01b2 BA68     		ldr	r2, [r7, #8]
 2106 01b4 1201     		lsls	r2, r2, #4
 2107 01b6 0A44     		add	r2, r2, r1
 2108 01b8 02F5DC72 		add	r2, r2, #440
 2109 01bc 5268     		ldr	r2, [r2, #4]
 2110 01be 02F47F02 		and	r2, r2, #16711680
 2111 01c2 120C     		lsrs	r2, r2, #16
 2112 01c4 D2B2     		uxtb	r2, r2
 2113 01c6 1A70     		strb	r2, [r3]
1158:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R
 2114              		.loc 1 1158 0
 2115 01c8 3B68     		ldr	r3, [r7]
 2116 01ca 0733     		adds	r3, r3, #7
 2117 01cc FA68     		ldr	r2, [r7, #12]
 2118 01ce 1168     		ldr	r1, [r2]
 2119 01d0 BA68     		ldr	r2, [r7, #8]
 2120 01d2 1201     		lsls	r2, r2, #4
 2121 01d4 0A44     		add	r2, r2, r1
 2122 01d6 02F5DC72 		add	r2, r2, #440
 2123 01da 5268     		ldr	r2, [r2, #4]
 2124 01dc 120E     		lsrs	r2, r2, #24
 2125 01de D2B2     		uxtb	r2, r2
 2126 01e0 1A70     		strb	r2, [r3]
1159:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1160:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Release the FIFO */
1161:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 2127              		.loc 1 1161 0
ARM GAS  /tmp/ccm0Y8sw.s 			page 68


 2128 01e2 BB68     		ldr	r3, [r7, #8]
 2129 01e4 002B     		cmp	r3, #0
 2130 01e6 08D1     		bne	.L103
1162:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1163:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Release RX FIFO 0 */
1164:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 2131              		.loc 1 1164 0
 2132 01e8 FB68     		ldr	r3, [r7, #12]
 2133 01ea 1B68     		ldr	r3, [r3]
 2134 01ec FA68     		ldr	r2, [r7, #12]
 2135 01ee 1268     		ldr	r2, [r2]
 2136 01f0 D268     		ldr	r2, [r2, #12]
 2137 01f2 42F02002 		orr	r2, r2, #32
 2138 01f6 DA60     		str	r2, [r3, #12]
 2139 01f8 07E0     		b	.L104
 2140              	.L103:
1165:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1166:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     else /* Rx element is assigned to Rx FIFO 1 */
1167:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1168:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Release RX FIFO 1 */
1169:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 2141              		.loc 1 1169 0
 2142 01fa FB68     		ldr	r3, [r7, #12]
 2143 01fc 1B68     		ldr	r3, [r3]
 2144 01fe FA68     		ldr	r2, [r7, #12]
 2145 0200 1268     		ldr	r2, [r2]
 2146 0202 1269     		ldr	r2, [r2, #16]
 2147 0204 42F02002 		orr	r2, r2, #32
 2148 0208 1A61     		str	r2, [r3, #16]
 2149              	.L104:
1170:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1171:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1172:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Return function status */
1173:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     return HAL_OK;
 2150              		.loc 1 1173 0
 2151 020a 0023     		movs	r3, #0
 2152 020c 06E0     		b	.L100
 2153              	.L97:
1174:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
1175:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   else
1176:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
1177:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Update error code */
1178:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2154              		.loc 1 1178 0
 2155 020e FB68     		ldr	r3, [r7, #12]
 2156 0210 5B6A     		ldr	r3, [r3, #36]
 2157 0212 43F48022 		orr	r2, r3, #262144
 2158 0216 FB68     		ldr	r3, [r7, #12]
 2159 0218 5A62     		str	r2, [r3, #36]
1179:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1180:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     return HAL_ERROR;
 2160              		.loc 1 1180 0
 2161 021a 0123     		movs	r3, #1
 2162              	.L100:
1181:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
1182:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 2163              		.loc 1 1182 0
ARM GAS  /tmp/ccm0Y8sw.s 			page 69


 2164 021c 1846     		mov	r0, r3
 2165 021e 1C37     		adds	r7, r7, #28
 2166              	.LCFI89:
 2167              		.cfi_def_cfa_offset 4
 2168 0220 BD46     		mov	sp, r7
 2169              	.LCFI90:
 2170              		.cfi_def_cfa_register 13
 2171              		@ sp needed
 2172 0222 5DF8047B 		ldr	r7, [sp], #4
 2173              	.LCFI91:
 2174              		.cfi_restore 7
 2175              		.cfi_def_cfa_offset 0
 2176 0226 7047     		bx	lr
 2177              		.cfi_endproc
 2178              	.LFE138:
 2180              		.section	.text.HAL_CAN_GetRxFifoFillLevel,"ax",%progbits
 2181              		.align	2
 2182              		.global	HAL_CAN_GetRxFifoFillLevel
 2183              		.thumb
 2184              		.thumb_func
 2186              	HAL_CAN_GetRxFifoFillLevel:
 2187              	.LFB139:
1183:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1184:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1185:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Return Rx FIFO fill level.
1186:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1187:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
1188:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  RxFifo Rx FIFO.
1189:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         This parameter can be a value of @arg CAN_receive_FIFO_number.
1190:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval Number of messages available in Rx FIFO.
1191:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1192:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
1193:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 2188              		.loc 1 1193 0
 2189              		.cfi_startproc
 2190              		@ args = 0, pretend = 0, frame = 16
 2191              		@ frame_needed = 1, uses_anonymous_args = 0
 2192              		@ link register save eliminated.
 2193 0000 80B4     		push	{r7}
 2194              	.LCFI92:
 2195              		.cfi_def_cfa_offset 4
 2196              		.cfi_offset 7, -4
 2197 0002 85B0     		sub	sp, sp, #20
 2198              	.LCFI93:
 2199              		.cfi_def_cfa_offset 24
 2200 0004 00AF     		add	r7, sp, #0
 2201              	.LCFI94:
 2202              		.cfi_def_cfa_register 7
 2203 0006 7860     		str	r0, [r7, #4]
 2204 0008 3960     		str	r1, [r7]
1194:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   uint32_t filllevel = 0U;
 2205              		.loc 1 1194 0
 2206 000a 0023     		movs	r3, #0
 2207 000c FB60     		str	r3, [r7, #12]
1195:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2208              		.loc 1 1195 0
 2209 000e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccm0Y8sw.s 			page 70


 2210 0010 93F82030 		ldrb	r3, [r3, #32]
 2211 0014 FB72     		strb	r3, [r7, #11]
1196:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1197:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Check function parameters */
1198:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   assert_param(IS_CAN_RX_FIFO(RxFifo));
1199:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1200:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2212              		.loc 1 1200 0
 2213 0016 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2214 0018 012B     		cmp	r3, #1
 2215 001a 02D0     		beq	.L106
 2216              		.loc 1 1200 0 is_stmt 0 discriminator 1
 2217 001c FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 2218 001e 022B     		cmp	r3, #2
 2219 0020 0FD1     		bne	.L107
 2220              	.L106:
1201:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1202:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
1203:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if (RxFifo == CAN_RX_FIFO0)
 2221              		.loc 1 1203 0 is_stmt 1
 2222 0022 3B68     		ldr	r3, [r7]
 2223 0024 002B     		cmp	r3, #0
 2224 0026 06D1     		bne	.L108
1204:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1205:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 2225              		.loc 1 1205 0
 2226 0028 7B68     		ldr	r3, [r7, #4]
 2227 002a 1B68     		ldr	r3, [r3]
 2228 002c DB68     		ldr	r3, [r3, #12]
 2229 002e 03F00303 		and	r3, r3, #3
 2230 0032 FB60     		str	r3, [r7, #12]
 2231 0034 05E0     		b	.L107
 2232              	.L108:
1206:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1207:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     else /* RxFifo == CAN_RX_FIFO1 */
1208:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1209:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 2233              		.loc 1 1209 0
 2234 0036 7B68     		ldr	r3, [r7, #4]
 2235 0038 1B68     		ldr	r3, [r3]
 2236 003a 1B69     		ldr	r3, [r3, #16]
 2237 003c 03F00303 		and	r3, r3, #3
 2238 0040 FB60     		str	r3, [r7, #12]
 2239              	.L107:
1210:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1211:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
1212:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1213:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Return Rx FIFO fill level */
1214:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   return filllevel;
 2240              		.loc 1 1214 0
 2241 0042 FB68     		ldr	r3, [r7, #12]
1215:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 2242              		.loc 1 1215 0
 2243 0044 1846     		mov	r0, r3
 2244 0046 1437     		adds	r7, r7, #20
 2245              	.LCFI95:
 2246              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccm0Y8sw.s 			page 71


 2247 0048 BD46     		mov	sp, r7
 2248              	.LCFI96:
 2249              		.cfi_def_cfa_register 13
 2250              		@ sp needed
 2251 004a 5DF8047B 		ldr	r7, [sp], #4
 2252              	.LCFI97:
 2253              		.cfi_restore 7
 2254              		.cfi_def_cfa_offset 0
 2255 004e 7047     		bx	lr
 2256              		.cfi_endproc
 2257              	.LFE139:
 2259              		.section	.text.HAL_CAN_ActivateNotification,"ax",%progbits
 2260              		.align	2
 2261              		.global	HAL_CAN_ActivateNotification
 2262              		.thumb
 2263              		.thumb_func
 2265              	HAL_CAN_ActivateNotification:
 2266              	.LFB140:
1216:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1217:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1218:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @}
1219:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1220:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1221:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group4 Interrupts management
1222:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****  *  @brief    Interrupts management
1223:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****  *
1224:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** @verbatim
1225:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   ==============================================================================
1226:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                        ##### Interrupts management #####
1227:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   ==============================================================================
1228:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     [..]  This section provides functions allowing to:
1229:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_ActivateNotification      : Enable interrupts
1230:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_DeactivateNotification    : Disable interrupts
1231:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_IRQHandler                : Handles CAN interrupt request
1232:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1233:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** @endverbatim
1234:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @{
1235:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1236:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1237:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1238:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Enable interrupts.
1239:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1240:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
1241:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  ActiveITs indicates which interrupts will be enabled.
1242:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1243:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval HAL status
1244:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1245:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
1246:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 2267              		.loc 1 1246 0
 2268              		.cfi_startproc
 2269              		@ args = 0, pretend = 0, frame = 16
 2270              		@ frame_needed = 1, uses_anonymous_args = 0
 2271              		@ link register save eliminated.
 2272 0000 80B4     		push	{r7}
 2273              	.LCFI98:
 2274              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccm0Y8sw.s 			page 72


 2275              		.cfi_offset 7, -4
 2276 0002 85B0     		sub	sp, sp, #20
 2277              	.LCFI99:
 2278              		.cfi_def_cfa_offset 24
 2279 0004 00AF     		add	r7, sp, #0
 2280              	.LCFI100:
 2281              		.cfi_def_cfa_register 7
 2282 0006 7860     		str	r0, [r7, #4]
 2283 0008 3960     		str	r1, [r7]
1247:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2284              		.loc 1 1247 0
 2285 000a 7B68     		ldr	r3, [r7, #4]
 2286 000c 93F82030 		ldrb	r3, [r3, #32]
 2287 0010 FB73     		strb	r3, [r7, #15]
1248:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1249:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Check function parameters */
1250:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   assert_param(IS_CAN_IT(ActiveITs));
1251:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1252:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2288              		.loc 1 1252 0
 2289 0012 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2290 0014 012B     		cmp	r3, #1
 2291 0016 02D0     		beq	.L111
 2292              		.loc 1 1252 0 is_stmt 0 discriminator 1
 2293 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2294 001a 022B     		cmp	r3, #2
 2295 001c 09D1     		bne	.L112
 2296              	.L111:
1253:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1254:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
1255:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Enable the selected interrupts */
1256:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 2297              		.loc 1 1256 0 is_stmt 1
 2298 001e 7B68     		ldr	r3, [r7, #4]
 2299 0020 1B68     		ldr	r3, [r3]
 2300 0022 7A68     		ldr	r2, [r7, #4]
 2301 0024 1268     		ldr	r2, [r2]
 2302 0026 5169     		ldr	r1, [r2, #20]
 2303 0028 3A68     		ldr	r2, [r7]
 2304 002a 0A43     		orrs	r2, r2, r1
 2305 002c 5A61     		str	r2, [r3, #20]
1257:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1258:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Return function status */
1259:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     return HAL_OK;
 2306              		.loc 1 1259 0
 2307 002e 0023     		movs	r3, #0
 2308 0030 06E0     		b	.L113
 2309              	.L112:
1260:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
1261:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   else
1262:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
1263:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Update error code */
1264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2310              		.loc 1 1264 0
 2311 0032 7B68     		ldr	r3, [r7, #4]
 2312 0034 5B6A     		ldr	r3, [r3, #36]
 2313 0036 43F48022 		orr	r2, r3, #262144
ARM GAS  /tmp/ccm0Y8sw.s 			page 73


 2314 003a 7B68     		ldr	r3, [r7, #4]
 2315 003c 5A62     		str	r2, [r3, #36]
1265:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1266:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     return HAL_ERROR;
 2316              		.loc 1 1266 0
 2317 003e 0123     		movs	r3, #1
 2318              	.L113:
1267:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
1268:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 2319              		.loc 1 1268 0
 2320 0040 1846     		mov	r0, r3
 2321 0042 1437     		adds	r7, r7, #20
 2322              	.LCFI101:
 2323              		.cfi_def_cfa_offset 4
 2324 0044 BD46     		mov	sp, r7
 2325              	.LCFI102:
 2326              		.cfi_def_cfa_register 13
 2327              		@ sp needed
 2328 0046 5DF8047B 		ldr	r7, [sp], #4
 2329              	.LCFI103:
 2330              		.cfi_restore 7
 2331              		.cfi_def_cfa_offset 0
 2332 004a 7047     		bx	lr
 2333              		.cfi_endproc
 2334              	.LFE140:
 2336              		.section	.text.HAL_CAN_DeactivateNotification,"ax",%progbits
 2337              		.align	2
 2338              		.global	HAL_CAN_DeactivateNotification
 2339              		.thumb
 2340              		.thumb_func
 2342              	HAL_CAN_DeactivateNotification:
 2343              	.LFB141:
1269:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1270:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1271:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Disable interrupts.
1272:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1273:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
1274:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  InactiveITs indicates which interrupts will be disabled.
1275:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         This parameter can be any combination of @arg CAN_Interrupts.
1276:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval HAL status
1277:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1278:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
1279:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 2344              		.loc 1 1279 0
 2345              		.cfi_startproc
 2346              		@ args = 0, pretend = 0, frame = 16
 2347              		@ frame_needed = 1, uses_anonymous_args = 0
 2348              		@ link register save eliminated.
 2349 0000 80B4     		push	{r7}
 2350              	.LCFI104:
 2351              		.cfi_def_cfa_offset 4
 2352              		.cfi_offset 7, -4
 2353 0002 85B0     		sub	sp, sp, #20
 2354              	.LCFI105:
 2355              		.cfi_def_cfa_offset 24
 2356 0004 00AF     		add	r7, sp, #0
 2357              	.LCFI106:
ARM GAS  /tmp/ccm0Y8sw.s 			page 74


 2358              		.cfi_def_cfa_register 7
 2359 0006 7860     		str	r0, [r7, #4]
 2360 0008 3960     		str	r1, [r7]
1280:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 2361              		.loc 1 1280 0
 2362 000a 7B68     		ldr	r3, [r7, #4]
 2363 000c 93F82030 		ldrb	r3, [r3, #32]
 2364 0010 FB73     		strb	r3, [r7, #15]
1281:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1282:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Check function parameters */
1283:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   assert_param(IS_CAN_IT(InactiveITs));
1284:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1285:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 2365              		.loc 1 1285 0
 2366 0012 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2367 0014 012B     		cmp	r3, #1
 2368 0016 02D0     		beq	.L115
 2369              		.loc 1 1285 0 is_stmt 0 discriminator 1
 2370 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2371 001a 022B     		cmp	r3, #2
 2372 001c 0AD1     		bne	.L116
 2373              	.L115:
1286:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1287:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
1288:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Disable the selected interrupts */
1289:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 2374              		.loc 1 1289 0 is_stmt 1
 2375 001e 7B68     		ldr	r3, [r7, #4]
 2376 0020 1B68     		ldr	r3, [r3]
 2377 0022 7A68     		ldr	r2, [r7, #4]
 2378 0024 1268     		ldr	r2, [r2]
 2379 0026 5169     		ldr	r1, [r2, #20]
 2380 0028 3A68     		ldr	r2, [r7]
 2381 002a D243     		mvns	r2, r2
 2382 002c 0A40     		ands	r2, r2, r1
 2383 002e 5A61     		str	r2, [r3, #20]
1290:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1291:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Return function status */
1292:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     return HAL_OK;
 2384              		.loc 1 1292 0
 2385 0030 0023     		movs	r3, #0
 2386 0032 06E0     		b	.L117
 2387              	.L116:
1293:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
1294:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   else
1295:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
1296:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Update error code */
1297:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 2388              		.loc 1 1297 0
 2389 0034 7B68     		ldr	r3, [r7, #4]
 2390 0036 5B6A     		ldr	r3, [r3, #36]
 2391 0038 43F48022 		orr	r2, r3, #262144
 2392 003c 7B68     		ldr	r3, [r7, #4]
 2393 003e 5A62     		str	r2, [r3, #36]
1298:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1299:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     return HAL_ERROR;
 2394              		.loc 1 1299 0
ARM GAS  /tmp/ccm0Y8sw.s 			page 75


 2395 0040 0123     		movs	r3, #1
 2396              	.L117:
1300:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
1301:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 2397              		.loc 1 1301 0
 2398 0042 1846     		mov	r0, r3
 2399 0044 1437     		adds	r7, r7, #20
 2400              	.LCFI107:
 2401              		.cfi_def_cfa_offset 4
 2402 0046 BD46     		mov	sp, r7
 2403              	.LCFI108:
 2404              		.cfi_def_cfa_register 13
 2405              		@ sp needed
 2406 0048 5DF8047B 		ldr	r7, [sp], #4
 2407              	.LCFI109:
 2408              		.cfi_restore 7
 2409              		.cfi_def_cfa_offset 0
 2410 004c 7047     		bx	lr
 2411              		.cfi_endproc
 2412              	.LFE141:
 2414 004e 00BF     		.section	.text.HAL_CAN_IRQHandler,"ax",%progbits
 2415              		.align	2
 2416              		.global	HAL_CAN_IRQHandler
 2417              		.thumb
 2418              		.thumb_func
 2420              	HAL_CAN_IRQHandler:
 2421              	.LFB142:
1302:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1303:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1304:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Handles CAN interrupt request
1305:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1306:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
1307:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval None
1308:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1309:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
1310:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 2422              		.loc 1 1310 0
 2423              		.cfi_startproc
 2424              		@ args = 0, pretend = 0, frame = 40
 2425              		@ frame_needed = 1, uses_anonymous_args = 0
 2426 0000 80B5     		push	{r7, lr}
 2427              	.LCFI110:
 2428              		.cfi_def_cfa_offset 8
 2429              		.cfi_offset 7, -8
 2430              		.cfi_offset 14, -4
 2431 0002 8AB0     		sub	sp, sp, #40
 2432              	.LCFI111:
 2433              		.cfi_def_cfa_offset 48
 2434 0004 00AF     		add	r7, sp, #0
 2435              	.LCFI112:
 2436              		.cfi_def_cfa_register 7
 2437 0006 7860     		str	r0, [r7, #4]
1311:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   uint32_t errorcode = HAL_CAN_ERROR_NONE;
 2438              		.loc 1 1311 0
 2439 0008 0023     		movs	r3, #0
 2440 000a 7B62     		str	r3, [r7, #36]
1312:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   uint32_t interrupts = READ_REG(hcan->Instance->IER);
ARM GAS  /tmp/ccm0Y8sw.s 			page 76


 2441              		.loc 1 1312 0
 2442 000c 7B68     		ldr	r3, [r7, #4]
 2443 000e 1B68     		ldr	r3, [r3]
 2444 0010 5B69     		ldr	r3, [r3, #20]
 2445 0012 3B62     		str	r3, [r7, #32]
1313:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 2446              		.loc 1 1313 0
 2447 0014 7B68     		ldr	r3, [r7, #4]
 2448 0016 1B68     		ldr	r3, [r3]
 2449 0018 5B68     		ldr	r3, [r3, #4]
 2450 001a FB61     		str	r3, [r7, #28]
1314:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 2451              		.loc 1 1314 0
 2452 001c 7B68     		ldr	r3, [r7, #4]
 2453 001e 1B68     		ldr	r3, [r3]
 2454 0020 9B68     		ldr	r3, [r3, #8]
 2455 0022 BB61     		str	r3, [r7, #24]
1315:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 2456              		.loc 1 1315 0
 2457 0024 7B68     		ldr	r3, [r7, #4]
 2458 0026 1B68     		ldr	r3, [r3]
 2459 0028 DB68     		ldr	r3, [r3, #12]
 2460 002a 7B61     		str	r3, [r7, #20]
1316:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 2461              		.loc 1 1316 0
 2462 002c 7B68     		ldr	r3, [r7, #4]
 2463 002e 1B68     		ldr	r3, [r3]
 2464 0030 1B69     		ldr	r3, [r3, #16]
 2465 0032 3B61     		str	r3, [r7, #16]
1317:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 2466              		.loc 1 1317 0
 2467 0034 7B68     		ldr	r3, [r7, #4]
 2468 0036 1B68     		ldr	r3, [r3]
 2469 0038 9B69     		ldr	r3, [r3, #24]
 2470 003a FB60     		str	r3, [r7, #12]
1318:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1319:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Transmit Mailbox empty interrupt management *****************************/
1320:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 2471              		.loc 1 1320 0
 2472 003c 3B6A     		ldr	r3, [r7, #32]
 2473 003e 03F00103 		and	r3, r3, #1
 2474 0042 002B     		cmp	r3, #0
 2475 0044 7CD0     		beq	.L119
1321:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
1322:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Transmit Mailbox 0 management *****************************************/
1323:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 2476              		.loc 1 1323 0
 2477 0046 BB69     		ldr	r3, [r7, #24]
 2478 0048 03F00103 		and	r3, r3, #1
 2479 004c 002B     		cmp	r3, #0
 2480 004e 23D0     		beq	.L120
1324:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1325:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
1326:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 2481              		.loc 1 1326 0
 2482 0050 7B68     		ldr	r3, [r7, #4]
 2483 0052 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccm0Y8sw.s 			page 77


 2484 0054 0122     		movs	r2, #1
 2485 0056 9A60     		str	r2, [r3, #8]
1327:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1328:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 2486              		.loc 1 1328 0
 2487 0058 BB69     		ldr	r3, [r7, #24]
 2488 005a 03F00203 		and	r3, r3, #2
 2489 005e 002B     		cmp	r3, #0
 2490 0060 03D0     		beq	.L121
1329:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       {
1330:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         /* Transmission Mailbox 0 complete callback */
1331:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         /* Call weak (surcharged) callback */
1332:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         HAL_CAN_TxMailbox0CompleteCallback(hcan);
 2491              		.loc 1 1332 0
 2492 0062 7868     		ldr	r0, [r7, #4]
 2493 0064 FFF7FEFF 		bl	HAL_CAN_TxMailbox0CompleteCallback
 2494 0068 16E0     		b	.L120
 2495              	.L121:
1333:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       }
1334:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       else
1335:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       {
1336:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST0) != 0U)
 2496              		.loc 1 1336 0
 2497 006a BB69     		ldr	r3, [r7, #24]
 2498 006c 03F00403 		and	r3, r3, #4
 2499 0070 002B     		cmp	r3, #0
 2500 0072 04D0     		beq	.L122
1337:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         {
1338:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           /* Update error code */
1339:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST0;
 2501              		.loc 1 1339 0
 2502 0074 7B6A     		ldr	r3, [r7, #36]
 2503 0076 43F40063 		orr	r3, r3, #2048
 2504 007a 7B62     		str	r3, [r7, #36]
 2505 007c 0CE0     		b	.L120
 2506              	.L122:
1340:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         }
1341:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 2507              		.loc 1 1341 0
 2508 007e BB69     		ldr	r3, [r7, #24]
 2509 0080 03F00803 		and	r3, r3, #8
 2510 0084 002B     		cmp	r3, #0
 2511 0086 04D0     		beq	.L123
1342:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         {
1343:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           /* Update error code */
1344:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR0;
 2512              		.loc 1 1344 0
 2513 0088 7B6A     		ldr	r3, [r7, #36]
 2514 008a 43F48053 		orr	r3, r3, #4096
 2515 008e 7B62     		str	r3, [r7, #36]
 2516 0090 02E0     		b	.L120
 2517              	.L123:
1345:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         }
1346:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         else
1347:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         {
1348:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           /* Transmission Mailbox 0 abort callback */
1349:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           /* Call weak (surcharged) callback */
ARM GAS  /tmp/ccm0Y8sw.s 			page 78


1350:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           HAL_CAN_TxMailbox0AbortCallback(hcan);
 2518              		.loc 1 1350 0
 2519 0092 7868     		ldr	r0, [r7, #4]
 2520 0094 FFF7FEFF 		bl	HAL_CAN_TxMailbox0AbortCallback
 2521              	.L120:
1351:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         }
1352:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       }
1353:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1354:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1355:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Transmit Mailbox 1 management *****************************************/
1356:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 2522              		.loc 1 1356 0
 2523 0098 BB69     		ldr	r3, [r7, #24]
 2524 009a 03F48073 		and	r3, r3, #256
 2525 009e 002B     		cmp	r3, #0
 2526 00a0 24D0     		beq	.L124
1357:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1358:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
1359:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 2527              		.loc 1 1359 0
 2528 00a2 7B68     		ldr	r3, [r7, #4]
 2529 00a4 1B68     		ldr	r3, [r3]
 2530 00a6 4FF48072 		mov	r2, #256
 2531 00aa 9A60     		str	r2, [r3, #8]
1360:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1361:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 2532              		.loc 1 1361 0
 2533 00ac BB69     		ldr	r3, [r7, #24]
 2534 00ae 03F40073 		and	r3, r3, #512
 2535 00b2 002B     		cmp	r3, #0
 2536 00b4 03D0     		beq	.L125
1362:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       {
1363:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         /* Transmission Mailbox 1 complete callback */
1364:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         /* Call weak (surcharged) callback */
1365:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         HAL_CAN_TxMailbox1CompleteCallback(hcan);
 2537              		.loc 1 1365 0
 2538 00b6 7868     		ldr	r0, [r7, #4]
 2539 00b8 FFF7FEFF 		bl	HAL_CAN_TxMailbox1CompleteCallback
 2540 00bc 16E0     		b	.L124
 2541              	.L125:
1366:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       }
1367:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       else
1368:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       {
1369:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST1) != 0U)
 2542              		.loc 1 1369 0
 2543 00be BB69     		ldr	r3, [r7, #24]
 2544 00c0 03F48063 		and	r3, r3, #1024
 2545 00c4 002B     		cmp	r3, #0
 2546 00c6 04D0     		beq	.L126
1370:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         {
1371:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           /* Update error code */
1372:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST1;
 2547              		.loc 1 1372 0
 2548 00c8 7B6A     		ldr	r3, [r7, #36]
 2549 00ca 43F40053 		orr	r3, r3, #8192
 2550 00ce 7B62     		str	r3, [r7, #36]
 2551 00d0 0CE0     		b	.L124
ARM GAS  /tmp/ccm0Y8sw.s 			page 79


 2552              	.L126:
1373:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         }
1374:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 2553              		.loc 1 1374 0
 2554 00d2 BB69     		ldr	r3, [r7, #24]
 2555 00d4 03F40063 		and	r3, r3, #2048
 2556 00d8 002B     		cmp	r3, #0
 2557 00da 04D0     		beq	.L127
1375:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         {
1376:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           /* Update error code */
1377:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR1;
 2558              		.loc 1 1377 0
 2559 00dc 7B6A     		ldr	r3, [r7, #36]
 2560 00de 43F48043 		orr	r3, r3, #16384
 2561 00e2 7B62     		str	r3, [r7, #36]
 2562 00e4 02E0     		b	.L124
 2563              	.L127:
1378:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         }
1379:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         else
1380:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         {
1381:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           /* Transmission Mailbox 1 abort callback */
1382:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           /* Call weak (surcharged) callback */
1383:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           HAL_CAN_TxMailbox1AbortCallback(hcan);
 2564              		.loc 1 1383 0
 2565 00e6 7868     		ldr	r0, [r7, #4]
 2566 00e8 FFF7FEFF 		bl	HAL_CAN_TxMailbox1AbortCallback
 2567              	.L124:
1384:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         }
1385:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       }
1386:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1387:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1388:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Transmit Mailbox 2 management *****************************************/
1389:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 2568              		.loc 1 1389 0
 2569 00ec BB69     		ldr	r3, [r7, #24]
 2570 00ee 03F48033 		and	r3, r3, #65536
 2571 00f2 002B     		cmp	r3, #0
 2572 00f4 24D0     		beq	.L119
1390:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1391:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
1392:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 2573              		.loc 1 1392 0
 2574 00f6 7B68     		ldr	r3, [r7, #4]
 2575 00f8 1B68     		ldr	r3, [r3]
 2576 00fa 4FF48032 		mov	r2, #65536
 2577 00fe 9A60     		str	r2, [r3, #8]
1393:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1394:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 2578              		.loc 1 1394 0
 2579 0100 BB69     		ldr	r3, [r7, #24]
 2580 0102 03F40033 		and	r3, r3, #131072
 2581 0106 002B     		cmp	r3, #0
 2582 0108 03D0     		beq	.L128
1395:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       {
1396:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         /* Transmission Mailbox 2 complete callback */
1397:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         /* Call weak (surcharged) callback */
1398:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         HAL_CAN_TxMailbox2CompleteCallback(hcan);
ARM GAS  /tmp/ccm0Y8sw.s 			page 80


 2583              		.loc 1 1398 0
 2584 010a 7868     		ldr	r0, [r7, #4]
 2585 010c FFF7FEFF 		bl	HAL_CAN_TxMailbox2CompleteCallback
 2586 0110 16E0     		b	.L119
 2587              	.L128:
1399:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       }
1400:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       else
1401:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       {
1402:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         if ((tsrflags & CAN_TSR_ALST2) != 0U)
 2588              		.loc 1 1402 0
 2589 0112 BB69     		ldr	r3, [r7, #24]
 2590 0114 03F48023 		and	r3, r3, #262144
 2591 0118 002B     		cmp	r3, #0
 2592 011a 04D0     		beq	.L129
1403:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         {
1404:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           /* Update error code */
1405:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_ALST2;
 2593              		.loc 1 1405 0
 2594 011c 7B6A     		ldr	r3, [r7, #36]
 2595 011e 43F40043 		orr	r3, r3, #32768
 2596 0122 7B62     		str	r3, [r7, #36]
 2597 0124 0CE0     		b	.L119
 2598              	.L129:
1406:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         }
1407:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 2599              		.loc 1 1407 0
 2600 0126 BB69     		ldr	r3, [r7, #24]
 2601 0128 03F40023 		and	r3, r3, #524288
 2602 012c 002B     		cmp	r3, #0
 2603 012e 04D0     		beq	.L130
1408:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         {
1409:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           /* Update error code */
1410:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           errorcode |= HAL_CAN_ERROR_TX_TERR2;
 2604              		.loc 1 1410 0
 2605 0130 7B6A     		ldr	r3, [r7, #36]
 2606 0132 43F48033 		orr	r3, r3, #65536
 2607 0136 7B62     		str	r3, [r7, #36]
 2608 0138 02E0     		b	.L119
 2609              	.L130:
1411:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         }
1412:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         else
1413:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         {
1414:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           /* Transmission Mailbox 2 abort callback */
1415:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           /* Call weak (surcharged) callback */
1416:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           HAL_CAN_TxMailbox2AbortCallback(hcan);
 2610              		.loc 1 1416 0
 2611 013a 7868     		ldr	r0, [r7, #4]
 2612 013c FFF7FEFF 		bl	HAL_CAN_TxMailbox2AbortCallback
 2613              	.L119:
1417:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         }
1418:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       }
1419:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1420:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
1421:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1422:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Receive FIFO 0 overrun interrupt management *****************************/
1423:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 2614              		.loc 1 1423 0
ARM GAS  /tmp/ccm0Y8sw.s 			page 81


 2615 0140 3B6A     		ldr	r3, [r7, #32]
 2616 0142 03F00803 		and	r3, r3, #8
 2617 0146 002B     		cmp	r3, #0
 2618 0148 0CD0     		beq	.L131
1424:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
1425:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 2619              		.loc 1 1425 0
 2620 014a 7B69     		ldr	r3, [r7, #20]
 2621 014c 03F01003 		and	r3, r3, #16
 2622 0150 002B     		cmp	r3, #0
 2623 0152 07D0     		beq	.L131
1426:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1427:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 0 overrun error */
1428:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV0;
 2624              		.loc 1 1428 0
 2625 0154 7B6A     		ldr	r3, [r7, #36]
 2626 0156 43F40073 		orr	r3, r3, #512
 2627 015a 7B62     		str	r3, [r7, #36]
1429:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1430:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Clear FIFO0 Overrun Flag */
1431:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 2628              		.loc 1 1431 0
 2629 015c 7B68     		ldr	r3, [r7, #4]
 2630 015e 1B68     		ldr	r3, [r3]
 2631 0160 1022     		movs	r2, #16
 2632 0162 DA60     		str	r2, [r3, #12]
 2633              	.L131:
1432:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1433:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
1434:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1435:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Receive FIFO 0 full interrupt management ********************************/
1436:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 2634              		.loc 1 1436 0
 2635 0164 3B6A     		ldr	r3, [r7, #32]
 2636 0166 03F00403 		and	r3, r3, #4
 2637 016a 002B     		cmp	r3, #0
 2638 016c 0BD0     		beq	.L132
1437:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
1438:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 2639              		.loc 1 1438 0
 2640 016e 7B69     		ldr	r3, [r7, #20]
 2641 0170 03F00803 		and	r3, r3, #8
 2642 0174 002B     		cmp	r3, #0
 2643 0176 06D0     		beq	.L132
1439:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1440:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Clear FIFO 0 full Flag */
1441:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 2644              		.loc 1 1441 0
 2645 0178 7B68     		ldr	r3, [r7, #4]
 2646 017a 1B68     		ldr	r3, [r3]
 2647 017c 0822     		movs	r2, #8
 2648 017e DA60     		str	r2, [r3, #12]
1442:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1443:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Receive FIFO 0 full Callback */
1444:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Call weak (surcharged) callback */
1445:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       HAL_CAN_RxFifo0FullCallback(hcan);
 2649              		.loc 1 1445 0
ARM GAS  /tmp/ccm0Y8sw.s 			page 82


 2650 0180 7868     		ldr	r0, [r7, #4]
 2651 0182 FFF7FEFF 		bl	HAL_CAN_RxFifo0FullCallback
 2652              	.L132:
1446:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1447:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
1448:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1449:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Receive FIFO 0 message pending interrupt management *********************/
1450:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 2653              		.loc 1 1450 0
 2654 0186 3B6A     		ldr	r3, [r7, #32]
 2655 0188 03F00203 		and	r3, r3, #2
 2656 018c 002B     		cmp	r3, #0
 2657 018e 09D0     		beq	.L133
1451:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
1452:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Check if message is still pending */
1453:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 2658              		.loc 1 1453 0
 2659 0190 7B68     		ldr	r3, [r7, #4]
 2660 0192 1B68     		ldr	r3, [r3]
 2661 0194 DB68     		ldr	r3, [r3, #12]
 2662 0196 03F00303 		and	r3, r3, #3
 2663 019a 002B     		cmp	r3, #0
 2664 019c 02D0     		beq	.L133
1454:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1455:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Receive FIFO 0 mesage pending Callback */
1456:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Call weak (surcharged) callback */
1457:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 2665              		.loc 1 1457 0
 2666 019e 7868     		ldr	r0, [r7, #4]
 2667 01a0 FFF7FEFF 		bl	HAL_CAN_RxFifo0MsgPendingCallback
 2668              	.L133:
1458:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1459:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
1460:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1461:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Receive FIFO 1 overrun interrupt management *****************************/
1462:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 2669              		.loc 1 1462 0
 2670 01a4 3B6A     		ldr	r3, [r7, #32]
 2671 01a6 03F04003 		and	r3, r3, #64
 2672 01aa 002B     		cmp	r3, #0
 2673 01ac 0CD0     		beq	.L134
1463:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
1464:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 2674              		.loc 1 1464 0
 2675 01ae 3B69     		ldr	r3, [r7, #16]
 2676 01b0 03F01003 		and	r3, r3, #16
 2677 01b4 002B     		cmp	r3, #0
 2678 01b6 07D0     		beq	.L134
1465:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1466:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Set CAN error code to Rx Fifo 1 overrun error */
1467:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       errorcode |= HAL_CAN_ERROR_RX_FOV1;
 2679              		.loc 1 1467 0
 2680 01b8 7B6A     		ldr	r3, [r7, #36]
 2681 01ba 43F48063 		orr	r3, r3, #1024
 2682 01be 7B62     		str	r3, [r7, #36]
1468:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1469:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Clear FIFO1 Overrun Flag */
ARM GAS  /tmp/ccm0Y8sw.s 			page 83


1470:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 2683              		.loc 1 1470 0
 2684 01c0 7B68     		ldr	r3, [r7, #4]
 2685 01c2 1B68     		ldr	r3, [r3]
 2686 01c4 1022     		movs	r2, #16
 2687 01c6 1A61     		str	r2, [r3, #16]
 2688              	.L134:
1471:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1472:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
1473:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1474:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Receive FIFO 1 full interrupt management ********************************/
1475:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 2689              		.loc 1 1475 0
 2690 01c8 3B6A     		ldr	r3, [r7, #32]
 2691 01ca 03F02003 		and	r3, r3, #32
 2692 01ce 002B     		cmp	r3, #0
 2693 01d0 0BD0     		beq	.L135
1476:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
1477:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 2694              		.loc 1 1477 0
 2695 01d2 3B69     		ldr	r3, [r7, #16]
 2696 01d4 03F00803 		and	r3, r3, #8
 2697 01d8 002B     		cmp	r3, #0
 2698 01da 06D0     		beq	.L135
1478:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1479:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Clear FIFO 1 full Flag */
1480:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 2699              		.loc 1 1480 0
 2700 01dc 7B68     		ldr	r3, [r7, #4]
 2701 01de 1B68     		ldr	r3, [r3]
 2702 01e0 0822     		movs	r2, #8
 2703 01e2 1A61     		str	r2, [r3, #16]
1481:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1482:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Receive FIFO 1 full Callback */
1483:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Call weak (surcharged) callback */
1484:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       HAL_CAN_RxFifo1FullCallback(hcan);
 2704              		.loc 1 1484 0
 2705 01e4 7868     		ldr	r0, [r7, #4]
 2706 01e6 FFF7FEFF 		bl	HAL_CAN_RxFifo1FullCallback
 2707              	.L135:
1485:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1486:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
1487:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1488:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Receive FIFO 1 message pending interrupt management *********************/
1489:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 2708              		.loc 1 1489 0
 2709 01ea 3B6A     		ldr	r3, [r7, #32]
 2710 01ec 03F01003 		and	r3, r3, #16
 2711 01f0 002B     		cmp	r3, #0
 2712 01f2 09D0     		beq	.L136
1490:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
1491:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Check if message is still pending */
1492:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 2713              		.loc 1 1492 0
 2714 01f4 7B68     		ldr	r3, [r7, #4]
 2715 01f6 1B68     		ldr	r3, [r3]
 2716 01f8 1B69     		ldr	r3, [r3, #16]
ARM GAS  /tmp/ccm0Y8sw.s 			page 84


 2717 01fa 03F00303 		and	r3, r3, #3
 2718 01fe 002B     		cmp	r3, #0
 2719 0200 02D0     		beq	.L136
1493:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1494:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Receive FIFO 1 mesage pending Callback */
1495:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Call weak (surcharged) callback */
1496:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 2720              		.loc 1 1496 0
 2721 0202 7868     		ldr	r0, [r7, #4]
 2722 0204 FFF7FEFF 		bl	HAL_CAN_RxFifo1MsgPendingCallback
 2723              	.L136:
1497:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1498:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
1499:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1500:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Sleep interrupt management *********************************************/
1501:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 2724              		.loc 1 1501 0
 2725 0208 3B6A     		ldr	r3, [r7, #32]
 2726 020a 03F40033 		and	r3, r3, #131072
 2727 020e 002B     		cmp	r3, #0
 2728 0210 0BD0     		beq	.L137
1502:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
1503:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if ((msrflags & CAN_MSR_SLAKI) != 0U)
 2729              		.loc 1 1503 0
 2730 0212 FB69     		ldr	r3, [r7, #28]
 2731 0214 03F01003 		and	r3, r3, #16
 2732 0218 002B     		cmp	r3, #0
 2733 021a 06D0     		beq	.L137
1504:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1505:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Clear Sleep interrupt Flag */
1506:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 2734              		.loc 1 1506 0
 2735 021c 7B68     		ldr	r3, [r7, #4]
 2736 021e 1B68     		ldr	r3, [r3]
 2737 0220 1022     		movs	r2, #16
 2738 0222 5A60     		str	r2, [r3, #4]
1507:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1508:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Sleep Callback */
1509:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Call weak (surcharged) callback */
1510:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       HAL_CAN_SleepCallback(hcan);
 2739              		.loc 1 1510 0
 2740 0224 7868     		ldr	r0, [r7, #4]
 2741 0226 FFF7FEFF 		bl	HAL_CAN_SleepCallback
 2742              	.L137:
1511:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1512:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
1513:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1514:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* WakeUp interrupt management *********************************************/
1515:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if ((interrupts & CAN_IT_WAKEUP) != 0U)
 2743              		.loc 1 1515 0
 2744 022a 3B6A     		ldr	r3, [r7, #32]
 2745 022c 03F48033 		and	r3, r3, #65536
 2746 0230 002B     		cmp	r3, #0
 2747 0232 0BD0     		beq	.L138
1516:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
1517:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if ((msrflags & CAN_MSR_WKUI) != 0U)
 2748              		.loc 1 1517 0
ARM GAS  /tmp/ccm0Y8sw.s 			page 85


 2749 0234 FB69     		ldr	r3, [r7, #28]
 2750 0236 03F00803 		and	r3, r3, #8
 2751 023a 002B     		cmp	r3, #0
 2752 023c 06D0     		beq	.L138
1518:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1519:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Clear WakeUp Flag */
1520:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 2753              		.loc 1 1520 0
 2754 023e 7B68     		ldr	r3, [r7, #4]
 2755 0240 1B68     		ldr	r3, [r3]
 2756 0242 0822     		movs	r2, #8
 2757 0244 5A60     		str	r2, [r3, #4]
1521:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1522:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* WakeUp Callback */
1523:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Call weak (surcharged) callback */
1524:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 2758              		.loc 1 1524 0
 2759 0246 7868     		ldr	r0, [r7, #4]
 2760 0248 FFF7FEFF 		bl	HAL_CAN_WakeUpFromRxMsgCallback
 2761              	.L138:
1525:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1526:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
1527:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1528:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Error interrupts management *********************************************/
1529:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if ((interrupts & CAN_IT_ERROR) != 0U)
 2762              		.loc 1 1529 0
 2763 024c 3B6A     		ldr	r3, [r7, #32]
 2764 024e 03F40043 		and	r3, r3, #32768
 2765 0252 002B     		cmp	r3, #0
 2766 0254 75D0     		beq	.L139
1530:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
1531:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if ((msrflags & CAN_MSR_ERRI) != 0U)
 2767              		.loc 1 1531 0
 2768 0256 FB69     		ldr	r3, [r7, #28]
 2769 0258 03F00403 		and	r3, r3, #4
 2770 025c 002B     		cmp	r3, #0
 2771 025e 6CD0     		beq	.L140
1532:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1533:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Check Error Warning Flag */
1534:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 2772              		.loc 1 1534 0
 2773 0260 3B6A     		ldr	r3, [r7, #32]
 2774 0262 03F48073 		and	r3, r3, #256
 2775 0266 002B     		cmp	r3, #0
 2776 0268 08D0     		beq	.L141
1535:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 2777              		.loc 1 1535 0 discriminator 1
 2778 026a FB68     		ldr	r3, [r7, #12]
 2779 026c 03F00103 		and	r3, r3, #1
1534:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           ((esrflags & CAN_ESR_EWGF) != 0U))
 2780              		.loc 1 1534 0 discriminator 1
 2781 0270 002B     		cmp	r3, #0
 2782 0272 03D0     		beq	.L141
1536:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       {
1537:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         /* Set CAN error code to Error Warning */
1538:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EWG;
 2783              		.loc 1 1538 0
ARM GAS  /tmp/ccm0Y8sw.s 			page 86


 2784 0274 7B6A     		ldr	r3, [r7, #36]
 2785 0276 43F00103 		orr	r3, r3, #1
 2786 027a 7B62     		str	r3, [r7, #36]
 2787              	.L141:
1539:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1540:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         /* No need for clear of Error Warning Flag as read-only */
1541:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       }
1542:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1543:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Check Error Passive Flag */
1544:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 2788              		.loc 1 1544 0
 2789 027c 3B6A     		ldr	r3, [r7, #32]
 2790 027e 03F40073 		and	r3, r3, #512
 2791 0282 002B     		cmp	r3, #0
 2792 0284 08D0     		beq	.L142
1545:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 2793              		.loc 1 1545 0 discriminator 1
 2794 0286 FB68     		ldr	r3, [r7, #12]
 2795 0288 03F00203 		and	r3, r3, #2
1544:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           ((esrflags & CAN_ESR_EPVF) != 0U))
 2796              		.loc 1 1544 0 discriminator 1
 2797 028c 002B     		cmp	r3, #0
 2798 028e 03D0     		beq	.L142
1546:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       {
1547:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         /* Set CAN error code to Error Passive */
1548:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_EPV;
 2799              		.loc 1 1548 0
 2800 0290 7B6A     		ldr	r3, [r7, #36]
 2801 0292 43F00203 		orr	r3, r3, #2
 2802 0296 7B62     		str	r3, [r7, #36]
 2803              	.L142:
1549:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1550:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         /* No need for clear of Error Passive Flag as read-only */
1551:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       }
1552:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1553:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Check Bus-off Flag */
1554:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 2804              		.loc 1 1554 0
 2805 0298 3B6A     		ldr	r3, [r7, #32]
 2806 029a 03F48063 		and	r3, r3, #1024
 2807 029e 002B     		cmp	r3, #0
 2808 02a0 08D0     		beq	.L143
1555:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2809              		.loc 1 1555 0 discriminator 1
 2810 02a2 FB68     		ldr	r3, [r7, #12]
 2811 02a4 03F00403 		and	r3, r3, #4
1554:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           ((esrflags & CAN_ESR_BOFF) != 0U))
 2812              		.loc 1 1554 0 discriminator 1
 2813 02a8 002B     		cmp	r3, #0
 2814 02aa 03D0     		beq	.L143
1556:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       {
1557:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         /* Set CAN error code to Bus-Off */
1558:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         errorcode |= HAL_CAN_ERROR_BOF;
 2815              		.loc 1 1558 0
 2816 02ac 7B6A     		ldr	r3, [r7, #36]
 2817 02ae 43F00403 		orr	r3, r3, #4
 2818 02b2 7B62     		str	r3, [r7, #36]
ARM GAS  /tmp/ccm0Y8sw.s 			page 87


 2819              	.L143:
1559:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1560:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         /* No need for clear of Error Bus-Off as read-only */
1561:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       }
1562:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1563:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Check Last Error Code Flag */
1564:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 2820              		.loc 1 1564 0
 2821 02b4 3B6A     		ldr	r3, [r7, #32]
 2822 02b6 03F40063 		and	r3, r3, #2048
 2823 02ba 002B     		cmp	r3, #0
 2824 02bc 3DD0     		beq	.L140
1565:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2825              		.loc 1 1565 0 discriminator 1
 2826 02be FB68     		ldr	r3, [r7, #12]
 2827 02c0 03F07003 		and	r3, r3, #112
1564:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           ((esrflags & CAN_ESR_LEC) != 0U))
 2828              		.loc 1 1564 0 discriminator 1
 2829 02c4 002B     		cmp	r3, #0
 2830 02c6 38D0     		beq	.L140
1566:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       {
1567:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         switch (esrflags & CAN_ESR_LEC)
 2831              		.loc 1 1567 0
 2832 02c8 FB68     		ldr	r3, [r7, #12]
 2833 02ca 03F07003 		and	r3, r3, #112
 2834 02ce 302B     		cmp	r3, #48
 2835 02d0 17D0     		beq	.L145
 2836 02d2 302B     		cmp	r3, #48
 2837 02d4 04D8     		bhi	.L146
 2838 02d6 102B     		cmp	r3, #16
 2839 02d8 09D0     		beq	.L147
 2840 02da 202B     		cmp	r3, #32
 2841 02dc 0CD0     		beq	.L148
1568:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         {
1569:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           case (CAN_ESR_LEC_0):
1570:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             /* Set CAN error code to Stuff error */
1571:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_STF;
1572:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             break;
1573:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           case (CAN_ESR_LEC_1):
1574:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             /* Set CAN error code to Form error */
1575:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_FOR;
1576:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             break;
1577:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
1578:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             /* Set CAN error code to Acknowledgement error */
1579:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_ACK;
1580:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             break;
1581:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           case (CAN_ESR_LEC_2):
1582:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             /* Set CAN error code to Bit recessive error */
1583:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BR;
1584:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             break;
1585:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
1586:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             /* Set CAN error code to Bit Dominant error */
1587:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_BD;
1588:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             break;
1589:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
1590:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             /* Set CAN error code to CRC error */
1591:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             errorcode |= HAL_CAN_ERROR_CRC;
ARM GAS  /tmp/ccm0Y8sw.s 			page 88


1592:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             break;
1593:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           default:
1594:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             break;
 2842              		.loc 1 1594 0
 2843 02de 24E0     		b	.L152
 2844              	.L146:
1567:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         {
 2845              		.loc 1 1567 0
 2846 02e0 502B     		cmp	r3, #80
 2847 02e2 18D0     		beq	.L149
 2848 02e4 602B     		cmp	r3, #96
 2849 02e6 1BD0     		beq	.L150
 2850 02e8 402B     		cmp	r3, #64
 2851 02ea 0FD0     		beq	.L151
 2852              		.loc 1 1594 0
 2853 02ec 1DE0     		b	.L152
 2854              	.L147:
1571:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             break;
 2855              		.loc 1 1571 0
 2856 02ee 7B6A     		ldr	r3, [r7, #36]
 2857 02f0 43F00803 		orr	r3, r3, #8
 2858 02f4 7B62     		str	r3, [r7, #36]
1572:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           case (CAN_ESR_LEC_1):
 2859              		.loc 1 1572 0
 2860 02f6 18E0     		b	.L152
 2861              	.L148:
1575:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             break;
 2862              		.loc 1 1575 0
 2863 02f8 7B6A     		ldr	r3, [r7, #36]
 2864 02fa 43F01003 		orr	r3, r3, #16
 2865 02fe 7B62     		str	r3, [r7, #36]
1576:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           case (CAN_ESR_LEC_1 | CAN_ESR_LEC_0):
 2866              		.loc 1 1576 0
 2867 0300 13E0     		b	.L152
 2868              	.L145:
1579:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             break;
 2869              		.loc 1 1579 0
 2870 0302 7B6A     		ldr	r3, [r7, #36]
 2871 0304 43F02003 		orr	r3, r3, #32
 2872 0308 7B62     		str	r3, [r7, #36]
1580:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           case (CAN_ESR_LEC_2):
 2873              		.loc 1 1580 0
 2874 030a 0EE0     		b	.L152
 2875              	.L151:
1583:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             break;
 2876              		.loc 1 1583 0
 2877 030c 7B6A     		ldr	r3, [r7, #36]
 2878 030e 43F04003 		orr	r3, r3, #64
 2879 0312 7B62     		str	r3, [r7, #36]
1584:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_0):
 2880              		.loc 1 1584 0
 2881 0314 09E0     		b	.L152
 2882              	.L149:
1587:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             break;
 2883              		.loc 1 1587 0
 2884 0316 7B6A     		ldr	r3, [r7, #36]
 2885 0318 43F08003 		orr	r3, r3, #128
ARM GAS  /tmp/ccm0Y8sw.s 			page 89


 2886 031c 7B62     		str	r3, [r7, #36]
1588:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
 2887              		.loc 1 1588 0
 2888 031e 04E0     		b	.L152
 2889              	.L150:
1591:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             break;
 2890              		.loc 1 1591 0
 2891 0320 7B6A     		ldr	r3, [r7, #36]
 2892 0322 43F48073 		orr	r3, r3, #256
 2893 0326 7B62     		str	r3, [r7, #36]
1592:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****           default:
 2894              		.loc 1 1592 0
 2895 0328 00BF     		nop
 2896              	.L152:
1595:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         }
1596:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1597:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         /* Clear Last error code Flag */
1598:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****         CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 2897              		.loc 1 1598 0
 2898 032a 7B68     		ldr	r3, [r7, #4]
 2899 032c 1B68     		ldr	r3, [r3]
 2900 032e 7A68     		ldr	r2, [r7, #4]
 2901 0330 1268     		ldr	r2, [r2]
 2902 0332 9269     		ldr	r2, [r2, #24]
 2903 0334 22F07002 		bic	r2, r2, #112
 2904 0338 9A61     		str	r2, [r3, #24]
 2905              	.L140:
1599:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       }
1600:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1601:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1602:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Clear ERRI Flag */
1603:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 2906              		.loc 1 1603 0
 2907 033a 7B68     		ldr	r3, [r7, #4]
 2908 033c 1B68     		ldr	r3, [r3]
 2909 033e 0422     		movs	r2, #4
 2910 0340 5A60     		str	r2, [r3, #4]
 2911              	.L139:
1604:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
1605:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1606:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Call the Error call Back in case of Errors */
1607:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if (errorcode != HAL_CAN_ERROR_NONE)
 2912              		.loc 1 1607 0
 2913 0342 7B6A     		ldr	r3, [r7, #36]
 2914 0344 002B     		cmp	r3, #0
 2915 0346 08D0     		beq	.L118
1608:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
1609:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Update error code in handle */
1610:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     hcan->ErrorCode |= errorcode;
 2916              		.loc 1 1610 0
 2917 0348 7B68     		ldr	r3, [r7, #4]
 2918 034a 5A6A     		ldr	r2, [r3, #36]
 2919 034c 7B6A     		ldr	r3, [r7, #36]
 2920 034e 1A43     		orrs	r2, r2, r3
 2921 0350 7B68     		ldr	r3, [r7, #4]
 2922 0352 5A62     		str	r2, [r3, #36]
1611:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
ARM GAS  /tmp/ccm0Y8sw.s 			page 90


1612:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Call Error callback function */
1613:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Call weak (surcharged) callback */
1614:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     HAL_CAN_ErrorCallback(hcan);
 2923              		.loc 1 1614 0
 2924 0354 7868     		ldr	r0, [r7, #4]
 2925 0356 FFF7FEFF 		bl	HAL_CAN_ErrorCallback
 2926              	.L118:
1615:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
1616:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 2927              		.loc 1 1616 0
 2928 035a 2837     		adds	r7, r7, #40
 2929              	.LCFI113:
 2930              		.cfi_def_cfa_offset 8
 2931 035c BD46     		mov	sp, r7
 2932              	.LCFI114:
 2933              		.cfi_def_cfa_register 13
 2934              		@ sp needed
 2935 035e 80BD     		pop	{r7, pc}
 2936              		.cfi_endproc
 2937              	.LFE142:
 2939              		.section	.text.HAL_CAN_TxMailbox0CompleteCallback,"ax",%progbits
 2940              		.align	2
 2941              		.weak	HAL_CAN_TxMailbox0CompleteCallback
 2942              		.thumb
 2943              		.thumb_func
 2945              	HAL_CAN_TxMailbox0CompleteCallback:
 2946              	.LFB143:
1617:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1618:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1619:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @}
1620:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1621:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1622:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group5 Callback functions
1623:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****  *  @brief   CAN Callback functions
1624:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****  *
1625:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** @verbatim
1626:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   ==============================================================================
1627:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****                           ##### Callback functions #####
1628:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   ==============================================================================
1629:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     [..]
1630:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     This subsection provides the following callback functions:
1631:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0CompleteCallback
1632:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1CompleteCallback
1633:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2CompleteCallback
1634:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_TxMailbox0AbortCallback
1635:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_TxMailbox1AbortCallback
1636:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_TxMailbox2AbortCallback
1637:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_RxFifo0MsgPendingCallback
1638:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_RxFifo0FullCallback
1639:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_RxFifo1MsgPendingCallback
1640:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_RxFifo1FullCallback
1641:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_SleepCallback
1642:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_WakeUpFromRxMsgCallback
1643:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_ErrorCallback
1644:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1645:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** @endverbatim
1646:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @{
ARM GAS  /tmp/ccm0Y8sw.s 			page 91


1647:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1648:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1649:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1650:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Transmission Mailbox 0 complete callback.
1651:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1652:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
1653:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval None
1654:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1655:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
1656:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 2947              		.loc 1 1656 0
 2948              		.cfi_startproc
 2949              		@ args = 0, pretend = 0, frame = 8
 2950              		@ frame_needed = 1, uses_anonymous_args = 0
 2951              		@ link register save eliminated.
 2952 0000 80B4     		push	{r7}
 2953              	.LCFI115:
 2954              		.cfi_def_cfa_offset 4
 2955              		.cfi_offset 7, -4
 2956 0002 83B0     		sub	sp, sp, #12
 2957              	.LCFI116:
 2958              		.cfi_def_cfa_offset 16
 2959 0004 00AF     		add	r7, sp, #0
 2960              	.LCFI117:
 2961              		.cfi_def_cfa_register 7
 2962 0006 7860     		str	r0, [r7, #4]
1657:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1658:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   UNUSED(hcan);
1659:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1660:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1661:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
1662:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             user file
1663:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****    */
1664:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 2963              		.loc 1 1664 0
 2964 0008 0C37     		adds	r7, r7, #12
 2965              	.LCFI118:
 2966              		.cfi_def_cfa_offset 4
 2967 000a BD46     		mov	sp, r7
 2968              	.LCFI119:
 2969              		.cfi_def_cfa_register 13
 2970              		@ sp needed
 2971 000c 5DF8047B 		ldr	r7, [sp], #4
 2972              	.LCFI120:
 2973              		.cfi_restore 7
 2974              		.cfi_def_cfa_offset 0
 2975 0010 7047     		bx	lr
 2976              		.cfi_endproc
 2977              	.LFE143:
 2979 0012 00BF     		.section	.text.HAL_CAN_TxMailbox1CompleteCallback,"ax",%progbits
 2980              		.align	2
 2981              		.weak	HAL_CAN_TxMailbox1CompleteCallback
 2982              		.thumb
 2983              		.thumb_func
 2985              	HAL_CAN_TxMailbox1CompleteCallback:
 2986              	.LFB144:
1665:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
ARM GAS  /tmp/ccm0Y8sw.s 			page 92


1666:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1667:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Transmission Mailbox 1 complete callback.
1668:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1669:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
1670:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval None
1671:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1672:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
1673:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 2987              		.loc 1 1673 0
 2988              		.cfi_startproc
 2989              		@ args = 0, pretend = 0, frame = 8
 2990              		@ frame_needed = 1, uses_anonymous_args = 0
 2991              		@ link register save eliminated.
 2992 0000 80B4     		push	{r7}
 2993              	.LCFI121:
 2994              		.cfi_def_cfa_offset 4
 2995              		.cfi_offset 7, -4
 2996 0002 83B0     		sub	sp, sp, #12
 2997              	.LCFI122:
 2998              		.cfi_def_cfa_offset 16
 2999 0004 00AF     		add	r7, sp, #0
 3000              	.LCFI123:
 3001              		.cfi_def_cfa_register 7
 3002 0006 7860     		str	r0, [r7, #4]
1674:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1675:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   UNUSED(hcan);
1676:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1677:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1678:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
1679:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             user file
1680:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****    */
1681:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 3003              		.loc 1 1681 0
 3004 0008 0C37     		adds	r7, r7, #12
 3005              	.LCFI124:
 3006              		.cfi_def_cfa_offset 4
 3007 000a BD46     		mov	sp, r7
 3008              	.LCFI125:
 3009              		.cfi_def_cfa_register 13
 3010              		@ sp needed
 3011 000c 5DF8047B 		ldr	r7, [sp], #4
 3012              	.LCFI126:
 3013              		.cfi_restore 7
 3014              		.cfi_def_cfa_offset 0
 3015 0010 7047     		bx	lr
 3016              		.cfi_endproc
 3017              	.LFE144:
 3019 0012 00BF     		.section	.text.HAL_CAN_TxMailbox2CompleteCallback,"ax",%progbits
 3020              		.align	2
 3021              		.weak	HAL_CAN_TxMailbox2CompleteCallback
 3022              		.thumb
 3023              		.thumb_func
 3025              	HAL_CAN_TxMailbox2CompleteCallback:
 3026              	.LFB145:
1682:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1683:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1684:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Transmission Mailbox 2 complete callback.
ARM GAS  /tmp/ccm0Y8sw.s 			page 93


1685:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1686:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
1687:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval None
1688:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1689:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
1690:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 3027              		.loc 1 1690 0
 3028              		.cfi_startproc
 3029              		@ args = 0, pretend = 0, frame = 8
 3030              		@ frame_needed = 1, uses_anonymous_args = 0
 3031              		@ link register save eliminated.
 3032 0000 80B4     		push	{r7}
 3033              	.LCFI127:
 3034              		.cfi_def_cfa_offset 4
 3035              		.cfi_offset 7, -4
 3036 0002 83B0     		sub	sp, sp, #12
 3037              	.LCFI128:
 3038              		.cfi_def_cfa_offset 16
 3039 0004 00AF     		add	r7, sp, #0
 3040              	.LCFI129:
 3041              		.cfi_def_cfa_register 7
 3042 0006 7860     		str	r0, [r7, #4]
1691:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1692:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   UNUSED(hcan);
1693:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1694:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1695:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
1696:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             user file
1697:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****    */
1698:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 3043              		.loc 1 1698 0
 3044 0008 0C37     		adds	r7, r7, #12
 3045              	.LCFI130:
 3046              		.cfi_def_cfa_offset 4
 3047 000a BD46     		mov	sp, r7
 3048              	.LCFI131:
 3049              		.cfi_def_cfa_register 13
 3050              		@ sp needed
 3051 000c 5DF8047B 		ldr	r7, [sp], #4
 3052              	.LCFI132:
 3053              		.cfi_restore 7
 3054              		.cfi_def_cfa_offset 0
 3055 0010 7047     		bx	lr
 3056              		.cfi_endproc
 3057              	.LFE145:
 3059 0012 00BF     		.section	.text.HAL_CAN_TxMailbox0AbortCallback,"ax",%progbits
 3060              		.align	2
 3061              		.weak	HAL_CAN_TxMailbox0AbortCallback
 3062              		.thumb
 3063              		.thumb_func
 3065              	HAL_CAN_TxMailbox0AbortCallback:
 3066              	.LFB146:
1699:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1700:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1701:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Transmission Mailbox 0 Cancellation callback.
1702:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1703:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
ARM GAS  /tmp/ccm0Y8sw.s 			page 94


1704:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval None
1705:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1706:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** __weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
1707:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 3067              		.loc 1 1707 0
 3068              		.cfi_startproc
 3069              		@ args = 0, pretend = 0, frame = 8
 3070              		@ frame_needed = 1, uses_anonymous_args = 0
 3071              		@ link register save eliminated.
 3072 0000 80B4     		push	{r7}
 3073              	.LCFI133:
 3074              		.cfi_def_cfa_offset 4
 3075              		.cfi_offset 7, -4
 3076 0002 83B0     		sub	sp, sp, #12
 3077              	.LCFI134:
 3078              		.cfi_def_cfa_offset 16
 3079 0004 00AF     		add	r7, sp, #0
 3080              	.LCFI135:
 3081              		.cfi_def_cfa_register 7
 3082 0006 7860     		str	r0, [r7, #4]
1708:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1709:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   UNUSED(hcan);
1710:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1711:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1712:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
1713:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             user file
1714:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****    */
1715:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 3083              		.loc 1 1715 0
 3084 0008 0C37     		adds	r7, r7, #12
 3085              	.LCFI136:
 3086              		.cfi_def_cfa_offset 4
 3087 000a BD46     		mov	sp, r7
 3088              	.LCFI137:
 3089              		.cfi_def_cfa_register 13
 3090              		@ sp needed
 3091 000c 5DF8047B 		ldr	r7, [sp], #4
 3092              	.LCFI138:
 3093              		.cfi_restore 7
 3094              		.cfi_def_cfa_offset 0
 3095 0010 7047     		bx	lr
 3096              		.cfi_endproc
 3097              	.LFE146:
 3099 0012 00BF     		.section	.text.HAL_CAN_TxMailbox1AbortCallback,"ax",%progbits
 3100              		.align	2
 3101              		.weak	HAL_CAN_TxMailbox1AbortCallback
 3102              		.thumb
 3103              		.thumb_func
 3105              	HAL_CAN_TxMailbox1AbortCallback:
 3106              	.LFB147:
1716:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1717:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1718:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Transmission Mailbox 1 Cancellation callback.
1719:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1720:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
1721:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval None
1722:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
ARM GAS  /tmp/ccm0Y8sw.s 			page 95


1723:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** __weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
1724:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 3107              		.loc 1 1724 0
 3108              		.cfi_startproc
 3109              		@ args = 0, pretend = 0, frame = 8
 3110              		@ frame_needed = 1, uses_anonymous_args = 0
 3111              		@ link register save eliminated.
 3112 0000 80B4     		push	{r7}
 3113              	.LCFI139:
 3114              		.cfi_def_cfa_offset 4
 3115              		.cfi_offset 7, -4
 3116 0002 83B0     		sub	sp, sp, #12
 3117              	.LCFI140:
 3118              		.cfi_def_cfa_offset 16
 3119 0004 00AF     		add	r7, sp, #0
 3120              	.LCFI141:
 3121              		.cfi_def_cfa_register 7
 3122 0006 7860     		str	r0, [r7, #4]
1725:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1726:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   UNUSED(hcan);
1727:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1728:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1729:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
1730:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             user file
1731:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****    */
1732:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 3123              		.loc 1 1732 0
 3124 0008 0C37     		adds	r7, r7, #12
 3125              	.LCFI142:
 3126              		.cfi_def_cfa_offset 4
 3127 000a BD46     		mov	sp, r7
 3128              	.LCFI143:
 3129              		.cfi_def_cfa_register 13
 3130              		@ sp needed
 3131 000c 5DF8047B 		ldr	r7, [sp], #4
 3132              	.LCFI144:
 3133              		.cfi_restore 7
 3134              		.cfi_def_cfa_offset 0
 3135 0010 7047     		bx	lr
 3136              		.cfi_endproc
 3137              	.LFE147:
 3139 0012 00BF     		.section	.text.HAL_CAN_TxMailbox2AbortCallback,"ax",%progbits
 3140              		.align	2
 3141              		.weak	HAL_CAN_TxMailbox2AbortCallback
 3142              		.thumb
 3143              		.thumb_func
 3145              	HAL_CAN_TxMailbox2AbortCallback:
 3146              	.LFB148:
1733:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1734:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1735:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Transmission Mailbox 2 Cancellation callback.
1736:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
1737:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
1738:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval None
1739:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1740:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** __weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
1741:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
ARM GAS  /tmp/ccm0Y8sw.s 			page 96


 3147              		.loc 1 1741 0
 3148              		.cfi_startproc
 3149              		@ args = 0, pretend = 0, frame = 8
 3150              		@ frame_needed = 1, uses_anonymous_args = 0
 3151              		@ link register save eliminated.
 3152 0000 80B4     		push	{r7}
 3153              	.LCFI145:
 3154              		.cfi_def_cfa_offset 4
 3155              		.cfi_offset 7, -4
 3156 0002 83B0     		sub	sp, sp, #12
 3157              	.LCFI146:
 3158              		.cfi_def_cfa_offset 16
 3159 0004 00AF     		add	r7, sp, #0
 3160              	.LCFI147:
 3161              		.cfi_def_cfa_register 7
 3162 0006 7860     		str	r0, [r7, #4]
1742:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1743:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   UNUSED(hcan);
1744:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1745:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1746:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
1747:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             user file
1748:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****    */
1749:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 3163              		.loc 1 1749 0
 3164 0008 0C37     		adds	r7, r7, #12
 3165              	.LCFI148:
 3166              		.cfi_def_cfa_offset 4
 3167 000a BD46     		mov	sp, r7
 3168              	.LCFI149:
 3169              		.cfi_def_cfa_register 13
 3170              		@ sp needed
 3171 000c 5DF8047B 		ldr	r7, [sp], #4
 3172              	.LCFI150:
 3173              		.cfi_restore 7
 3174              		.cfi_def_cfa_offset 0
 3175 0010 7047     		bx	lr
 3176              		.cfi_endproc
 3177              	.LFE148:
 3179 0012 00BF     		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 3180              		.align	2
 3181              		.weak	HAL_CAN_RxFifo0MsgPendingCallback
 3182              		.thumb
 3183              		.thumb_func
 3185              	HAL_CAN_RxFifo0MsgPendingCallback:
 3186              	.LFB149:
1750:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1751:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1752:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Rx FIFO 0 message pending callback.
1753:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1754:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
1755:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval None
1756:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1757:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** __weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
1758:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 3187              		.loc 1 1758 0
 3188              		.cfi_startproc
ARM GAS  /tmp/ccm0Y8sw.s 			page 97


 3189              		@ args = 0, pretend = 0, frame = 8
 3190              		@ frame_needed = 1, uses_anonymous_args = 0
 3191              		@ link register save eliminated.
 3192 0000 80B4     		push	{r7}
 3193              	.LCFI151:
 3194              		.cfi_def_cfa_offset 4
 3195              		.cfi_offset 7, -4
 3196 0002 83B0     		sub	sp, sp, #12
 3197              	.LCFI152:
 3198              		.cfi_def_cfa_offset 16
 3199 0004 00AF     		add	r7, sp, #0
 3200              	.LCFI153:
 3201              		.cfi_def_cfa_register 7
 3202 0006 7860     		str	r0, [r7, #4]
1759:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1760:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   UNUSED(hcan);
1761:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1762:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1763:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
1764:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             user file
1765:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****    */
1766:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 3203              		.loc 1 1766 0
 3204 0008 0C37     		adds	r7, r7, #12
 3205              	.LCFI154:
 3206              		.cfi_def_cfa_offset 4
 3207 000a BD46     		mov	sp, r7
 3208              	.LCFI155:
 3209              		.cfi_def_cfa_register 13
 3210              		@ sp needed
 3211 000c 5DF8047B 		ldr	r7, [sp], #4
 3212              	.LCFI156:
 3213              		.cfi_restore 7
 3214              		.cfi_def_cfa_offset 0
 3215 0010 7047     		bx	lr
 3216              		.cfi_endproc
 3217              	.LFE149:
 3219 0012 00BF     		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 3220              		.align	2
 3221              		.weak	HAL_CAN_RxFifo0FullCallback
 3222              		.thumb
 3223              		.thumb_func
 3225              	HAL_CAN_RxFifo0FullCallback:
 3226              	.LFB150:
1767:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1768:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1769:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Rx FIFO 0 full callback.
1770:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1771:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
1772:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval None
1773:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1774:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** __weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
1775:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 3227              		.loc 1 1775 0
 3228              		.cfi_startproc
 3229              		@ args = 0, pretend = 0, frame = 8
 3230              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccm0Y8sw.s 			page 98


 3231              		@ link register save eliminated.
 3232 0000 80B4     		push	{r7}
 3233              	.LCFI157:
 3234              		.cfi_def_cfa_offset 4
 3235              		.cfi_offset 7, -4
 3236 0002 83B0     		sub	sp, sp, #12
 3237              	.LCFI158:
 3238              		.cfi_def_cfa_offset 16
 3239 0004 00AF     		add	r7, sp, #0
 3240              	.LCFI159:
 3241              		.cfi_def_cfa_register 7
 3242 0006 7860     		str	r0, [r7, #4]
1776:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1777:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   UNUSED(hcan);
1778:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1779:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1780:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             the HAL_CAN_RxFifo0FullCallback could be implemented in the user
1781:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             file
1782:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****    */
1783:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 3243              		.loc 1 1783 0
 3244 0008 0C37     		adds	r7, r7, #12
 3245              	.LCFI160:
 3246              		.cfi_def_cfa_offset 4
 3247 000a BD46     		mov	sp, r7
 3248              	.LCFI161:
 3249              		.cfi_def_cfa_register 13
 3250              		@ sp needed
 3251 000c 5DF8047B 		ldr	r7, [sp], #4
 3252              	.LCFI162:
 3253              		.cfi_restore 7
 3254              		.cfi_def_cfa_offset 0
 3255 0010 7047     		bx	lr
 3256              		.cfi_endproc
 3257              	.LFE150:
 3259 0012 00BF     		.section	.text.HAL_CAN_RxFifo1MsgPendingCallback,"ax",%progbits
 3260              		.align	2
 3261              		.weak	HAL_CAN_RxFifo1MsgPendingCallback
 3262              		.thumb
 3263              		.thumb_func
 3265              	HAL_CAN_RxFifo1MsgPendingCallback:
 3266              	.LFB151:
1784:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1785:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1786:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Rx FIFO 1 message pending callback.
1787:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1788:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
1789:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval None
1790:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1791:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** __weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
1792:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 3267              		.loc 1 1792 0
 3268              		.cfi_startproc
 3269              		@ args = 0, pretend = 0, frame = 8
 3270              		@ frame_needed = 1, uses_anonymous_args = 0
 3271              		@ link register save eliminated.
 3272 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccm0Y8sw.s 			page 99


 3273              	.LCFI163:
 3274              		.cfi_def_cfa_offset 4
 3275              		.cfi_offset 7, -4
 3276 0002 83B0     		sub	sp, sp, #12
 3277              	.LCFI164:
 3278              		.cfi_def_cfa_offset 16
 3279 0004 00AF     		add	r7, sp, #0
 3280              	.LCFI165:
 3281              		.cfi_def_cfa_register 7
 3282 0006 7860     		str	r0, [r7, #4]
1793:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1794:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   UNUSED(hcan);
1795:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1796:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1797:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
1798:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             user file
1799:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****    */
1800:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 3283              		.loc 1 1800 0
 3284 0008 0C37     		adds	r7, r7, #12
 3285              	.LCFI166:
 3286              		.cfi_def_cfa_offset 4
 3287 000a BD46     		mov	sp, r7
 3288              	.LCFI167:
 3289              		.cfi_def_cfa_register 13
 3290              		@ sp needed
 3291 000c 5DF8047B 		ldr	r7, [sp], #4
 3292              	.LCFI168:
 3293              		.cfi_restore 7
 3294              		.cfi_def_cfa_offset 0
 3295 0010 7047     		bx	lr
 3296              		.cfi_endproc
 3297              	.LFE151:
 3299 0012 00BF     		.section	.text.HAL_CAN_RxFifo1FullCallback,"ax",%progbits
 3300              		.align	2
 3301              		.weak	HAL_CAN_RxFifo1FullCallback
 3302              		.thumb
 3303              		.thumb_func
 3305              	HAL_CAN_RxFifo1FullCallback:
 3306              	.LFB152:
1801:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1802:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1803:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Rx FIFO 1 full callback.
1804:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1805:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
1806:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval None
1807:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1808:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** __weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
1809:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 3307              		.loc 1 1809 0
 3308              		.cfi_startproc
 3309              		@ args = 0, pretend = 0, frame = 8
 3310              		@ frame_needed = 1, uses_anonymous_args = 0
 3311              		@ link register save eliminated.
 3312 0000 80B4     		push	{r7}
 3313              	.LCFI169:
 3314              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccm0Y8sw.s 			page 100


 3315              		.cfi_offset 7, -4
 3316 0002 83B0     		sub	sp, sp, #12
 3317              	.LCFI170:
 3318              		.cfi_def_cfa_offset 16
 3319 0004 00AF     		add	r7, sp, #0
 3320              	.LCFI171:
 3321              		.cfi_def_cfa_register 7
 3322 0006 7860     		str	r0, [r7, #4]
1810:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1811:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   UNUSED(hcan);
1812:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1813:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1814:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             the HAL_CAN_RxFifo1FullCallback could be implemented in the user
1815:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             file
1816:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****    */
1817:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 3323              		.loc 1 1817 0
 3324 0008 0C37     		adds	r7, r7, #12
 3325              	.LCFI172:
 3326              		.cfi_def_cfa_offset 4
 3327 000a BD46     		mov	sp, r7
 3328              	.LCFI173:
 3329              		.cfi_def_cfa_register 13
 3330              		@ sp needed
 3331 000c 5DF8047B 		ldr	r7, [sp], #4
 3332              	.LCFI174:
 3333              		.cfi_restore 7
 3334              		.cfi_def_cfa_offset 0
 3335 0010 7047     		bx	lr
 3336              		.cfi_endproc
 3337              	.LFE152:
 3339 0012 00BF     		.section	.text.HAL_CAN_SleepCallback,"ax",%progbits
 3340              		.align	2
 3341              		.weak	HAL_CAN_SleepCallback
 3342              		.thumb
 3343              		.thumb_func
 3345              	HAL_CAN_SleepCallback:
 3346              	.LFB153:
1818:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1819:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1820:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Sleep callback.
1821:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1822:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
1823:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval None
1824:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1825:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** __weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
1826:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 3347              		.loc 1 1826 0
 3348              		.cfi_startproc
 3349              		@ args = 0, pretend = 0, frame = 8
 3350              		@ frame_needed = 1, uses_anonymous_args = 0
 3351              		@ link register save eliminated.
 3352 0000 80B4     		push	{r7}
 3353              	.LCFI175:
 3354              		.cfi_def_cfa_offset 4
 3355              		.cfi_offset 7, -4
 3356 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccm0Y8sw.s 			page 101


 3357              	.LCFI176:
 3358              		.cfi_def_cfa_offset 16
 3359 0004 00AF     		add	r7, sp, #0
 3360              	.LCFI177:
 3361              		.cfi_def_cfa_register 7
 3362 0006 7860     		str	r0, [r7, #4]
1827:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1828:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   UNUSED(hcan);
1829:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1830:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1831:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             the HAL_CAN_SleepCallback could be implemented in the user file
1832:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****    */
1833:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 3363              		.loc 1 1833 0
 3364 0008 0C37     		adds	r7, r7, #12
 3365              	.LCFI178:
 3366              		.cfi_def_cfa_offset 4
 3367 000a BD46     		mov	sp, r7
 3368              	.LCFI179:
 3369              		.cfi_def_cfa_register 13
 3370              		@ sp needed
 3371 000c 5DF8047B 		ldr	r7, [sp], #4
 3372              	.LCFI180:
 3373              		.cfi_restore 7
 3374              		.cfi_def_cfa_offset 0
 3375 0010 7047     		bx	lr
 3376              		.cfi_endproc
 3377              	.LFE153:
 3379 0012 00BF     		.section	.text.HAL_CAN_WakeUpFromRxMsgCallback,"ax",%progbits
 3380              		.align	2
 3381              		.weak	HAL_CAN_WakeUpFromRxMsgCallback
 3382              		.thumb
 3383              		.thumb_func
 3385              	HAL_CAN_WakeUpFromRxMsgCallback:
 3386              	.LFB154:
1834:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1835:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1836:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  WakeUp from Rx message callback.
1837:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1838:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
1839:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval None
1840:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1841:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** __weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
1842:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 3387              		.loc 1 1842 0
 3388              		.cfi_startproc
 3389              		@ args = 0, pretend = 0, frame = 8
 3390              		@ frame_needed = 1, uses_anonymous_args = 0
 3391              		@ link register save eliminated.
 3392 0000 80B4     		push	{r7}
 3393              	.LCFI181:
 3394              		.cfi_def_cfa_offset 4
 3395              		.cfi_offset 7, -4
 3396 0002 83B0     		sub	sp, sp, #12
 3397              	.LCFI182:
 3398              		.cfi_def_cfa_offset 16
 3399 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccm0Y8sw.s 			page 102


 3400              	.LCFI183:
 3401              		.cfi_def_cfa_register 7
 3402 0006 7860     		str	r0, [r7, #4]
1843:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1844:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   UNUSED(hcan);
1845:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1846:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1847:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
1848:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             user file
1849:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****    */
1850:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 3403              		.loc 1 1850 0
 3404 0008 0C37     		adds	r7, r7, #12
 3405              	.LCFI184:
 3406              		.cfi_def_cfa_offset 4
 3407 000a BD46     		mov	sp, r7
 3408              	.LCFI185:
 3409              		.cfi_def_cfa_register 13
 3410              		@ sp needed
 3411 000c 5DF8047B 		ldr	r7, [sp], #4
 3412              	.LCFI186:
 3413              		.cfi_restore 7
 3414              		.cfi_def_cfa_offset 0
 3415 0010 7047     		bx	lr
 3416              		.cfi_endproc
 3417              	.LFE154:
 3419 0012 00BF     		.section	.text.HAL_CAN_ErrorCallback,"ax",%progbits
 3420              		.align	2
 3421              		.weak	HAL_CAN_ErrorCallback
 3422              		.thumb
 3423              		.thumb_func
 3425              	HAL_CAN_ErrorCallback:
 3426              	.LFB155:
1851:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1852:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1853:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Error CAN callback.
1854:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1855:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
1856:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval None
1857:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1858:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** __weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
1859:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 3427              		.loc 1 1859 0
 3428              		.cfi_startproc
 3429              		@ args = 0, pretend = 0, frame = 8
 3430              		@ frame_needed = 1, uses_anonymous_args = 0
 3431              		@ link register save eliminated.
 3432 0000 80B4     		push	{r7}
 3433              	.LCFI187:
 3434              		.cfi_def_cfa_offset 4
 3435              		.cfi_offset 7, -4
 3436 0002 83B0     		sub	sp, sp, #12
 3437              	.LCFI188:
 3438              		.cfi_def_cfa_offset 16
 3439 0004 00AF     		add	r7, sp, #0
 3440              	.LCFI189:
 3441              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccm0Y8sw.s 			page 103


 3442 0006 7860     		str	r0, [r7, #4]
1860:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Prevent unused argument(s) compilation warning */
1861:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   UNUSED(hcan);
1862:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1863:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1864:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             the HAL_CAN_ErrorCallback could be implemented in the user file
1865:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****    */
1866:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 3443              		.loc 1 1866 0
 3444 0008 0C37     		adds	r7, r7, #12
 3445              	.LCFI190:
 3446              		.cfi_def_cfa_offset 4
 3447 000a BD46     		mov	sp, r7
 3448              	.LCFI191:
 3449              		.cfi_def_cfa_register 13
 3450              		@ sp needed
 3451 000c 5DF8047B 		ldr	r7, [sp], #4
 3452              	.LCFI192:
 3453              		.cfi_restore 7
 3454              		.cfi_def_cfa_offset 0
 3455 0010 7047     		bx	lr
 3456              		.cfi_endproc
 3457              	.LFE155:
 3459 0012 00BF     		.section	.text.HAL_CAN_GetState,"ax",%progbits
 3460              		.align	2
 3461              		.global	HAL_CAN_GetState
 3462              		.thumb
 3463              		.thumb_func
 3465              	HAL_CAN_GetState:
 3466              	.LFB156:
1867:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1868:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1869:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @}
1870:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1871:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1872:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /** @defgroup CAN_Exported_Functions_Group6 Peripheral State and Error functions
1873:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****  *  @brief   CAN Peripheral State functions
1874:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****  *
1875:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** @verbatim
1876:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   ==============================================================================
1877:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****             ##### Peripheral State and Error functions #####
1878:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   ==============================================================================
1879:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     [..]
1880:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     This subsection provides functions allowing to :
1881:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_GetState()  : Return the CAN state.
1882:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_GetError()  : Return the CAN error codes if any.
1883:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (+) HAL_CAN_ResetError(): Reset the CAN error codes if any.
1884:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1885:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** @endverbatim
1886:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @{
1887:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1888:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1889:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1890:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Return the CAN state.
1891:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1892:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
1893:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval HAL state
ARM GAS  /tmp/ccm0Y8sw.s 			page 104


1894:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1895:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef *hcan)
1896:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 3467              		.loc 1 1896 0
 3468              		.cfi_startproc
 3469              		@ args = 0, pretend = 0, frame = 16
 3470              		@ frame_needed = 1, uses_anonymous_args = 0
 3471              		@ link register save eliminated.
 3472 0000 80B4     		push	{r7}
 3473              	.LCFI193:
 3474              		.cfi_def_cfa_offset 4
 3475              		.cfi_offset 7, -4
 3476 0002 85B0     		sub	sp, sp, #20
 3477              	.LCFI194:
 3478              		.cfi_def_cfa_offset 24
 3479 0004 00AF     		add	r7, sp, #0
 3480              	.LCFI195:
 3481              		.cfi_def_cfa_register 7
 3482 0006 7860     		str	r0, [r7, #4]
1897:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 3483              		.loc 1 1897 0
 3484 0008 7B68     		ldr	r3, [r7, #4]
 3485 000a 93F82030 		ldrb	r3, [r3, #32]
 3486 000e FB73     		strb	r3, [r7, #15]
1898:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1899:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 3487              		.loc 1 1899 0
 3488 0010 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3489 0012 012B     		cmp	r3, #1
 3490 0014 02D0     		beq	.L168
 3491              		.loc 1 1899 0 is_stmt 0 discriminator 1
 3492 0016 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3493 0018 022B     		cmp	r3, #2
 3494 001a 12D1     		bne	.L169
 3495              	.L168:
1900:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1901:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
1902:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Check sleep mode acknowledge flag */
1903:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 3496              		.loc 1 1903 0 is_stmt 1
 3497 001c 7B68     		ldr	r3, [r7, #4]
 3498 001e 1B68     		ldr	r3, [r3]
 3499 0020 5B68     		ldr	r3, [r3, #4]
 3500 0022 03F00203 		and	r3, r3, #2
 3501 0026 002B     		cmp	r3, #0
 3502 0028 02D0     		beq	.L170
1904:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1905:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Sleep mode is active */
1906:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_ACTIVE;
 3503              		.loc 1 1906 0
 3504 002a 0423     		movs	r3, #4
 3505 002c FB73     		strb	r3, [r7, #15]
 3506 002e 08E0     		b	.L169
 3507              	.L170:
1907:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1908:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Check sleep mode request flag */
1909:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
ARM GAS  /tmp/ccm0Y8sw.s 			page 105


 3508              		.loc 1 1909 0
 3509 0030 7B68     		ldr	r3, [r7, #4]
 3510 0032 1B68     		ldr	r3, [r3]
 3511 0034 1B68     		ldr	r3, [r3]
 3512 0036 03F00203 		and	r3, r3, #2
 3513 003a 002B     		cmp	r3, #0
 3514 003c 01D0     		beq	.L169
1910:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1911:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Sleep mode request is pending */
1912:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       state = HAL_CAN_STATE_SLEEP_PENDING;
 3515              		.loc 1 1912 0
 3516 003e 0323     		movs	r3, #3
 3517 0040 FB73     		strb	r3, [r7, #15]
 3518              	.L169:
1913:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1914:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     else
1915:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     {
1916:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       /* Neither sleep mode request nor sleep mode acknowledge */
1917:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     }
1918:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
1919:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1920:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Return CAN state */
1921:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   return state;
 3519              		.loc 1 1921 0
 3520 0042 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1922:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 3521              		.loc 1 1922 0
 3522 0044 1846     		mov	r0, r3
 3523 0046 1437     		adds	r7, r7, #20
 3524              	.LCFI196:
 3525              		.cfi_def_cfa_offset 4
 3526 0048 BD46     		mov	sp, r7
 3527              	.LCFI197:
 3528              		.cfi_def_cfa_register 13
 3529              		@ sp needed
 3530 004a 5DF8047B 		ldr	r7, [sp], #4
 3531              	.LCFI198:
 3532              		.cfi_restore 7
 3533              		.cfi_def_cfa_offset 0
 3534 004e 7047     		bx	lr
 3535              		.cfi_endproc
 3536              	.LFE156:
 3538              		.section	.text.HAL_CAN_GetError,"ax",%progbits
 3539              		.align	2
 3540              		.global	HAL_CAN_GetError
 3541              		.thumb
 3542              		.thumb_func
 3544              	HAL_CAN_GetError:
 3545              	.LFB157:
1923:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1924:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1925:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Return the CAN error code.
1926:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1927:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
1928:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval CAN Error Code
1929:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1930:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
ARM GAS  /tmp/ccm0Y8sw.s 			page 106


1931:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 3546              		.loc 1 1931 0
 3547              		.cfi_startproc
 3548              		@ args = 0, pretend = 0, frame = 8
 3549              		@ frame_needed = 1, uses_anonymous_args = 0
 3550              		@ link register save eliminated.
 3551 0000 80B4     		push	{r7}
 3552              	.LCFI199:
 3553              		.cfi_def_cfa_offset 4
 3554              		.cfi_offset 7, -4
 3555 0002 83B0     		sub	sp, sp, #12
 3556              	.LCFI200:
 3557              		.cfi_def_cfa_offset 16
 3558 0004 00AF     		add	r7, sp, #0
 3559              	.LCFI201:
 3560              		.cfi_def_cfa_register 7
 3561 0006 7860     		str	r0, [r7, #4]
1932:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Return CAN error code */
1933:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   return hcan->ErrorCode;
 3562              		.loc 1 1933 0
 3563 0008 7B68     		ldr	r3, [r7, #4]
 3564 000a 5B6A     		ldr	r3, [r3, #36]
1934:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 3565              		.loc 1 1934 0
 3566 000c 1846     		mov	r0, r3
 3567 000e 0C37     		adds	r7, r7, #12
 3568              	.LCFI202:
 3569              		.cfi_def_cfa_offset 4
 3570 0010 BD46     		mov	sp, r7
 3571              	.LCFI203:
 3572              		.cfi_def_cfa_register 13
 3573              		@ sp needed
 3574 0012 5DF8047B 		ldr	r7, [sp], #4
 3575              	.LCFI204:
 3576              		.cfi_restore 7
 3577              		.cfi_def_cfa_offset 0
 3578 0016 7047     		bx	lr
 3579              		.cfi_endproc
 3580              	.LFE157:
 3582              		.section	.text.HAL_CAN_ResetError,"ax",%progbits
 3583              		.align	2
 3584              		.global	HAL_CAN_ResetError
 3585              		.thumb
 3586              		.thumb_func
 3588              	HAL_CAN_ResetError:
 3589              	.LFB158:
1935:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1936:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** /**
1937:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @brief  Reset the CAN error code.
1938:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
1939:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   *         the configuration information for the specified CAN.
1940:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   * @retval HAL status
1941:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   */
1942:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
1943:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** {
 3590              		.loc 1 1943 0
 3591              		.cfi_startproc
ARM GAS  /tmp/ccm0Y8sw.s 			page 107


 3592              		@ args = 0, pretend = 0, frame = 16
 3593              		@ frame_needed = 1, uses_anonymous_args = 0
 3594              		@ link register save eliminated.
 3595 0000 80B4     		push	{r7}
 3596              	.LCFI205:
 3597              		.cfi_def_cfa_offset 4
 3598              		.cfi_offset 7, -4
 3599 0002 85B0     		sub	sp, sp, #20
 3600              	.LCFI206:
 3601              		.cfi_def_cfa_offset 24
 3602 0004 00AF     		add	r7, sp, #0
 3603              	.LCFI207:
 3604              		.cfi_def_cfa_register 7
 3605 0006 7860     		str	r0, [r7, #4]
1944:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   HAL_StatusTypeDef status = HAL_OK;
 3606              		.loc 1 1944 0
 3607 0008 0023     		movs	r3, #0
 3608 000a FB73     		strb	r3, [r7, #15]
1945:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   HAL_CAN_StateTypeDef state = hcan->State;
 3609              		.loc 1 1945 0
 3610 000c 7B68     		ldr	r3, [r7, #4]
 3611 000e 93F82030 		ldrb	r3, [r3, #32]
 3612 0012 BB73     		strb	r3, [r7, #14]
1946:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1947:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   if ((state == HAL_CAN_STATE_READY) ||
 3613              		.loc 1 1947 0
 3614 0014 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 3615 0016 012B     		cmp	r3, #1
 3616 0018 02D0     		beq	.L175
 3617              		.loc 1 1947 0 is_stmt 0 discriminator 1
 3618 001a BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 3619 001c 022B     		cmp	r3, #2
 3620 001e 03D1     		bne	.L176
 3621              	.L175:
1948:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****       (state == HAL_CAN_STATE_LISTENING))
1949:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
1950:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Reset CAN error code */
1951:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     hcan->ErrorCode = 0U;
 3622              		.loc 1 1951 0 is_stmt 1
 3623 0020 7B68     		ldr	r3, [r7, #4]
 3624 0022 0022     		movs	r2, #0
 3625 0024 5A62     		str	r2, [r3, #36]
 3626 0026 07E0     		b	.L177
 3627              	.L176:
1952:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
1953:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   else
1954:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   {
1955:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     /* Update error code */
1956:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 3628              		.loc 1 1956 0
 3629 0028 7B68     		ldr	r3, [r7, #4]
 3630 002a 5B6A     		ldr	r3, [r3, #36]
 3631 002c 43F48022 		orr	r2, r3, #262144
 3632 0030 7B68     		ldr	r3, [r7, #4]
 3633 0032 5A62     		str	r2, [r3, #36]
1957:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1958:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****     status = HAL_ERROR;
ARM GAS  /tmp/ccm0Y8sw.s 			page 108


 3634              		.loc 1 1958 0
 3635 0034 0123     		movs	r3, #1
 3636 0036 FB73     		strb	r3, [r7, #15]
 3637              	.L177:
1959:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   }
1960:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** 
1961:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   /* Return the status */
1962:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c ****   return status;
 3638              		.loc 1 1962 0
 3639 0038 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1963:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_can.c **** }
 3640              		.loc 1 1963 0
 3641 003a 1846     		mov	r0, r3
 3642 003c 1437     		adds	r7, r7, #20
 3643              	.LCFI208:
 3644              		.cfi_def_cfa_offset 4
 3645 003e BD46     		mov	sp, r7
 3646              	.LCFI209:
 3647              		.cfi_def_cfa_register 13
 3648              		@ sp needed
 3649 0040 5DF8047B 		ldr	r7, [sp], #4
 3650              	.LCFI210:
 3651              		.cfi_restore 7
 3652              		.cfi_def_cfa_offset 0
 3653 0044 7047     		bx	lr
 3654              		.cfi_endproc
 3655              	.LFE158:
 3657 0046 00BF     		.text
 3658              	.Letext0:
 3659              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 3660              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 3661              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303x8.h"
 3662              		.file 6 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 3663              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 3664              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_can.h"
 3665              		.file 9 "Drivers/CMSIS/Include/core_cm4.h"
ARM GAS  /tmp/ccm0Y8sw.s 			page 109


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f3xx_hal_can.c
     /tmp/ccm0Y8sw.s:21     .text.HAL_CAN_Init:0000000000000000 $t
     /tmp/ccm0Y8sw.s:26     .text.HAL_CAN_Init:0000000000000000 HAL_CAN_Init
     /tmp/ccm0Y8sw.s:410    .text.HAL_CAN_MspInit:0000000000000000 HAL_CAN_MspInit
     /tmp/ccm0Y8sw.s:335    .text.HAL_CAN_DeInit:0000000000000000 $t
     /tmp/ccm0Y8sw.s:340    .text.HAL_CAN_DeInit:0000000000000000 HAL_CAN_DeInit
     /tmp/ccm0Y8sw.s:853    .text.HAL_CAN_Stop:0000000000000000 HAL_CAN_Stop
     /tmp/ccm0Y8sw.s:450    .text.HAL_CAN_MspDeInit:0000000000000000 HAL_CAN_MspDeInit
     /tmp/ccm0Y8sw.s:405    .text.HAL_CAN_MspInit:0000000000000000 $t
     /tmp/ccm0Y8sw.s:445    .text.HAL_CAN_MspDeInit:0000000000000000 $t
     /tmp/ccm0Y8sw.s:485    .text.HAL_CAN_ConfigFilter:0000000000000000 $t
     /tmp/ccm0Y8sw.s:490    .text.HAL_CAN_ConfigFilter:0000000000000000 HAL_CAN_ConfigFilter
     /tmp/ccm0Y8sw.s:742    .text.HAL_CAN_Start:0000000000000000 $t
     /tmp/ccm0Y8sw.s:747    .text.HAL_CAN_Start:0000000000000000 HAL_CAN_Start
     /tmp/ccm0Y8sw.s:848    .text.HAL_CAN_Stop:0000000000000000 $t
     /tmp/ccm0Y8sw.s:958    .text.HAL_CAN_RequestSleep:0000000000000000 $t
     /tmp/ccm0Y8sw.s:963    .text.HAL_CAN_RequestSleep:0000000000000000 HAL_CAN_RequestSleep
     /tmp/ccm0Y8sw.s:1033   .text.HAL_CAN_WakeUp:0000000000000000 $t
     /tmp/ccm0Y8sw.s:1038   .text.HAL_CAN_WakeUp:0000000000000000 HAL_CAN_WakeUp
     /tmp/ccm0Y8sw.s:1140   .text.HAL_CAN_WakeUp:0000000000000080 $d
     /tmp/ccm0Y8sw.s:1145   .text.HAL_CAN_IsSleepActive:0000000000000000 $t
     /tmp/ccm0Y8sw.s:1150   .text.HAL_CAN_IsSleepActive:0000000000000000 HAL_CAN_IsSleepActive
     /tmp/ccm0Y8sw.s:1215   .text.HAL_CAN_AddTxMessage:0000000000000000 $t
     /tmp/ccm0Y8sw.s:1220   .text.HAL_CAN_AddTxMessage:0000000000000000 HAL_CAN_AddTxMessage
     /tmp/ccm0Y8sw.s:1488   .text.HAL_CAN_AbortTxRequest:0000000000000000 $t
     /tmp/ccm0Y8sw.s:1493   .text.HAL_CAN_AbortTxRequest:0000000000000000 HAL_CAN_AbortTxRequest
     /tmp/ccm0Y8sw.s:1598   .text.HAL_CAN_GetTxMailboxesFreeLevel:0000000000000000 $t
     /tmp/ccm0Y8sw.s:1603   .text.HAL_CAN_GetTxMailboxesFreeLevel:0000000000000000 HAL_CAN_GetTxMailboxesFreeLevel
     /tmp/ccm0Y8sw.s:1693   .text.HAL_CAN_IsTxMessagePending:0000000000000000 $t
     /tmp/ccm0Y8sw.s:1698   .text.HAL_CAN_IsTxMessagePending:0000000000000000 HAL_CAN_IsTxMessagePending
     /tmp/ccm0Y8sw.s:1768   .text.HAL_CAN_GetTxTimestamp:0000000000000000 $t
     /tmp/ccm0Y8sw.s:1773   .text.HAL_CAN_GetTxTimestamp:0000000000000000 HAL_CAN_GetTxTimestamp
     /tmp/ccm0Y8sw.s:1858   .text.HAL_CAN_GetRxMessage:0000000000000000 $t
     /tmp/ccm0Y8sw.s:1863   .text.HAL_CAN_GetRxMessage:0000000000000000 HAL_CAN_GetRxMessage
     /tmp/ccm0Y8sw.s:2181   .text.HAL_CAN_GetRxFifoFillLevel:0000000000000000 $t
     /tmp/ccm0Y8sw.s:2186   .text.HAL_CAN_GetRxFifoFillLevel:0000000000000000 HAL_CAN_GetRxFifoFillLevel
     /tmp/ccm0Y8sw.s:2260   .text.HAL_CAN_ActivateNotification:0000000000000000 $t
     /tmp/ccm0Y8sw.s:2265   .text.HAL_CAN_ActivateNotification:0000000000000000 HAL_CAN_ActivateNotification
     /tmp/ccm0Y8sw.s:2337   .text.HAL_CAN_DeactivateNotification:0000000000000000 $t
     /tmp/ccm0Y8sw.s:2342   .text.HAL_CAN_DeactivateNotification:0000000000000000 HAL_CAN_DeactivateNotification
     /tmp/ccm0Y8sw.s:2415   .text.HAL_CAN_IRQHandler:0000000000000000 $t
     /tmp/ccm0Y8sw.s:2420   .text.HAL_CAN_IRQHandler:0000000000000000 HAL_CAN_IRQHandler
     /tmp/ccm0Y8sw.s:2945   .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 HAL_CAN_TxMailbox0CompleteCallback
     /tmp/ccm0Y8sw.s:3065   .text.HAL_CAN_TxMailbox0AbortCallback:0000000000000000 HAL_CAN_TxMailbox0AbortCallback
     /tmp/ccm0Y8sw.s:2985   .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 HAL_CAN_TxMailbox1CompleteCallback
     /tmp/ccm0Y8sw.s:3105   .text.HAL_CAN_TxMailbox1AbortCallback:0000000000000000 HAL_CAN_TxMailbox1AbortCallback
     /tmp/ccm0Y8sw.s:3025   .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 HAL_CAN_TxMailbox2CompleteCallback
     /tmp/ccm0Y8sw.s:3145   .text.HAL_CAN_TxMailbox2AbortCallback:0000000000000000 HAL_CAN_TxMailbox2AbortCallback
     /tmp/ccm0Y8sw.s:3225   .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 HAL_CAN_RxFifo0FullCallback
     /tmp/ccm0Y8sw.s:3185   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccm0Y8sw.s:3305   .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 HAL_CAN_RxFifo1FullCallback
     /tmp/ccm0Y8sw.s:3265   .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo1MsgPendingCallback
     /tmp/ccm0Y8sw.s:3345   .text.HAL_CAN_SleepCallback:0000000000000000 HAL_CAN_SleepCallback
     /tmp/ccm0Y8sw.s:3385   .text.HAL_CAN_WakeUpFromRxMsgCallback:0000000000000000 HAL_CAN_WakeUpFromRxMsgCallback
     /tmp/ccm0Y8sw.s:3425   .text.HAL_CAN_ErrorCallback:0000000000000000 HAL_CAN_ErrorCallback
     /tmp/ccm0Y8sw.s:2940   .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 $t
ARM GAS  /tmp/ccm0Y8sw.s 			page 110


     /tmp/ccm0Y8sw.s:2980   .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 $t
     /tmp/ccm0Y8sw.s:3020   .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 $t
     /tmp/ccm0Y8sw.s:3060   .text.HAL_CAN_TxMailbox0AbortCallback:0000000000000000 $t
     /tmp/ccm0Y8sw.s:3100   .text.HAL_CAN_TxMailbox1AbortCallback:0000000000000000 $t
     /tmp/ccm0Y8sw.s:3140   .text.HAL_CAN_TxMailbox2AbortCallback:0000000000000000 $t
     /tmp/ccm0Y8sw.s:3180   .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccm0Y8sw.s:3220   .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 $t
     /tmp/ccm0Y8sw.s:3260   .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 $t
     /tmp/ccm0Y8sw.s:3300   .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 $t
     /tmp/ccm0Y8sw.s:3340   .text.HAL_CAN_SleepCallback:0000000000000000 $t
     /tmp/ccm0Y8sw.s:3380   .text.HAL_CAN_WakeUpFromRxMsgCallback:0000000000000000 $t
     /tmp/ccm0Y8sw.s:3420   .text.HAL_CAN_ErrorCallback:0000000000000000 $t
     /tmp/ccm0Y8sw.s:3460   .text.HAL_CAN_GetState:0000000000000000 $t
     /tmp/ccm0Y8sw.s:3465   .text.HAL_CAN_GetState:0000000000000000 HAL_CAN_GetState
     /tmp/ccm0Y8sw.s:3539   .text.HAL_CAN_GetError:0000000000000000 $t
     /tmp/ccm0Y8sw.s:3544   .text.HAL_CAN_GetError:0000000000000000 HAL_CAN_GetError
     /tmp/ccm0Y8sw.s:3583   .text.HAL_CAN_ResetError:0000000000000000 $t
     /tmp/ccm0Y8sw.s:3588   .text.HAL_CAN_ResetError:0000000000000000 HAL_CAN_ResetError
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
