ARM GAS  /tmp/cca0gMDq.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"stm32f3xx_hal_uart.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.HAL_UART_Init,"ax",%progbits
  21              		.align	2
  22              		.global	HAL_UART_Init
  23              		.thumb
  24              		.thumb_func
  26              	HAL_UART_Init:
  27              	.LFB123:
  28              		.file 1 "Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c"
   1:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
   2:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   ******************************************************************************
   3:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @file    stm32f3xx_hal_uart.c
   4:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @author  MCD Application Team
   5:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief   UART HAL module driver.
   6:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *          This file provides firmware functions to manage the following 
   7:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter (UART) peripheral:
   8:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           + IO operation functions
  10:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           + Peripheral Control functions
  11:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           + Peripheral State and Errors functions
  12:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *
  13:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   @verbatim
  14:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****  ===============================================================================
  15:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****                         ##### How to use this driver #####
  16:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****  ===============================================================================
  17:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   [..]
  18:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     The UART HAL driver can be used as follows:
  19:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
  20:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) Declare a UART_HandleTypeDef handle structure (eg. UART_HandleTypeDef huart).
  21:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) Initialize the UART low level resources by implementing the HAL_UART_MspInit() API:
  22:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) Enable the USARTx interface clock.
  23:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) UART pins configuration:
  24:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             (+++) Enable the clock for the UART GPIOs.
  25:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             (+++) Configure these UART pins as alternate function pull-up.
  26:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) NVIC configuration if you need to use interrupt process (HAL_UART_Transmit_IT()
  27:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****              and HAL_UART_Receive_IT() APIs):
  28:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority.
  29:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             (+++) Enable the NVIC USART IRQ handle.
  30:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) UART interrupts handling:
ARM GAS  /tmp/cca0gMDq.s 			page 2


  31:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****               -@@-  The specific UART interrupts (Transmission complete interrupt,
  32:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****                 RXNE interrupt and Error Interrupts) are managed using the macros
  33:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****                 __HAL_UART_ENABLE_IT() and __HAL_UART_DISABLE_IT() inside the transmit and receive 
  34:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) DMA Configuration if you need to use DMA process (HAL_UART_Transmit_DMA()
  35:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****              and HAL_UART_Receive_DMA() APIs):
  36:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             (+++) Declare a DMA handle structure for the Tx/Rx channel.
  37:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             (+++) Enable the DMAx interface clock.
  38:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             (+++) Configure the declared DMA handle structure with the required Tx/Rx parameters.
  39:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             (+++) Configure the DMA Tx/Rx channel.
  40:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             (+++) Associate the initialized DMA handle to the UART DMA Tx/Rx handle.
  41:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete interrupt on
  42:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
  43:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) Program the Baud Rate, Word Length, Stop Bit, Parity, Hardware
  44:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         flow control and Mode (Receiver/Transmitter) in the huart handle Init structure.
  45:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
  46:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) If required, program UART advanced features (TX/RX pins swap, auto Baud rate detection,...)
  47:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         in the huart handle AdvancedInit structure.
  48:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
  49:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) For the UART asynchronous mode, initialize the UART registers by calling
  50:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         the HAL_UART_Init() API.
  51:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
  52:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) For the UART Half duplex mode, initialize the UART registers by calling
  53:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         the HAL_HalfDuplex_Init() API.
  54:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
  55:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) For the UART LIN (Local Interconnection Network) mode, initialize the UART registers
  56:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         by calling the HAL_LIN_Init() API.
  57:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
  58:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) For the UART Multiprocessor mode, initialize the UART registers
  59:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         by calling the HAL_MultiProcessor_Init() API.
  60:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
  61:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) For the UART RS485 Driver Enabled mode, initialize the UART registers
  62:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         by calling the HAL_RS485Ex_Init() API.
  63:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
  64:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    [..]
  65:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (@) These APIs (HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_MultiProcessor_Init(),
  66:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         also configure the low level Hardware (GPIO, CLOCK, CORTEX...etc) by
  67:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         calling the customized HAL_UART_MspInit() API.
  68:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
  69:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    [..]
  70:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    [..] Three operation modes are available within this driver :
  71:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   
  72:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      *** Polling mode IO operation ***
  73:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      =================================
  74:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      [..]
  75:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (+) Send an amount of data in blocking mode using HAL_UART_Transmit()
  76:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (+) Receive an amount of data in blocking mode using HAL_UART_Receive()
  77:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
  78:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      *** Interrupt mode IO operation ***
  79:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      ===================================
  80:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      [..]
  81:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode using HAL_UART_Transmit_IT()
  82:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (+) At transmission end of half transfer HAL_UART_TxHalfCpltCallback is executed and user ca
  83:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxHalfCpltCallback
  84:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can
  85:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
  86:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode using HAL_UART_Receive_IT()
  87:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (+) At reception end of half transfer HAL_UART_RxHalfCpltCallback is executed and user can
ARM GAS  /tmp/cca0gMDq.s 			page 3


  88:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxHalfCpltCallback
  89:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can
  90:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
  91:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can
  92:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
  93:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
  94:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      *** DMA mode IO operation ***
  95:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      ==============================
  96:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      [..]
  97:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (+) Send an amount of data in non blocking mode (DMA) using HAL_UART_Transmit_DMA()
  98:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (+) At transmission end of half transfer HAL_UART_TxHalfCpltCallback is executed and user ca
  99:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxHalfCpltCallback
 100:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (+) At transmission end of transfer HAL_UART_TxCpltCallback is executed and user can
 101:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_TxCpltCallback
 102:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (+) Receive an amount of data in non blocking mode (DMA) using HAL_UART_Receive_DMA()
 103:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (+) At reception end of half transfer HAL_UART_RxHalfCpltCallback is executed and user can
 104:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxHalfCpltCallback
 105:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (+) At reception end of transfer HAL_UART_RxCpltCallback is executed and user can
 106:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_RxCpltCallback
 107:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (+) In case of transfer Error, HAL_UART_ErrorCallback() function is executed and user can
 108:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             add his own code by customization of function pointer HAL_UART_ErrorCallback
 109:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (+) Pause the DMA Transfer using HAL_UART_DMAPause()
 110:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (+) Resume the DMA Transfer using HAL_UART_DMAResume()
 111:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (+) Stop the DMA Transfer using HAL_UART_DMAStop()
 112:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 113:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      *** UART HAL driver macros list ***
 114:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      =============================================
 115:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      [..]
 116:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        Below the list of most used macros in UART HAL driver.
 117:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 118:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (+) __HAL_UART_ENABLE: Enable the UART peripheral
 119:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (+) __HAL_UART_DISABLE: Disable the UART peripheral
 120:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (+) __HAL_UART_GET_FLAG : Check whether the specified UART flag is set or not
 121:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (+) __HAL_UART_CLEAR_FLAG : Clear the specified UART pending flag
 122:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (+) __HAL_UART_ENABLE_IT: Enable the specified UART interrupt
 123:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (+) __HAL_UART_DISABLE_IT: Disable the specified UART interrupt
 124:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 125:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      [..]
 126:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (@) You can refer to the UART HAL driver header file for more useful macros
 127:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 128:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   @endverbatim
 129:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   ******************************************************************************
 130:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @attention
 131:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *
 132:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
 133:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *
 134:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * Redistribution and use in source and binary forms, with or without modification,
 135:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * are permitted provided that the following conditions are met:
 136:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 137:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *      this list of conditions and the following disclaimer.
 138:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 139:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *      this list of conditions and the following disclaimer in the documentation
 140:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *      and/or other materials provided with the distribution.
 141:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 142:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *      may be used to endorse or promote products derived from this software
 143:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *      without specific prior written permission.
 144:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *
ARM GAS  /tmp/cca0gMDq.s 			page 4


 145:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 146:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 147:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 148:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 149:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 150:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 151:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 152:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 153:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 154:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 155:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *
 156:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   ******************************************************************************
 157:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 158:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 159:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /* Includes ------------------------------------------------------------------*/
 160:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #include "stm32f3xx_hal.h"
 161:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 162:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /** @addtogroup STM32F3xx_HAL_Driver
 163:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @{
 164:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 165:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 166:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /** @defgroup UART UART
 167:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief UART HAL module driver
 168:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @{
 169:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 170:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 171:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #ifdef HAL_UART_MODULE_ENABLED
 172:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 173:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /* Private typedef -----------------------------------------------------------*/
 174:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /* Private define ------------------------------------------------------------*/
 175:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /** @defgroup UART_Private_Constants UART Private Constants
 176:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @{
 177:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 178:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** #define UART_CR1_FIELDS  ((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | \
 179:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****                                      USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8)) /*!< UART or U
 180:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 181:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @}
 182:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 183:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 184:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /* Private macros ------------------------------------------------------------*/
 185:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /* Private variables ---------------------------------------------------------*/
 186:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /* Private function prototypes -----------------------------------------------*/
 187:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /** @addtogroup UART_Private_Functions
 188:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @{
 189:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 190:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart);
 191:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart);
 192:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 193:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 194:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 195:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
 196:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma);
 197:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 198:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 199:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 200:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 201:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
ARM GAS  /tmp/cca0gMDq.s 			page 5


 202:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart);
 203:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart);
 204:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart);
 205:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 206:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @}
 207:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 208:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 209:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /* Exported functions --------------------------------------------------------*/
 210:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 211:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /** @defgroup UART_Exported_Functions UART Exported Functions
 212:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @{
 213:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 214:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 215:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group1 Initialization and de-initialization functions
 216:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *  @brief    Initialization and Configuration functions
 217:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *
 218:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** @verbatim
 219:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** ===============================================================================
 220:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             ##### Initialization and Configuration functions #####
 221:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****  ===============================================================================
 222:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     [..]
 223:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
 224:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     in asynchronous mode.
 225:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (+) For the asynchronous mode the parameters below can be configured:
 226:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) Baud Rate
 227:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) Word Length
 228:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) Stop Bit
 229:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) Parity
 230:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) Hardware flow control
 231:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) Receiver/transmitter modes
 232:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) Over Sampling Method
 233:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) One-Bit Sampling Method
 234:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (+) For the asynchronous mode, the following advanced features can be configured as well:
 235:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) TX and/or RX pin level inversion
 236:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) data logical level inversion
 237:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) RX and TX pins swap
 238:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) RX overrun detection disabling
 239:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) DMA disabling on RX error
 240:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) MSB first on communication line
 241:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) auto Baud rate detection
 242:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     [..]
 243:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     The HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init() and HAL_MultiProcessor_Init()
 244:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     API follow respectively the UART asynchronous, UART Half duplex, UART LIN mode and
 245:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     multiprocessor configuration procedures (details for the procedures are available in reference 
 246:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 247:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** @endverbatim
 248:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @{
 249:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 250:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 251:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /*
 252:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   Additional Table: If the parity is enabled, then the MSB bit of the data written
 253:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****                     in the data register is transmitted but is changed by the parity bit.
 254:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****                     According to device capability (support or not of 7-bit word length),
 255:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****                     frame length is either defined by the M bit (8-bits or 9-bits)
 256:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****                     or by the M1 and M0 bits (7-bit, 8-bit or 9-bit).
 257:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****                     Possible UART frame formats are as listed in the following table:
 258:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/cca0gMDq.s 			page 6


 259:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       Table 1. UART frame format.             
 260:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       +-----------------------------------------------------------------------+
 261:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       |       M bit       |  PCE bit  |             UART frame                |
 262:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       |-------------------|-----------|---------------------------------------|
 263:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       |         0         |     0     |    | SB |    8-bit data   | STB |     |
 264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       |-------------------|-----------|---------------------------------------|
 265:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       |         0         |     1     |    | SB | 7-bit data | PB | STB |     |
 266:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       |-------------------|-----------|---------------------------------------|
 267:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       |         1         |     0     |    | SB |    9-bit data   | STB |     |
 268:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       |-------------------|-----------|---------------------------------------|
 269:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       |         1         |     1     |    | SB | 8-bit data | PB | STB |     |
 270:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       +-----------------------------------------------------------------------+
 271:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       |  M1 bit |  M0 bit |  PCE bit  |             UART frame                |
 272:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       |---------|---------|-----------|---------------------------------------|
 273:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       |    0    |    0    |     0     |    | SB |    8 bit data   | STB |     |
 274:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       |---------|---------|-----------|---------------------------------------|
 275:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       |    0    |    0    |     1     |    | SB | 7 bit data | PB | STB |     |
 276:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       |---------|---------|-----------|---------------------------------------|
 277:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       |    0    |    1    |     0     |    | SB |    9 bit data   | STB |     |
 278:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       |---------|---------|-----------|---------------------------------------|
 279:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       |    0    |    1    |     1     |    | SB | 8 bit data | PB | STB |     |
 280:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       |---------|---------|-----------|---------------------------------------|
 281:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       |    1    |    0    |     0     |    | SB |    7 bit data   | STB |     |
 282:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       |---------|---------|-----------|---------------------------------------|
 283:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       |    1    |    0    |     1     |    | SB | 6 bit data | PB | STB |     |
 284:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       +-----------------------------------------------------------------------+
 285:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 286:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** */
 287:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 288:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 289:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Initialize the UART mode according to the specified
 290:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and initialize the associated handle.
 291:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
 292:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
 293:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 294:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 295:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
  29              		.loc 1 295 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 82B0     		sub	sp, sp, #8
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 16
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 7860     		str	r0, [r7, #4]
 296:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check the UART handle allocation */
 297:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(huart == NULL)
  45              		.loc 1 297 0
  46 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cca0gMDq.s 			page 7


  47 000a 002B     		cmp	r3, #0
  48 000c 01D1     		bne	.L2
 298:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 299:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_ERROR;
  49              		.loc 1 299 0
  50 000e 0123     		movs	r3, #1
  51 0010 43E0     		b	.L3
  52              	.L2:
 300:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 301:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 302:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 303:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 304:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Check the parameters */
 305:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 306:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 307:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
 308:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 309:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Check the parameters */
 310:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     assert_param(IS_UART_INSTANCE(huart->Instance));
 311:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 312:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 313:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_RESET)
  53              		.loc 1 313 0
  54 0012 7B68     		ldr	r3, [r7, #4]
  55 0014 93F86930 		ldrb	r3, [r3, #105]
  56 0018 DBB2     		uxtb	r3, r3
  57 001a 002B     		cmp	r3, #0
  58 001c 06D1     		bne	.L4
 314:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 315:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 316:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
  59              		.loc 1 316 0
  60 001e 7B68     		ldr	r3, [r7, #4]
  61 0020 0022     		movs	r2, #0
  62 0022 83F86820 		strb	r2, [r3, #104]
 317:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 318:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 319:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     HAL_UART_MspInit(huart);
  63              		.loc 1 319 0
  64 0026 7868     		ldr	r0, [r7, #4]
  65 0028 FFF7FEFF 		bl	HAL_UART_MspInit
  66              	.L4:
 320:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 321:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 322:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
  67              		.loc 1 322 0
  68 002c 7B68     		ldr	r3, [r7, #4]
  69 002e 2422     		movs	r2, #36
  70 0030 83F86920 		strb	r2, [r3, #105]
 323:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 324:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable the Peripheral */
 325:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
  71              		.loc 1 325 0
  72 0034 7B68     		ldr	r3, [r7, #4]
  73 0036 1B68     		ldr	r3, [r3]
  74 0038 7A68     		ldr	r2, [r7, #4]
  75 003a 1268     		ldr	r2, [r2]
ARM GAS  /tmp/cca0gMDq.s 			page 8


  76 003c 1268     		ldr	r2, [r2]
  77 003e 22F00102 		bic	r2, r2, #1
  78 0042 1A60     		str	r2, [r3]
 326:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 327:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Set the UART Communication parameters */
 328:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
  79              		.loc 1 328 0
  80 0044 7868     		ldr	r0, [r7, #4]
  81 0046 FFF7FEFF 		bl	UART_SetConfig
  82 004a 0346     		mov	r3, r0
  83 004c 012B     		cmp	r3, #1
  84 004e 01D1     		bne	.L5
 329:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 330:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_ERROR;
  85              		.loc 1 330 0
  86 0050 0123     		movs	r3, #1
  87 0052 22E0     		b	.L3
  88              	.L5:
 331:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 332:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 333:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
  89              		.loc 1 333 0
  90 0054 7B68     		ldr	r3, [r7, #4]
  91 0056 5B6A     		ldr	r3, [r3, #36]
  92 0058 002B     		cmp	r3, #0
  93 005a 02D0     		beq	.L6
 334:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 335:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
  94              		.loc 1 335 0
  95 005c 7868     		ldr	r0, [r7, #4]
  96 005e FFF7FEFF 		bl	UART_AdvFeatureConfig
  97              	.L6:
 336:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 337:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 338:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* In asynchronous mode, the following bits must be kept cleared:
 339:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 340:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
 341:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  98              		.loc 1 341 0
  99 0062 7B68     		ldr	r3, [r7, #4]
 100 0064 1B68     		ldr	r3, [r3]
 101 0066 7A68     		ldr	r2, [r7, #4]
 102 0068 1268     		ldr	r2, [r2]
 103 006a 5268     		ldr	r2, [r2, #4]
 104 006c 22F49042 		bic	r2, r2, #18432
 105 0070 5A60     		str	r2, [r3, #4]
 342:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 106              		.loc 1 342 0
 107 0072 7B68     		ldr	r3, [r7, #4]
 108 0074 1B68     		ldr	r3, [r3]
 109 0076 7A68     		ldr	r2, [r7, #4]
 110 0078 1268     		ldr	r2, [r2]
 111 007a 9268     		ldr	r2, [r2, #8]
 112 007c 22F02A02 		bic	r2, r2, #42
 113 0080 9A60     		str	r2, [r3, #8]
 343:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 344:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Enable the Peripheral */
ARM GAS  /tmp/cca0gMDq.s 			page 9


 345:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 114              		.loc 1 345 0
 115 0082 7B68     		ldr	r3, [r7, #4]
 116 0084 1B68     		ldr	r3, [r3]
 117 0086 7A68     		ldr	r2, [r7, #4]
 118 0088 1268     		ldr	r2, [r2]
 119 008a 1268     		ldr	r2, [r2]
 120 008c 42F00102 		orr	r2, r2, #1
 121 0090 1A60     		str	r2, [r3]
 346:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 347:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 348:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 122              		.loc 1 348 0
 123 0092 7868     		ldr	r0, [r7, #4]
 124 0094 FFF7FEFF 		bl	UART_CheckIdleState
 125 0098 0346     		mov	r3, r0
 126              	.L3:
 349:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 127              		.loc 1 349 0
 128 009a 1846     		mov	r0, r3
 129 009c 0837     		adds	r7, r7, #8
 130              	.LCFI3:
 131              		.cfi_def_cfa_offset 8
 132 009e BD46     		mov	sp, r7
 133              	.LCFI4:
 134              		.cfi_def_cfa_register 13
 135              		@ sp needed
 136 00a0 80BD     		pop	{r7, pc}
 137              		.cfi_endproc
 138              	.LFE123:
 140 00a2 00BF     		.section	.text.HAL_HalfDuplex_Init,"ax",%progbits
 141              		.align	2
 142              		.global	HAL_HalfDuplex_Init
 143              		.thumb
 144              		.thumb_func
 146              	HAL_HalfDuplex_Init:
 147              	.LFB124:
 350:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 351:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 352:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Initialize the half-duplex mode according to the specified
 353:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and creates the associated handle.
 354:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
 355:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
 356:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 357:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
 358:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 148              		.loc 1 358 0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 8
 151              		@ frame_needed = 1, uses_anonymous_args = 0
 152 0000 80B5     		push	{r7, lr}
 153              	.LCFI5:
 154              		.cfi_def_cfa_offset 8
 155              		.cfi_offset 7, -8
 156              		.cfi_offset 14, -4
 157 0002 82B0     		sub	sp, sp, #8
 158              	.LCFI6:
ARM GAS  /tmp/cca0gMDq.s 			page 10


 159              		.cfi_def_cfa_offset 16
 160 0004 00AF     		add	r7, sp, #0
 161              	.LCFI7:
 162              		.cfi_def_cfa_register 7
 163 0006 7860     		str	r0, [r7, #4]
 359:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check the UART handle allocation */
 360:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(huart == NULL)
 164              		.loc 1 360 0
 165 0008 7B68     		ldr	r3, [r7, #4]
 166 000a 002B     		cmp	r3, #0
 167 000c 01D1     		bne	.L8
 361:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 362:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_ERROR;
 168              		.loc 1 362 0
 169 000e 0123     		movs	r3, #1
 170 0010 4BE0     		b	.L9
 171              	.L8:
 363:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 364:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 365:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check UART instance */
 366:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
 367:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 368:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_RESET)
 172              		.loc 1 368 0
 173 0012 7B68     		ldr	r3, [r7, #4]
 174 0014 93F86930 		ldrb	r3, [r3, #105]
 175 0018 DBB2     		uxtb	r3, r3
 176 001a 002B     		cmp	r3, #0
 177 001c 06D1     		bne	.L10
 369:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 370:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 371:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 178              		.loc 1 371 0
 179 001e 7B68     		ldr	r3, [r7, #4]
 180 0020 0022     		movs	r2, #0
 181 0022 83F86820 		strb	r2, [r3, #104]
 372:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 373:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 374:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 182              		.loc 1 374 0
 183 0026 7868     		ldr	r0, [r7, #4]
 184 0028 FFF7FEFF 		bl	HAL_UART_MspInit
 185              	.L10:
 375:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 376:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 377:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 186              		.loc 1 377 0
 187 002c 7B68     		ldr	r3, [r7, #4]
 188 002e 2422     		movs	r2, #36
 189 0030 83F86920 		strb	r2, [r3, #105]
 378:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 379:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable the Peripheral */
 380:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 190              		.loc 1 380 0
 191 0034 7B68     		ldr	r3, [r7, #4]
 192 0036 1B68     		ldr	r3, [r3]
 193 0038 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp/cca0gMDq.s 			page 11


 194 003a 1268     		ldr	r2, [r2]
 195 003c 1268     		ldr	r2, [r2]
 196 003e 22F00102 		bic	r2, r2, #1
 197 0042 1A60     		str	r2, [r3]
 381:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 382:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Set the UART Communication parameters */
 383:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 198              		.loc 1 383 0
 199 0044 7868     		ldr	r0, [r7, #4]
 200 0046 FFF7FEFF 		bl	UART_SetConfig
 201 004a 0346     		mov	r3, r0
 202 004c 012B     		cmp	r3, #1
 203 004e 01D1     		bne	.L11
 384:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 385:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_ERROR;
 204              		.loc 1 385 0
 205 0050 0123     		movs	r3, #1
 206 0052 2AE0     		b	.L9
 207              	.L11:
 386:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 387:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 388:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 208              		.loc 1 388 0
 209 0054 7B68     		ldr	r3, [r7, #4]
 210 0056 5B6A     		ldr	r3, [r3, #36]
 211 0058 002B     		cmp	r3, #0
 212 005a 02D0     		beq	.L12
 389:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 390:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 213              		.loc 1 390 0
 214 005c 7868     		ldr	r0, [r7, #4]
 215 005e FFF7FEFF 		bl	UART_AdvFeatureConfig
 216              	.L12:
 391:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 392:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 393:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* In half-duplex mode, the following bits must be kept cleared:
 394:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 395:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   - SCEN and IREN bits in the USART_CR3 register.*/
 396:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 217              		.loc 1 396 0
 218 0062 7B68     		ldr	r3, [r7, #4]
 219 0064 1B68     		ldr	r3, [r3]
 220 0066 7A68     		ldr	r2, [r7, #4]
 221 0068 1268     		ldr	r2, [r2]
 222 006a 5268     		ldr	r2, [r2, #4]
 223 006c 22F49042 		bic	r2, r2, #18432
 224 0070 5A60     		str	r2, [r3, #4]
 397:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 225              		.loc 1 397 0
 226 0072 7B68     		ldr	r3, [r7, #4]
 227 0074 1B68     		ldr	r3, [r3]
 228 0076 7A68     		ldr	r2, [r7, #4]
 229 0078 1268     		ldr	r2, [r2]
 230 007a 9268     		ldr	r2, [r2, #8]
 231 007c 22F02202 		bic	r2, r2, #34
 232 0080 9A60     		str	r2, [r3, #8]
 398:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/cca0gMDq.s 			page 12


 399:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 400:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 233              		.loc 1 400 0
 234 0082 7B68     		ldr	r3, [r7, #4]
 235 0084 1B68     		ldr	r3, [r3]
 236 0086 7A68     		ldr	r2, [r7, #4]
 237 0088 1268     		ldr	r2, [r2]
 238 008a 9268     		ldr	r2, [r2, #8]
 239 008c 42F00802 		orr	r2, r2, #8
 240 0090 9A60     		str	r2, [r3, #8]
 401:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 402:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Enable the Peripheral */
 403:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 241              		.loc 1 403 0
 242 0092 7B68     		ldr	r3, [r7, #4]
 243 0094 1B68     		ldr	r3, [r3]
 244 0096 7A68     		ldr	r2, [r7, #4]
 245 0098 1268     		ldr	r2, [r2]
 246 009a 1268     		ldr	r2, [r2]
 247 009c 42F00102 		orr	r2, r2, #1
 248 00a0 1A60     		str	r2, [r3]
 404:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 405:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 406:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 249              		.loc 1 406 0
 250 00a2 7868     		ldr	r0, [r7, #4]
 251 00a4 FFF7FEFF 		bl	UART_CheckIdleState
 252 00a8 0346     		mov	r3, r0
 253              	.L9:
 407:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 254              		.loc 1 407 0
 255 00aa 1846     		mov	r0, r3
 256 00ac 0837     		adds	r7, r7, #8
 257              	.LCFI8:
 258              		.cfi_def_cfa_offset 8
 259 00ae BD46     		mov	sp, r7
 260              	.LCFI9:
 261              		.cfi_def_cfa_register 13
 262              		@ sp needed
 263 00b0 80BD     		pop	{r7, pc}
 264              		.cfi_endproc
 265              	.LFE124:
 267 00b2 00BF     		.section	.text.HAL_LIN_Init,"ax",%progbits
 268              		.align	2
 269              		.global	HAL_LIN_Init
 270              		.thumb
 271              		.thumb_func
 273              	HAL_LIN_Init:
 274              	.LFB125:
 408:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 409:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 410:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 411:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Initialize the LIN mode according to the specified
 412:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and creates the associated handle .
 413:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
 414:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param BreakDetectLength specifies the LIN break detection length.
 415:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *        This parameter can be one of the following values:
ARM GAS  /tmp/cca0gMDq.s 			page 13


 416:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
 417:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
 418:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
 419:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 420:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
 421:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 275              		.loc 1 421 0
 276              		.cfi_startproc
 277              		@ args = 0, pretend = 0, frame = 8
 278              		@ frame_needed = 1, uses_anonymous_args = 0
 279 0000 80B5     		push	{r7, lr}
 280              	.LCFI10:
 281              		.cfi_def_cfa_offset 8
 282              		.cfi_offset 7, -8
 283              		.cfi_offset 14, -4
 284 0002 82B0     		sub	sp, sp, #8
 285              	.LCFI11:
 286              		.cfi_def_cfa_offset 16
 287 0004 00AF     		add	r7, sp, #0
 288              	.LCFI12:
 289              		.cfi_def_cfa_register 7
 290 0006 7860     		str	r0, [r7, #4]
 291 0008 3960     		str	r1, [r7]
 422:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check the UART handle allocation */
 423:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(huart == NULL)
 292              		.loc 1 423 0
 293 000a 7B68     		ldr	r3, [r7, #4]
 294 000c 002B     		cmp	r3, #0
 295 000e 01D1     		bne	.L14
 424:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 425:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_ERROR;
 296              		.loc 1 425 0
 297 0010 0123     		movs	r3, #1
 298 0012 62E0     		b	.L15
 299              	.L14:
 426:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 427:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 428:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check the LIN UART instance */
 429:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
 430:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check the Break detection length parameter */
 431:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
 432:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 433:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* LIN mode limited to 16-bit oversampling only */
 434:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 300              		.loc 1 434 0
 301 0014 7B68     		ldr	r3, [r7, #4]
 302 0016 DB69     		ldr	r3, [r3, #28]
 303 0018 B3F5004F 		cmp	r3, #32768
 304 001c 01D1     		bne	.L16
 435:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 436:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_ERROR;
 305              		.loc 1 436 0
 306 001e 0123     		movs	r3, #1
 307 0020 5BE0     		b	.L15
 308              	.L16:
 437:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 438:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* LIN mode limited to 8-bit data length */
ARM GAS  /tmp/cca0gMDq.s 			page 14


 439:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(huart->Init.WordLength != UART_WORDLENGTH_8B)
 309              		.loc 1 439 0
 310 0022 7B68     		ldr	r3, [r7, #4]
 311 0024 9B68     		ldr	r3, [r3, #8]
 312 0026 002B     		cmp	r3, #0
 313 0028 01D0     		beq	.L17
 440:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 441:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_ERROR;
 314              		.loc 1 441 0
 315 002a 0123     		movs	r3, #1
 316 002c 55E0     		b	.L15
 317              	.L17:
 442:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 443:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 444:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_RESET)
 318              		.loc 1 444 0
 319 002e 7B68     		ldr	r3, [r7, #4]
 320 0030 93F86930 		ldrb	r3, [r3, #105]
 321 0034 DBB2     		uxtb	r3, r3
 322 0036 002B     		cmp	r3, #0
 323 0038 06D1     		bne	.L18
 445:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 446:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 447:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 324              		.loc 1 447 0
 325 003a 7B68     		ldr	r3, [r7, #4]
 326 003c 0022     		movs	r2, #0
 327 003e 83F86820 		strb	r2, [r3, #104]
 448:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 449:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 450:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 328              		.loc 1 450 0
 329 0042 7868     		ldr	r0, [r7, #4]
 330 0044 FFF7FEFF 		bl	HAL_UART_MspInit
 331              	.L18:
 451:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 452:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 453:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 332              		.loc 1 453 0
 333 0048 7B68     		ldr	r3, [r7, #4]
 334 004a 2422     		movs	r2, #36
 335 004c 83F86920 		strb	r2, [r3, #105]
 454:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 455:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable the Peripheral */
 456:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 336              		.loc 1 456 0
 337 0050 7B68     		ldr	r3, [r7, #4]
 338 0052 1B68     		ldr	r3, [r3]
 339 0054 7A68     		ldr	r2, [r7, #4]
 340 0056 1268     		ldr	r2, [r2]
 341 0058 1268     		ldr	r2, [r2]
 342 005a 22F00102 		bic	r2, r2, #1
 343 005e 1A60     		str	r2, [r3]
 457:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 458:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Set the UART Communication parameters */
 459:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 344              		.loc 1 459 0
ARM GAS  /tmp/cca0gMDq.s 			page 15


 345 0060 7868     		ldr	r0, [r7, #4]
 346 0062 FFF7FEFF 		bl	UART_SetConfig
 347 0066 0346     		mov	r3, r0
 348 0068 012B     		cmp	r3, #1
 349 006a 01D1     		bne	.L19
 460:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 461:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_ERROR;
 350              		.loc 1 461 0
 351 006c 0123     		movs	r3, #1
 352 006e 34E0     		b	.L15
 353              	.L19:
 462:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 463:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 464:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 354              		.loc 1 464 0
 355 0070 7B68     		ldr	r3, [r7, #4]
 356 0072 5B6A     		ldr	r3, [r3, #36]
 357 0074 002B     		cmp	r3, #0
 358 0076 02D0     		beq	.L20
 465:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 466:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 359              		.loc 1 466 0
 360 0078 7868     		ldr	r0, [r7, #4]
 361 007a FFF7FEFF 		bl	UART_AdvFeatureConfig
 362              	.L20:
 467:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 468:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 469:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* In LIN mode, the following bits must be kept cleared:
 470:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 471:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   - SCEN and IREN bits in the USART_CR3 register.*/
 472:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 363              		.loc 1 472 0
 364 007e 7B68     		ldr	r3, [r7, #4]
 365 0080 1B68     		ldr	r3, [r3]
 366 0082 7A68     		ldr	r2, [r7, #4]
 367 0084 1268     		ldr	r2, [r2]
 368 0086 5268     		ldr	r2, [r2, #4]
 369 0088 22F40062 		bic	r2, r2, #2048
 370 008c 5A60     		str	r2, [r3, #4]
 473:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 371              		.loc 1 473 0
 372 008e 7B68     		ldr	r3, [r7, #4]
 373 0090 1B68     		ldr	r3, [r3]
 374 0092 7A68     		ldr	r2, [r7, #4]
 375 0094 1268     		ldr	r2, [r2]
 376 0096 9268     		ldr	r2, [r2, #8]
 377 0098 22F02A02 		bic	r2, r2, #42
 378 009c 9A60     		str	r2, [r3, #8]
 474:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 475:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 476:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 379              		.loc 1 476 0
 380 009e 7B68     		ldr	r3, [r7, #4]
 381 00a0 1B68     		ldr	r3, [r3]
 382 00a2 7A68     		ldr	r2, [r7, #4]
 383 00a4 1268     		ldr	r2, [r2]
 384 00a6 5268     		ldr	r2, [r2, #4]
ARM GAS  /tmp/cca0gMDq.s 			page 16


 385 00a8 42F48042 		orr	r2, r2, #16384
 386 00ac 5A60     		str	r2, [r3, #4]
 477:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 478:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Set the USART LIN Break detection length. */
 479:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 387              		.loc 1 479 0
 388 00ae 7B68     		ldr	r3, [r7, #4]
 389 00b0 1B68     		ldr	r3, [r3]
 390 00b2 7A68     		ldr	r2, [r7, #4]
 391 00b4 1268     		ldr	r2, [r2]
 392 00b6 5268     		ldr	r2, [r2, #4]
 393 00b8 22F02001 		bic	r1, r2, #32
 394 00bc 3A68     		ldr	r2, [r7]
 395 00be 0A43     		orrs	r2, r2, r1
 396 00c0 5A60     		str	r2, [r3, #4]
 480:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 481:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Enable the Peripheral */
 482:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 397              		.loc 1 482 0
 398 00c2 7B68     		ldr	r3, [r7, #4]
 399 00c4 1B68     		ldr	r3, [r3]
 400 00c6 7A68     		ldr	r2, [r7, #4]
 401 00c8 1268     		ldr	r2, [r2]
 402 00ca 1268     		ldr	r2, [r2]
 403 00cc 42F00102 		orr	r2, r2, #1
 404 00d0 1A60     		str	r2, [r3]
 483:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 484:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 485:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 405              		.loc 1 485 0
 406 00d2 7868     		ldr	r0, [r7, #4]
 407 00d4 FFF7FEFF 		bl	UART_CheckIdleState
 408 00d8 0346     		mov	r3, r0
 409              	.L15:
 486:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 410              		.loc 1 486 0
 411 00da 1846     		mov	r0, r3
 412 00dc 0837     		adds	r7, r7, #8
 413              	.LCFI13:
 414              		.cfi_def_cfa_offset 8
 415 00de BD46     		mov	sp, r7
 416              	.LCFI14:
 417              		.cfi_def_cfa_register 13
 418              		@ sp needed
 419 00e0 80BD     		pop	{r7, pc}
 420              		.cfi_endproc
 421              	.LFE125:
 423 00e2 00BF     		.section	.text.HAL_MultiProcessor_Init,"ax",%progbits
 424              		.align	2
 425              		.global	HAL_MultiProcessor_Init
 426              		.thumb
 427              		.thumb_func
 429              	HAL_MultiProcessor_Init:
 430              	.LFB126:
 487:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 488:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 489:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
ARM GAS  /tmp/cca0gMDq.s 			page 17


 490:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Initialize the multiprocessor mode according to the specified
 491:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and initialize the associated handle.
 492:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
 493:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param Address UART node address (4-, 6-, 7- or 8-bit long).
 494:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param WakeUpMethod specifies the UART wakeup method.
 495:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *        This parameter can be one of the following values:
 496:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *          @arg @ref UART_WAKEUPMETHOD_IDLELINE WakeUp by an idle line detection
 497:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *          @arg @ref UART_WAKEUPMETHOD_ADDRESSMARK WakeUp by an address mark
 498:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note  If the user resorts to idle line detection wake up, the Address parameter
 499:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *        is useless and ignored by the initialization function.
 500:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note  If the user resorts to address mark wake up, the address length detection
 501:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *        is configured by default to 4 bits only. For the UART to be able to
 502:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *        manage 6-, 7- or 8-bit long addresses detection, the API
 503:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
 504:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *        HAL_MultiProcessor_Init().
 505:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
 506:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 507:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t Wake
 508:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 431              		.loc 1 508 0
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 16
 434              		@ frame_needed = 1, uses_anonymous_args = 0
 435 0000 80B5     		push	{r7, lr}
 436              	.LCFI15:
 437              		.cfi_def_cfa_offset 8
 438              		.cfi_offset 7, -8
 439              		.cfi_offset 14, -4
 440 0002 84B0     		sub	sp, sp, #16
 441              	.LCFI16:
 442              		.cfi_def_cfa_offset 24
 443 0004 00AF     		add	r7, sp, #0
 444              	.LCFI17:
 445              		.cfi_def_cfa_register 7
 446 0006 F860     		str	r0, [r7, #12]
 447 0008 0B46     		mov	r3, r1
 448 000a 7A60     		str	r2, [r7, #4]
 449 000c FB72     		strb	r3, [r7, #11]
 509:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check the UART handle allocation */
 510:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(huart == NULL)
 450              		.loc 1 510 0
 451 000e FB68     		ldr	r3, [r7, #12]
 452 0010 002B     		cmp	r3, #0
 453 0012 01D1     		bne	.L22
 511:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 512:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_ERROR;
 454              		.loc 1 512 0
 455 0014 0123     		movs	r3, #1
 456 0016 5CE0     		b	.L23
 457              	.L22:
 513:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 514:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 515:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check the wake up method parameter */
 516:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 517:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 518:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_RESET)
 458              		.loc 1 518 0
ARM GAS  /tmp/cca0gMDq.s 			page 18


 459 0018 FB68     		ldr	r3, [r7, #12]
 460 001a 93F86930 		ldrb	r3, [r3, #105]
 461 001e DBB2     		uxtb	r3, r3
 462 0020 002B     		cmp	r3, #0
 463 0022 06D1     		bne	.L24
 519:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 520:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 521:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 464              		.loc 1 521 0
 465 0024 FB68     		ldr	r3, [r7, #12]
 466 0026 0022     		movs	r2, #0
 467 0028 83F86820 		strb	r2, [r3, #104]
 522:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 523:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 524:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 468              		.loc 1 524 0
 469 002c F868     		ldr	r0, [r7, #12]
 470 002e FFF7FEFF 		bl	HAL_UART_MspInit
 471              	.L24:
 525:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 526:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 527:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 472              		.loc 1 527 0
 473 0032 FB68     		ldr	r3, [r7, #12]
 474 0034 2422     		movs	r2, #36
 475 0036 83F86920 		strb	r2, [r3, #105]
 528:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 529:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable the Peripheral */
 530:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 476              		.loc 1 530 0
 477 003a FB68     		ldr	r3, [r7, #12]
 478 003c 1B68     		ldr	r3, [r3]
 479 003e FA68     		ldr	r2, [r7, #12]
 480 0040 1268     		ldr	r2, [r2]
 481 0042 1268     		ldr	r2, [r2]
 482 0044 22F00102 		bic	r2, r2, #1
 483 0048 1A60     		str	r2, [r3]
 531:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 532:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Set the UART Communication parameters */
 533:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 484              		.loc 1 533 0
 485 004a F868     		ldr	r0, [r7, #12]
 486 004c FFF7FEFF 		bl	UART_SetConfig
 487 0050 0346     		mov	r3, r0
 488 0052 012B     		cmp	r3, #1
 489 0054 01D1     		bne	.L25
 534:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 535:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_ERROR;
 490              		.loc 1 535 0
 491 0056 0123     		movs	r3, #1
 492 0058 3BE0     		b	.L23
 493              	.L25:
 536:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 537:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 538:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 494              		.loc 1 538 0
 495 005a FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cca0gMDq.s 			page 19


 496 005c 5B6A     		ldr	r3, [r3, #36]
 497 005e 002B     		cmp	r3, #0
 498 0060 02D0     		beq	.L26
 539:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 540:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 499              		.loc 1 540 0
 500 0062 F868     		ldr	r0, [r7, #12]
 501 0064 FFF7FEFF 		bl	UART_AdvFeatureConfig
 502              	.L26:
 541:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 542:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 543:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* In multiprocessor mode, the following bits must be kept cleared:
 544:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 545:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
 546:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 503              		.loc 1 546 0
 504 0068 FB68     		ldr	r3, [r7, #12]
 505 006a 1B68     		ldr	r3, [r3]
 506 006c FA68     		ldr	r2, [r7, #12]
 507 006e 1268     		ldr	r2, [r2]
 508 0070 5268     		ldr	r2, [r2, #4]
 509 0072 22F49042 		bic	r2, r2, #18432
 510 0076 5A60     		str	r2, [r3, #4]
 547:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 511              		.loc 1 547 0
 512 0078 FB68     		ldr	r3, [r7, #12]
 513 007a 1B68     		ldr	r3, [r3]
 514 007c FA68     		ldr	r2, [r7, #12]
 515 007e 1268     		ldr	r2, [r2]
 516 0080 9268     		ldr	r2, [r2, #8]
 517 0082 22F02A02 		bic	r2, r2, #42
 518 0086 9A60     		str	r2, [r3, #8]
 548:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 549:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 519              		.loc 1 549 0
 520 0088 7B68     		ldr	r3, [r7, #4]
 521 008a B3F5006F 		cmp	r3, #2048
 522 008e 0AD1     		bne	.L27
 550:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 551:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* If address mark wake up method is chosen, set the USART address node */
 552:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS)
 523              		.loc 1 552 0
 524 0090 FB68     		ldr	r3, [r7, #12]
 525 0092 1B68     		ldr	r3, [r3]
 526 0094 FA68     		ldr	r2, [r7, #12]
 527 0096 1268     		ldr	r2, [r2]
 528 0098 5268     		ldr	r2, [r2, #4]
 529 009a 22F07F41 		bic	r1, r2, #-16777216
 530 009e FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 531 00a0 1206     		lsls	r2, r2, #24
 532 00a2 0A43     		orrs	r2, r2, r1
 533 00a4 5A60     		str	r2, [r3, #4]
 534              	.L27:
 553:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 554:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 555:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Set the wake up method by setting the WAKE bit in the CR1 register */
 556:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
ARM GAS  /tmp/cca0gMDq.s 			page 20


 535              		.loc 1 556 0
 536 00a6 FB68     		ldr	r3, [r7, #12]
 537 00a8 1B68     		ldr	r3, [r3]
 538 00aa FA68     		ldr	r2, [r7, #12]
 539 00ac 1268     		ldr	r2, [r2]
 540 00ae 1268     		ldr	r2, [r2]
 541 00b0 22F40061 		bic	r1, r2, #2048
 542 00b4 7A68     		ldr	r2, [r7, #4]
 543 00b6 0A43     		orrs	r2, r2, r1
 544 00b8 1A60     		str	r2, [r3]
 557:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 558:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Enable the Peripheral */
 559:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 545              		.loc 1 559 0
 546 00ba FB68     		ldr	r3, [r7, #12]
 547 00bc 1B68     		ldr	r3, [r3]
 548 00be FA68     		ldr	r2, [r7, #12]
 549 00c0 1268     		ldr	r2, [r2]
 550 00c2 1268     		ldr	r2, [r2]
 551 00c4 42F00102 		orr	r2, r2, #1
 552 00c8 1A60     		str	r2, [r3]
 560:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 561:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 562:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 553              		.loc 1 562 0
 554 00ca F868     		ldr	r0, [r7, #12]
 555 00cc FFF7FEFF 		bl	UART_CheckIdleState
 556 00d0 0346     		mov	r3, r0
 557              	.L23:
 563:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 558              		.loc 1 563 0
 559 00d2 1846     		mov	r0, r3
 560 00d4 1037     		adds	r7, r7, #16
 561              	.LCFI18:
 562              		.cfi_def_cfa_offset 8
 563 00d6 BD46     		mov	sp, r7
 564              	.LCFI19:
 565              		.cfi_def_cfa_register 13
 566              		@ sp needed
 567 00d8 80BD     		pop	{r7, pc}
 568              		.cfi_endproc
 569              	.LFE126:
 571 00da 00BF     		.section	.text.HAL_UART_DeInit,"ax",%progbits
 572              		.align	2
 573              		.global	HAL_UART_DeInit
 574              		.thumb
 575              		.thumb_func
 577              	HAL_UART_DeInit:
 578              	.LFB127:
 564:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 565:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 566:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 567:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief DeInitialize the UART peripheral.
 568:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
 569:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
 570:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 571:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
ARM GAS  /tmp/cca0gMDq.s 			page 21


 572:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 579              		.loc 1 572 0
 580              		.cfi_startproc
 581              		@ args = 0, pretend = 0, frame = 8
 582              		@ frame_needed = 1, uses_anonymous_args = 0
 583 0000 80B5     		push	{r7, lr}
 584              	.LCFI20:
 585              		.cfi_def_cfa_offset 8
 586              		.cfi_offset 7, -8
 587              		.cfi_offset 14, -4
 588 0002 82B0     		sub	sp, sp, #8
 589              	.LCFI21:
 590              		.cfi_def_cfa_offset 16
 591 0004 00AF     		add	r7, sp, #0
 592              	.LCFI22:
 593              		.cfi_def_cfa_register 7
 594 0006 7860     		str	r0, [r7, #4]
 573:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check the UART handle allocation */
 574:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(huart == NULL)
 595              		.loc 1 574 0
 596 0008 7B68     		ldr	r3, [r7, #4]
 597 000a 002B     		cmp	r3, #0
 598 000c 01D1     		bne	.L29
 575:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 576:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_ERROR;
 599              		.loc 1 576 0
 600 000e 0123     		movs	r3, #1
 601 0010 2AE0     		b	.L30
 602              	.L29:
 577:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 578:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 579:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check the parameters */
 580:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_INSTANCE(huart->Instance));
 581:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 582:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 603              		.loc 1 582 0
 604 0012 7B68     		ldr	r3, [r7, #4]
 605 0014 2422     		movs	r2, #36
 606 0016 83F86920 		strb	r2, [r3, #105]
 583:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 584:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable the Peripheral */
 585:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 607              		.loc 1 585 0
 608 001a 7B68     		ldr	r3, [r7, #4]
 609 001c 1B68     		ldr	r3, [r3]
 610 001e 7A68     		ldr	r2, [r7, #4]
 611 0020 1268     		ldr	r2, [r2]
 612 0022 1268     		ldr	r2, [r2]
 613 0024 22F00102 		bic	r2, r2, #1
 614 0028 1A60     		str	r2, [r3]
 586:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 587:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->Instance->CR1 = 0x0U;
 615              		.loc 1 587 0
 616 002a 7B68     		ldr	r3, [r7, #4]
 617 002c 1B68     		ldr	r3, [r3]
 618 002e 0022     		movs	r2, #0
 619 0030 1A60     		str	r2, [r3]
ARM GAS  /tmp/cca0gMDq.s 			page 22


 588:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->Instance->CR2 = 0x0U;
 620              		.loc 1 588 0
 621 0032 7B68     		ldr	r3, [r7, #4]
 622 0034 1B68     		ldr	r3, [r3]
 623 0036 0022     		movs	r2, #0
 624 0038 5A60     		str	r2, [r3, #4]
 589:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->Instance->CR3 = 0x0U;
 625              		.loc 1 589 0
 626 003a 7B68     		ldr	r3, [r7, #4]
 627 003c 1B68     		ldr	r3, [r3]
 628 003e 0022     		movs	r2, #0
 629 0040 9A60     		str	r2, [r3, #8]
 590:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 591:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* DeInit the low level hardware */
 592:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_UART_MspDeInit(huart);
 630              		.loc 1 592 0
 631 0042 7868     		ldr	r0, [r7, #4]
 632 0044 FFF7FEFF 		bl	HAL_UART_MspDeInit
 593:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 594:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 633              		.loc 1 594 0
 634 0048 7B68     		ldr	r3, [r7, #4]
 635 004a 0022     		movs	r2, #0
 636 004c DA66     		str	r2, [r3, #108]
 595:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState    = HAL_UART_STATE_RESET;
 637              		.loc 1 595 0
 638 004e 7B68     		ldr	r3, [r7, #4]
 639 0050 0022     		movs	r2, #0
 640 0052 83F86920 		strb	r2, [r3, #105]
 596:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxState   = HAL_UART_STATE_RESET;
 641              		.loc 1 596 0
 642 0056 7B68     		ldr	r3, [r7, #4]
 643 0058 0022     		movs	r2, #0
 644 005a 83F86A20 		strb	r2, [r3, #106]
 597:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 598:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Process Unlock */
 599:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 645              		.loc 1 599 0
 646 005e 7B68     		ldr	r3, [r7, #4]
 647 0060 0022     		movs	r2, #0
 648 0062 83F86820 		strb	r2, [r3, #104]
 600:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 601:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 649              		.loc 1 601 0
 650 0066 0023     		movs	r3, #0
 651              	.L30:
 602:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 652              		.loc 1 602 0
 653 0068 1846     		mov	r0, r3
 654 006a 0837     		adds	r7, r7, #8
 655              	.LCFI23:
 656              		.cfi_def_cfa_offset 8
 657 006c BD46     		mov	sp, r7
 658              	.LCFI24:
 659              		.cfi_def_cfa_register 13
 660              		@ sp needed
 661 006e 80BD     		pop	{r7, pc}
ARM GAS  /tmp/cca0gMDq.s 			page 23


 662              		.cfi_endproc
 663              	.LFE127:
 665              		.section	.text.HAL_UART_MspInit,"ax",%progbits
 666              		.align	2
 667              		.weak	HAL_UART_MspInit
 668              		.thumb
 669              		.thumb_func
 671              	HAL_UART_MspInit:
 672              	.LFB128:
 603:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 604:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 605:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Initialize the UART MSP.
 606:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
 607:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
 608:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 609:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
 610:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 673              		.loc 1 610 0
 674              		.cfi_startproc
 675              		@ args = 0, pretend = 0, frame = 8
 676              		@ frame_needed = 1, uses_anonymous_args = 0
 677              		@ link register save eliminated.
 678 0000 80B4     		push	{r7}
 679              	.LCFI25:
 680              		.cfi_def_cfa_offset 4
 681              		.cfi_offset 7, -4
 682 0002 83B0     		sub	sp, sp, #12
 683              	.LCFI26:
 684              		.cfi_def_cfa_offset 16
 685 0004 00AF     		add	r7, sp, #0
 686              	.LCFI27:
 687              		.cfi_def_cfa_register 7
 688 0006 7860     		str	r0, [r7, #4]
 611:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 612:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UNUSED(huart);
 613:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 614:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 615:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             the HAL_UART_MspInit can be implemented in the user file
 616:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    */
 617:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 689              		.loc 1 617 0
 690 0008 0C37     		adds	r7, r7, #12
 691              	.LCFI28:
 692              		.cfi_def_cfa_offset 4
 693 000a BD46     		mov	sp, r7
 694              	.LCFI29:
 695              		.cfi_def_cfa_register 13
 696              		@ sp needed
 697 000c 5DF8047B 		ldr	r7, [sp], #4
 698              	.LCFI30:
 699              		.cfi_restore 7
 700              		.cfi_def_cfa_offset 0
 701 0010 7047     		bx	lr
 702              		.cfi_endproc
 703              	.LFE128:
 705 0012 00BF     		.section	.text.HAL_UART_MspDeInit,"ax",%progbits
 706              		.align	2
ARM GAS  /tmp/cca0gMDq.s 			page 24


 707              		.weak	HAL_UART_MspDeInit
 708              		.thumb
 709              		.thumb_func
 711              	HAL_UART_MspDeInit:
 712              	.LFB129:
 618:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 619:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 620:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief DeInitialize the UART MSP.
 621:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
 622:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
 623:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 624:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
 625:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 713              		.loc 1 625 0
 714              		.cfi_startproc
 715              		@ args = 0, pretend = 0, frame = 8
 716              		@ frame_needed = 1, uses_anonymous_args = 0
 717              		@ link register save eliminated.
 718 0000 80B4     		push	{r7}
 719              	.LCFI31:
 720              		.cfi_def_cfa_offset 4
 721              		.cfi_offset 7, -4
 722 0002 83B0     		sub	sp, sp, #12
 723              	.LCFI32:
 724              		.cfi_def_cfa_offset 16
 725 0004 00AF     		add	r7, sp, #0
 726              	.LCFI33:
 727              		.cfi_def_cfa_register 7
 728 0006 7860     		str	r0, [r7, #4]
 626:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 627:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UNUSED(huart);
 628:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 629:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 630:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             the HAL_UART_MspDeInit can be implemented in the user file
 631:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    */
 632:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 729              		.loc 1 632 0
 730 0008 0C37     		adds	r7, r7, #12
 731              	.LCFI34:
 732              		.cfi_def_cfa_offset 4
 733 000a BD46     		mov	sp, r7
 734              	.LCFI35:
 735              		.cfi_def_cfa_register 13
 736              		@ sp needed
 737 000c 5DF8047B 		ldr	r7, [sp], #4
 738              	.LCFI36:
 739              		.cfi_restore 7
 740              		.cfi_def_cfa_offset 0
 741 0010 7047     		bx	lr
 742              		.cfi_endproc
 743              	.LFE129:
 745 0012 00BF     		.section	.text.HAL_UART_Transmit,"ax",%progbits
 746              		.align	2
 747              		.global	HAL_UART_Transmit
 748              		.thumb
 749              		.thumb_func
 751              	HAL_UART_Transmit:
ARM GAS  /tmp/cca0gMDq.s 			page 25


 752              	.LFB130:
 633:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 634:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 635:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @}
 636:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 637:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 638:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group2 IO operation functions
 639:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief UART Transmit/Receive functions
 640:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *
 641:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** @verbatim
 642:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****  ===============================================================================
 643:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****                       ##### IO operation functions #####
 644:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****  ===============================================================================
 645:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     This subsection provides a set of functions allowing to manage the UART asynchronous
 646:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     and Half duplex data transfers.
 647:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 648:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) There are two mode of transfer:
 649:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (++) Blocking mode: The communication is performed in polling mode.
 650:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            The HAL status of all data processing is returned by the same function
 651:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            after finishing transfer.
 652:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (++) Non-Blocking mode: The communication is performed using Interrupts
 653:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            or DMA, These API's return the HAL status.
 654:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            The end of the data processing will be indicated through the
 655:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when
 656:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            using DMA mode.
 657:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            The HAL_UART_TxCpltCallback(), HAL_UART_RxCpltCallback() user callbacks
 658:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            will be executed respectively at the end of the transmit or Receive process
 659:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a communication error is
 660:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 661:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) Blocking mode API's are :
 662:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) HAL_UART_Transmit()
 663:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) HAL_UART_Receive()
 664:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 665:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) Non-Blocking mode API's with Interrupt are :
 666:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) HAL_UART_Transmit_IT()
 667:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) HAL_UART_Receive_IT()
 668:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) HAL_UART_IRQHandler()
 669:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 670:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) Non-Blocking mode API's with DMA are :
 671:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) HAL_UART_Transmit_DMA()
 672:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) HAL_UART_Receive_DMA()
 673:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) HAL_UART_DMAPause()
 674:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) HAL_UART_DMAResume()
 675:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) HAL_UART_DMAStop()
 676:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 677:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) A set of Transfer Complete Callbacks are provided in Non_Blocking mode:
 678:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) HAL_UART_TxHalfCpltCallback()
 679:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) HAL_UART_TxCpltCallback()
 680:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) HAL_UART_RxHalfCpltCallback()
 681:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) HAL_UART_RxCpltCallback()
 682:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) HAL_UART_ErrorCallback()
 683:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 684:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) Non-Blocking mode transfers could be aborted using Abort API's :
 685:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) HAL_UART_Abort()
 686:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) HAL_UART_AbortTransmit()
 687:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) HAL_UART_AbortReceive()
 688:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) HAL_UART_Abort_IT()
ARM GAS  /tmp/cca0gMDq.s 			page 26


 689:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) HAL_UART_AbortTransmit_IT()
 690:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) HAL_UART_AbortReceive_IT()
 691:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 692:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) For Abort services based on interrupts (HAL_UART_Abortxxx_IT), a set of Abort Complete Call
 693:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) HAL_UART_AbortCpltCallback()
 694:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) HAL_UART_AbortTransmitCpltCallback()
 695:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) HAL_UART_AbortReceiveCpltCallback()
 696:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 697:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     (#) In Non-Blocking mode transfers, possible errors are split into 2 categories.
 698:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         Errors are handled as follows :
 699:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) Error is considered as Recoverable and non blocking : Transfer could go till end, but 
 700:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****              to be evaluated by user : this concerns Frame Error, Parity Error or Noise Error in In
 701:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****              Received character is then retrieved and stored in Rx buffer, Error code is set to all
 702:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****              and HAL_UART_ErrorCallback() user callback is executed. Transfer is kept ongoing on UA
 703:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****              If user wants to abort it, Abort services should be called by user.
 704:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         (++) Error is considered as Blocking : Transfer could not be completed properly and is abor
 705:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****              This concerns Overrun Error In Interrupt mode reception and all errors in DMA mode.
 706:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****              Error code is set to allow user to identify error type, and HAL_UART_ErrorCallback() u
 707:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 708:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     -@- In the Half duplex communication, it is forbidden to run the transmit
 709:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         and receive process in parallel, the UART state HAL_UART_STATE_BUSY_TX_RX can't be useful.
 710:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 711:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** @endverbatim
 712:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @{
 713:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 714:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 715:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 716:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Send an amount of data in blocking mode.
 717:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
 718:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param pData Pointer to data buffer.
 719:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param Size Amount of data to be sent.
 720:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param Timeout Timeout duration.
 721:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
 722:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 723:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint3
 724:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 753              		.loc 1 724 0
 754              		.cfi_startproc
 755              		@ args = 0, pretend = 0, frame = 24
 756              		@ frame_needed = 1, uses_anonymous_args = 0
 757 0000 80B5     		push	{r7, lr}
 758              	.LCFI37:
 759              		.cfi_def_cfa_offset 8
 760              		.cfi_offset 7, -8
 761              		.cfi_offset 14, -4
 762 0002 88B0     		sub	sp, sp, #32
 763              	.LCFI38:
 764              		.cfi_def_cfa_offset 40
 765 0004 02AF     		add	r7, sp, #8
 766              	.LCFI39:
 767              		.cfi_def_cfa 7, 32
 768 0006 F860     		str	r0, [r7, #12]
 769 0008 B960     		str	r1, [r7, #8]
 770 000a 3B60     		str	r3, [r7]
 771 000c 1346     		mov	r3, r2	@ movhi
 772 000e FB80     		strh	r3, [r7, #6]	@ movhi
 725:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint16_t* tmp;
ARM GAS  /tmp/cca0gMDq.s 			page 27


 726:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint32_t tickstart = 0U;
 773              		.loc 1 726 0
 774 0010 0023     		movs	r3, #0
 775 0012 7B61     		str	r3, [r7, #20]
 727:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 728:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 729:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_READY)
 776              		.loc 1 729 0
 777 0014 FB68     		ldr	r3, [r7, #12]
 778 0016 93F86930 		ldrb	r3, [r3, #105]
 779 001a DBB2     		uxtb	r3, r3
 780 001c 202B     		cmp	r3, #32
 781 001e 77D1     		bne	.L34
 730:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 731:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0U))
 782              		.loc 1 731 0
 783 0020 BB68     		ldr	r3, [r7, #8]
 784 0022 002B     		cmp	r3, #0
 785 0024 02D0     		beq	.L35
 786              		.loc 1 731 0 is_stmt 0 discriminator 1
 787 0026 FB88     		ldrh	r3, [r7, #6]
 788 0028 002B     		cmp	r3, #0
 789 002a 01D1     		bne	.L36
 790              	.L35:
 732:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
 733:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return  HAL_ERROR;
 791              		.loc 1 733 0 is_stmt 1
 792 002c 0123     		movs	r3, #1
 793 002e 70E0     		b	.L37
 794              	.L36:
 734:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
 735:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 736:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Process Locked */
 737:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_LOCK(huart);
 795              		.loc 1 737 0
 796 0030 FB68     		ldr	r3, [r7, #12]
 797 0032 93F86830 		ldrb	r3, [r3, #104]	@ zero_extendqisi2
 798 0036 012B     		cmp	r3, #1
 799 0038 01D1     		bne	.L38
 800              		.loc 1 737 0 is_stmt 0 discriminator 1
 801 003a 0223     		movs	r3, #2
 802 003c 69E0     		b	.L37
 803              	.L38:
 804              		.loc 1 737 0 discriminator 2
 805 003e FB68     		ldr	r3, [r7, #12]
 806 0040 0122     		movs	r2, #1
 807 0042 83F86820 		strb	r2, [r3, #104]
 738:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 739:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 808              		.loc 1 739 0 is_stmt 1 discriminator 2
 809 0046 FB68     		ldr	r3, [r7, #12]
 810 0048 0022     		movs	r2, #0
 811 004a DA66     		str	r2, [r3, #108]
 740:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 812              		.loc 1 740 0 discriminator 2
 813 004c FB68     		ldr	r3, [r7, #12]
 814 004e 2122     		movs	r2, #33
ARM GAS  /tmp/cca0gMDq.s 			page 28


 815 0050 83F86920 		strb	r2, [r3, #105]
 741:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 742:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Init tickstart for timeout managment*/
 743:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     tickstart = HAL_GetTick();
 816              		.loc 1 743 0 discriminator 2
 817 0054 FFF7FEFF 		bl	HAL_GetTick
 818 0058 7861     		str	r0, [r7, #20]
 744:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 745:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->TxXferSize = Size;
 819              		.loc 1 745 0 discriminator 2
 820 005a FB68     		ldr	r3, [r7, #12]
 821 005c FA88     		ldrh	r2, [r7, #6]	@ movhi
 822 005e A3F85020 		strh	r2, [r3, #80]	@ movhi
 746:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->TxXferCount = Size;
 823              		.loc 1 746 0 discriminator 2
 824 0062 FB68     		ldr	r3, [r7, #12]
 825 0064 FA88     		ldrh	r2, [r7, #6]	@ movhi
 826 0066 A3F85220 		strh	r2, [r3, #82]	@ movhi
 747:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     while(huart->TxXferCount > 0U)
 827              		.loc 1 747 0 discriminator 2
 828 006a 34E0     		b	.L39
 829              	.L42:
 748:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
 749:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->TxXferCount--;
 830              		.loc 1 749 0
 831 006c FB68     		ldr	r3, [r7, #12]
 832 006e B3F85230 		ldrh	r3, [r3, #82]	@ movhi
 833 0072 9BB2     		uxth	r3, r3
 834 0074 013B     		subs	r3, r3, #1
 835 0076 9AB2     		uxth	r2, r3
 836 0078 FB68     		ldr	r3, [r7, #12]
 837 007a A3F85220 		strh	r2, [r3, #82]	@ movhi
 750:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 838              		.loc 1 750 0
 839 007e 3B68     		ldr	r3, [r7]
 840 0080 0093     		str	r3, [sp]
 841 0082 F868     		ldr	r0, [r7, #12]
 842 0084 8021     		movs	r1, #128
 843 0086 0022     		movs	r2, #0
 844 0088 7B69     		ldr	r3, [r7, #20]
 845 008a FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 846 008e 0346     		mov	r3, r0
 847 0090 002B     		cmp	r3, #0
 848 0092 01D0     		beq	.L40
 751:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
 752:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         return HAL_TIMEOUT;
 849              		.loc 1 752 0
 850 0094 0323     		movs	r3, #3
 851 0096 3CE0     		b	.L37
 852              	.L40:
 753:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
 754:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE
 853              		.loc 1 754 0
 854 0098 FB68     		ldr	r3, [r7, #12]
 855 009a 9B68     		ldr	r3, [r3, #8]
 856 009c B3F5805F 		cmp	r3, #4096
 857 00a0 11D1     		bne	.L41
ARM GAS  /tmp/cca0gMDq.s 			page 29


 858              		.loc 1 754 0 is_stmt 0 discriminator 1
 859 00a2 FB68     		ldr	r3, [r7, #12]
 860 00a4 1B69     		ldr	r3, [r3, #16]
 861 00a6 002B     		cmp	r3, #0
 862 00a8 0DD1     		bne	.L41
 755:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
 756:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         tmp = (uint16_t*) pData;
 863              		.loc 1 756 0 is_stmt 1
 864 00aa BB68     		ldr	r3, [r7, #8]
 865 00ac 3B61     		str	r3, [r7, #16]
 757:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 866              		.loc 1 757 0
 867 00ae FB68     		ldr	r3, [r7, #12]
 868 00b0 1B68     		ldr	r3, [r3]
 869 00b2 3A69     		ldr	r2, [r7, #16]
 870 00b4 1288     		ldrh	r2, [r2]
 871 00b6 C2F30802 		ubfx	r2, r2, #0, #9
 872 00ba 92B2     		uxth	r2, r2
 873 00bc 1A85     		strh	r2, [r3, #40]	@ movhi
 758:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         pData += 2U;
 874              		.loc 1 758 0
 875 00be BB68     		ldr	r3, [r7, #8]
 876 00c0 0233     		adds	r3, r3, #2
 877 00c2 BB60     		str	r3, [r7, #8]
 878 00c4 07E0     		b	.L39
 879              	.L41:
 759:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
 760:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       else
 761:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
 762:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 880              		.loc 1 762 0
 881 00c6 FB68     		ldr	r3, [r7, #12]
 882 00c8 1A68     		ldr	r2, [r3]
 883 00ca BB68     		ldr	r3, [r7, #8]
 884 00cc 591C     		adds	r1, r3, #1
 885 00ce B960     		str	r1, [r7, #8]
 886 00d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 887 00d2 9BB2     		uxth	r3, r3
 888 00d4 1385     		strh	r3, [r2, #40]	@ movhi
 889              	.L39:
 747:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
 890              		.loc 1 747 0
 891 00d6 FB68     		ldr	r3, [r7, #12]
 892 00d8 B3F85230 		ldrh	r3, [r3, #82]	@ movhi
 893 00dc 9BB2     		uxth	r3, r3
 894 00de 002B     		cmp	r3, #0
 895 00e0 C4D1     		bne	.L42
 763:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
 764:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
 765:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 896              		.loc 1 765 0
 897 00e2 3B68     		ldr	r3, [r7]
 898 00e4 0093     		str	r3, [sp]
 899 00e6 F868     		ldr	r0, [r7, #12]
 900 00e8 4021     		movs	r1, #64
 901 00ea 0022     		movs	r2, #0
 902 00ec 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/cca0gMDq.s 			page 30


 903 00ee FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 904 00f2 0346     		mov	r3, r0
 905 00f4 002B     		cmp	r3, #0
 906 00f6 01D0     		beq	.L43
 766:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
 767:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return HAL_TIMEOUT;
 907              		.loc 1 767 0
 908 00f8 0323     		movs	r3, #3
 909 00fa 0AE0     		b	.L37
 910              	.L43:
 768:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
 769:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 770:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* At end of Tx process, restore huart->gState to Ready */
 771:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 911              		.loc 1 771 0
 912 00fc FB68     		ldr	r3, [r7, #12]
 913 00fe 2022     		movs	r2, #32
 914 0100 83F86920 		strb	r2, [r3, #105]
 772:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 773:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Process Unlocked */
 774:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 915              		.loc 1 774 0
 916 0104 FB68     		ldr	r3, [r7, #12]
 917 0106 0022     		movs	r2, #0
 918 0108 83F86820 		strb	r2, [r3, #104]
 775:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 776:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_OK;
 919              		.loc 1 776 0
 920 010c 0023     		movs	r3, #0
 921 010e 00E0     		b	.L37
 922              	.L34:
 777:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 778:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
 779:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 780:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_BUSY;
 923              		.loc 1 780 0
 924 0110 0223     		movs	r3, #2
 925              	.L37:
 781:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 782:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 926              		.loc 1 782 0
 927 0112 1846     		mov	r0, r3
 928 0114 1837     		adds	r7, r7, #24
 929              	.LCFI40:
 930              		.cfi_def_cfa_offset 8
 931 0116 BD46     		mov	sp, r7
 932              	.LCFI41:
 933              		.cfi_def_cfa_register 13
 934              		@ sp needed
 935 0118 80BD     		pop	{r7, pc}
 936              		.cfi_endproc
 937              	.LFE130:
 939 011a 00BF     		.section	.text.HAL_UART_Receive,"ax",%progbits
 940              		.align	2
 941              		.global	HAL_UART_Receive
 942              		.thumb
 943              		.thumb_func
ARM GAS  /tmp/cca0gMDq.s 			page 31


 945              	HAL_UART_Receive:
 946              	.LFB131:
 783:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 784:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 785:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Receive an amount of data in blocking mode.
 786:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
 787:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param pData pointer to data buffer.
 788:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param Size amount of data to be received.
 789:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param Timeout Timeout duration.
 790:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
 791:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 792:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
 793:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 947              		.loc 1 793 0
 948              		.cfi_startproc
 949              		@ args = 0, pretend = 0, frame = 32
 950              		@ frame_needed = 1, uses_anonymous_args = 0
 951 0000 80B5     		push	{r7, lr}
 952              	.LCFI42:
 953              		.cfi_def_cfa_offset 8
 954              		.cfi_offset 7, -8
 955              		.cfi_offset 14, -4
 956 0002 8AB0     		sub	sp, sp, #40
 957              	.LCFI43:
 958              		.cfi_def_cfa_offset 48
 959 0004 02AF     		add	r7, sp, #8
 960              	.LCFI44:
 961              		.cfi_def_cfa 7, 40
 962 0006 F860     		str	r0, [r7, #12]
 963 0008 B960     		str	r1, [r7, #8]
 964 000a 3B60     		str	r3, [r7]
 965 000c 1346     		mov	r3, r2	@ movhi
 966 000e FB80     		strh	r3, [r7, #6]	@ movhi
 794:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint16_t* tmp;
 795:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint16_t uhMask;
 796:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint32_t tickstart = 0U;
 967              		.loc 1 796 0
 968 0010 0023     		movs	r3, #0
 969 0012 FB61     		str	r3, [r7, #28]
 797:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 798:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 799:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_READY)
 970              		.loc 1 799 0
 971 0014 FB68     		ldr	r3, [r7, #12]
 972 0016 93F86A30 		ldrb	r3, [r3, #106]
 973 001a DBB2     		uxtb	r3, r3
 974 001c 202B     		cmp	r3, #32
 975 001e 40F0AD80 		bne	.L45
 800:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 801:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0U))
 976              		.loc 1 801 0
 977 0022 BB68     		ldr	r3, [r7, #8]
 978 0024 002B     		cmp	r3, #0
 979 0026 02D0     		beq	.L46
 980              		.loc 1 801 0 is_stmt 0 discriminator 1
 981 0028 FB88     		ldrh	r3, [r7, #6]
 982 002a 002B     		cmp	r3, #0
ARM GAS  /tmp/cca0gMDq.s 			page 32


 983 002c 01D1     		bne	.L47
 984              	.L46:
 802:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
 803:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return  HAL_ERROR;
 985              		.loc 1 803 0 is_stmt 1
 986 002e 0123     		movs	r3, #1
 987 0030 A5E0     		b	.L48
 988              	.L47:
 804:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
 805:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 806:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Process Locked */
 807:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_LOCK(huart);
 989              		.loc 1 807 0
 990 0032 FB68     		ldr	r3, [r7, #12]
 991 0034 93F86830 		ldrb	r3, [r3, #104]	@ zero_extendqisi2
 992 0038 012B     		cmp	r3, #1
 993 003a 01D1     		bne	.L49
 994              		.loc 1 807 0 is_stmt 0 discriminator 1
 995 003c 0223     		movs	r3, #2
 996 003e 9EE0     		b	.L48
 997              	.L49:
 998              		.loc 1 807 0 discriminator 2
 999 0040 FB68     		ldr	r3, [r7, #12]
 1000 0042 0122     		movs	r2, #1
 1001 0044 83F86820 		strb	r2, [r3, #104]
 808:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 809:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1002              		.loc 1 809 0 is_stmt 1 discriminator 2
 1003 0048 FB68     		ldr	r3, [r7, #12]
 1004 004a 0022     		movs	r2, #0
 1005 004c DA66     		str	r2, [r3, #108]
 810:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1006              		.loc 1 810 0 discriminator 2
 1007 004e FB68     		ldr	r3, [r7, #12]
 1008 0050 2222     		movs	r2, #34
 1009 0052 83F86A20 		strb	r2, [r3, #106]
 811:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 812:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Init tickstart for timeout managment*/
 813:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     tickstart = HAL_GetTick();
 1010              		.loc 1 813 0 discriminator 2
 1011 0056 FFF7FEFF 		bl	HAL_GetTick
 1012 005a F861     		str	r0, [r7, #28]
 814:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 815:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxXferSize = Size;
 1013              		.loc 1 815 0 discriminator 2
 1014 005c FB68     		ldr	r3, [r7, #12]
 1015 005e FA88     		ldrh	r2, [r7, #6]	@ movhi
 1016 0060 A3F85820 		strh	r2, [r3, #88]	@ movhi
 816:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxXferCount = Size;
 1017              		.loc 1 816 0 discriminator 2
 1018 0064 FB68     		ldr	r3, [r7, #12]
 1019 0066 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1020 0068 A3F85A20 		strh	r2, [r3, #90]	@ movhi
 817:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 818:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Computation of UART mask to apply to RDR register */
 819:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_MASK_COMPUTATION(huart);
 1021              		.loc 1 819 0 discriminator 2
ARM GAS  /tmp/cca0gMDq.s 			page 33


 1022 006c FB68     		ldr	r3, [r7, #12]
 1023 006e 9B68     		ldr	r3, [r3, #8]
 1024 0070 B3F5805F 		cmp	r3, #4096
 1025 0074 0ED1     		bne	.L50
 1026              		.loc 1 819 0 is_stmt 0 discriminator 1
 1027 0076 FB68     		ldr	r3, [r7, #12]
 1028 0078 1B69     		ldr	r3, [r3, #16]
 1029 007a 002B     		cmp	r3, #0
 1030 007c 05D1     		bne	.L51
 1031              		.loc 1 819 0 discriminator 3
 1032 007e FB68     		ldr	r3, [r7, #12]
 1033 0080 40F2FF12 		movw	r2, #511
 1034 0084 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 1035 0088 28E0     		b	.L53
 1036              	.L51:
 1037              		.loc 1 819 0 discriminator 4
 1038 008a FB68     		ldr	r3, [r7, #12]
 1039 008c FF22     		movs	r2, #255
 1040 008e A3F85C20 		strh	r2, [r3, #92]	@ movhi
 1041 0092 23E0     		b	.L53
 1042              	.L50:
 1043              		.loc 1 819 0 discriminator 2
 1044 0094 FB68     		ldr	r3, [r7, #12]
 1045 0096 9B68     		ldr	r3, [r3, #8]
 1046 0098 002B     		cmp	r3, #0
 1047 009a 0DD1     		bne	.L54
 1048              		.loc 1 819 0 discriminator 5
 1049 009c FB68     		ldr	r3, [r7, #12]
 1050 009e 1B69     		ldr	r3, [r3, #16]
 1051 00a0 002B     		cmp	r3, #0
 1052 00a2 04D1     		bne	.L55
 1053              		.loc 1 819 0 discriminator 7
 1054 00a4 FB68     		ldr	r3, [r7, #12]
 1055 00a6 FF22     		movs	r2, #255
 1056 00a8 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 1057 00ac 16E0     		b	.L53
 1058              	.L55:
 1059              		.loc 1 819 0 discriminator 8
 1060 00ae FB68     		ldr	r3, [r7, #12]
 1061 00b0 7F22     		movs	r2, #127
 1062 00b2 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 1063 00b6 11E0     		b	.L53
 1064              	.L54:
 1065              		.loc 1 819 0 discriminator 6
 1066 00b8 FB68     		ldr	r3, [r7, #12]
 1067 00ba 9B68     		ldr	r3, [r3, #8]
 1068 00bc B3F1805F 		cmp	r3, #268435456
 1069 00c0 0CD1     		bne	.L53
 1070              		.loc 1 819 0 discriminator 9
 1071 00c2 FB68     		ldr	r3, [r7, #12]
 1072 00c4 1B69     		ldr	r3, [r3, #16]
 1073 00c6 002B     		cmp	r3, #0
 1074 00c8 04D1     		bne	.L57
 1075              		.loc 1 819 0 discriminator 10
 1076 00ca FB68     		ldr	r3, [r7, #12]
 1077 00cc 7F22     		movs	r2, #127
 1078 00ce A3F85C20 		strh	r2, [r3, #92]	@ movhi
ARM GAS  /tmp/cca0gMDq.s 			page 34


 1079 00d2 03E0     		b	.L53
 1080              	.L57:
 1081              		.loc 1 819 0 discriminator 11
 1082 00d4 FB68     		ldr	r3, [r7, #12]
 1083 00d6 3F22     		movs	r2, #63
 1084 00d8 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 1085              	.L53:
 820:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     uhMask = huart->Mask;
 1086              		.loc 1 820 0 is_stmt 1
 1087 00dc FB68     		ldr	r3, [r7, #12]
 1088 00de B3F85C30 		ldrh	r3, [r3, #92]	@ movhi
 1089 00e2 7B83     		strh	r3, [r7, #26]	@ movhi
 821:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 822:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* as long as data have to be received */
 823:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     while(huart->RxXferCount > 0U)
 1090              		.loc 1 823 0
 1091 00e4 3AE0     		b	.L58
 1092              	.L61:
 824:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
 825:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->RxXferCount--;
 1093              		.loc 1 825 0
 1094 00e6 FB68     		ldr	r3, [r7, #12]
 1095 00e8 B3F85A30 		ldrh	r3, [r3, #90]	@ movhi
 1096 00ec 9BB2     		uxth	r3, r3
 1097 00ee 013B     		subs	r3, r3, #1
 1098 00f0 9AB2     		uxth	r2, r3
 1099 00f2 FB68     		ldr	r3, [r7, #12]
 1100 00f4 A3F85A20 		strh	r2, [r3, #90]	@ movhi
 826:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 1101              		.loc 1 826 0
 1102 00f8 3B68     		ldr	r3, [r7]
 1103 00fa 0093     		str	r3, [sp]
 1104 00fc F868     		ldr	r0, [r7, #12]
 1105 00fe 2021     		movs	r1, #32
 1106 0100 0022     		movs	r2, #0
 1107 0102 FB69     		ldr	r3, [r7, #28]
 1108 0104 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 1109 0108 0346     		mov	r3, r0
 1110 010a 002B     		cmp	r3, #0
 1111 010c 01D0     		beq	.L59
 827:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
 828:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         return HAL_TIMEOUT;
 1112              		.loc 1 828 0
 1113 010e 0323     		movs	r3, #3
 1114 0110 35E0     		b	.L48
 1115              	.L59:
 829:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
 830:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE
 1116              		.loc 1 830 0
 1117 0112 FB68     		ldr	r3, [r7, #12]
 1118 0114 9B68     		ldr	r3, [r3, #8]
 1119 0116 B3F5805F 		cmp	r3, #4096
 1120 011a 12D1     		bne	.L60
 1121              		.loc 1 830 0 is_stmt 0 discriminator 1
 1122 011c FB68     		ldr	r3, [r7, #12]
 1123 011e 1B69     		ldr	r3, [r3, #16]
 1124 0120 002B     		cmp	r3, #0
ARM GAS  /tmp/cca0gMDq.s 			page 35


 1125 0122 0ED1     		bne	.L60
 831:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
 832:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         tmp = (uint16_t*) pData ;
 1126              		.loc 1 832 0 is_stmt 1
 1127 0124 BB68     		ldr	r3, [r7, #8]
 1128 0126 7B61     		str	r3, [r7, #20]
 833:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 1129              		.loc 1 833 0
 1130 0128 FB68     		ldr	r3, [r7, #12]
 1131 012a 1B68     		ldr	r3, [r3]
 1132 012c 9B8C     		ldrh	r3, [r3, #36]	@ movhi
 1133 012e 9AB2     		uxth	r2, r3
 1134 0130 7B8B     		ldrh	r3, [r7, #26]	@ movhi
 1135 0132 1340     		ands	r3, r3, r2
 1136 0134 9AB2     		uxth	r2, r3
 1137 0136 7B69     		ldr	r3, [r7, #20]
 1138 0138 1A80     		strh	r2, [r3]	@ movhi
 834:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         pData +=2U;
 1139              		.loc 1 834 0
 1140 013a BB68     		ldr	r3, [r7, #8]
 1141 013c 0233     		adds	r3, r3, #2
 1142 013e BB60     		str	r3, [r7, #8]
 1143 0140 0CE0     		b	.L58
 1144              	.L60:
 835:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
 836:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       else
 837:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
 838:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 1145              		.loc 1 838 0
 1146 0142 BB68     		ldr	r3, [r7, #8]
 1147 0144 5A1C     		adds	r2, r3, #1
 1148 0146 BA60     		str	r2, [r7, #8]
 1149 0148 FA68     		ldr	r2, [r7, #12]
 1150 014a 1268     		ldr	r2, [r2]
 1151 014c 928C     		ldrh	r2, [r2, #36]	@ movhi
 1152 014e 92B2     		uxth	r2, r2
 1153 0150 D1B2     		uxtb	r1, r2
 1154 0152 7A8B     		ldrh	r2, [r7, #26]	@ movhi
 1155 0154 D2B2     		uxtb	r2, r2
 1156 0156 0A40     		ands	r2, r2, r1
 1157 0158 D2B2     		uxtb	r2, r2
 1158 015a 1A70     		strb	r2, [r3]
 1159              	.L58:
 823:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
 1160              		.loc 1 823 0
 1161 015c FB68     		ldr	r3, [r7, #12]
 1162 015e B3F85A30 		ldrh	r3, [r3, #90]	@ movhi
 1163 0162 9BB2     		uxth	r3, r3
 1164 0164 002B     		cmp	r3, #0
 1165 0166 BED1     		bne	.L61
 839:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
 840:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
 841:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 842:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
 843:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 1166              		.loc 1 843 0
 1167 0168 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cca0gMDq.s 			page 36


 1168 016a 2022     		movs	r2, #32
 1169 016c 83F86A20 		strb	r2, [r3, #106]
 844:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 845:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Process Unlocked */
 846:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1170              		.loc 1 846 0
 1171 0170 FB68     		ldr	r3, [r7, #12]
 1172 0172 0022     		movs	r2, #0
 1173 0174 83F86820 		strb	r2, [r3, #104]
 847:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 848:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_OK;
 1174              		.loc 1 848 0
 1175 0178 0023     		movs	r3, #0
 1176 017a 00E0     		b	.L48
 1177              	.L45:
 849:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 850:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
 851:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 852:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_BUSY;
 1178              		.loc 1 852 0
 1179 017c 0223     		movs	r3, #2
 1180              	.L48:
 853:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 854:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 1181              		.loc 1 854 0
 1182 017e 1846     		mov	r0, r3
 1183 0180 2037     		adds	r7, r7, #32
 1184              	.LCFI45:
 1185              		.cfi_def_cfa_offset 8
 1186 0182 BD46     		mov	sp, r7
 1187              	.LCFI46:
 1188              		.cfi_def_cfa_register 13
 1189              		@ sp needed
 1190 0184 80BD     		pop	{r7, pc}
 1191              		.cfi_endproc
 1192              	.LFE131:
 1194 0186 00BF     		.section	.text.HAL_UART_Transmit_IT,"ax",%progbits
 1195              		.align	2
 1196              		.global	HAL_UART_Transmit_IT
 1197              		.thumb
 1198              		.thumb_func
 1200              	HAL_UART_Transmit_IT:
 1201              	.LFB132:
 855:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 856:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 857:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Send an amount of data in interrupt mode.
 858:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
 859:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param pData pointer to data buffer.
 860:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param Size amount of data to be sent.
 861:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
 862:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 863:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 864:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 1202              		.loc 1 864 0
 1203              		.cfi_startproc
 1204              		@ args = 0, pretend = 0, frame = 16
 1205              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cca0gMDq.s 			page 37


 1206              		@ link register save eliminated.
 1207 0000 80B4     		push	{r7}
 1208              	.LCFI47:
 1209              		.cfi_def_cfa_offset 4
 1210              		.cfi_offset 7, -4
 1211 0002 85B0     		sub	sp, sp, #20
 1212              	.LCFI48:
 1213              		.cfi_def_cfa_offset 24
 1214 0004 00AF     		add	r7, sp, #0
 1215              	.LCFI49:
 1216              		.cfi_def_cfa_register 7
 1217 0006 F860     		str	r0, [r7, #12]
 1218 0008 B960     		str	r1, [r7, #8]
 1219 000a 1346     		mov	r3, r2
 1220 000c FB80     		strh	r3, [r7, #6]	@ movhi
 865:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 866:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_READY)
 1221              		.loc 1 866 0
 1222 000e FB68     		ldr	r3, [r7, #12]
 1223 0010 93F86930 		ldrb	r3, [r3, #105]
 1224 0014 DBB2     		uxtb	r3, r3
 1225 0016 202B     		cmp	r3, #32
 1226 0018 32D1     		bne	.L63
 867:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 868:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0U))
 1227              		.loc 1 868 0
 1228 001a BB68     		ldr	r3, [r7, #8]
 1229 001c 002B     		cmp	r3, #0
 1230 001e 02D0     		beq	.L64
 1231              		.loc 1 868 0 is_stmt 0 discriminator 1
 1232 0020 FB88     		ldrh	r3, [r7, #6]
 1233 0022 002B     		cmp	r3, #0
 1234 0024 01D1     		bne	.L65
 1235              	.L64:
 869:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
 870:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return HAL_ERROR;
 1236              		.loc 1 870 0 is_stmt 1
 1237 0026 0123     		movs	r3, #1
 1238 0028 2BE0     		b	.L66
 1239              	.L65:
 871:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
 872:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 873:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Process Locked */
 874:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_LOCK(huart);
 1240              		.loc 1 874 0
 1241 002a FB68     		ldr	r3, [r7, #12]
 1242 002c 93F86830 		ldrb	r3, [r3, #104]	@ zero_extendqisi2
 1243 0030 012B     		cmp	r3, #1
 1244 0032 01D1     		bne	.L67
 1245              		.loc 1 874 0 is_stmt 0 discriminator 1
 1246 0034 0223     		movs	r3, #2
 1247 0036 24E0     		b	.L66
 1248              	.L67:
 1249              		.loc 1 874 0 discriminator 2
 1250 0038 FB68     		ldr	r3, [r7, #12]
 1251 003a 0122     		movs	r2, #1
 1252 003c 83F86820 		strb	r2, [r3, #104]
ARM GAS  /tmp/cca0gMDq.s 			page 38


 875:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 876:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
 1253              		.loc 1 876 0 is_stmt 1 discriminator 2
 1254 0040 FB68     		ldr	r3, [r7, #12]
 1255 0042 BA68     		ldr	r2, [r7, #8]
 1256 0044 DA64     		str	r2, [r3, #76]
 877:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->TxXferSize = Size;
 1257              		.loc 1 877 0 discriminator 2
 1258 0046 FB68     		ldr	r3, [r7, #12]
 1259 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1260 004a A3F85020 		strh	r2, [r3, #80]	@ movhi
 878:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->TxXferCount = Size;
 1261              		.loc 1 878 0 discriminator 2
 1262 004e FB68     		ldr	r3, [r7, #12]
 1263 0050 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1264 0052 A3F85220 		strh	r2, [r3, #82]	@ movhi
 879:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 880:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1265              		.loc 1 880 0 discriminator 2
 1266 0056 FB68     		ldr	r3, [r7, #12]
 1267 0058 0022     		movs	r2, #0
 1268 005a DA66     		str	r2, [r3, #108]
 881:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1269              		.loc 1 881 0 discriminator 2
 1270 005c FB68     		ldr	r3, [r7, #12]
 1271 005e 2122     		movs	r2, #33
 1272 0060 83F86920 		strb	r2, [r3, #105]
 882:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 883:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Process Unlocked */
 884:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1273              		.loc 1 884 0 discriminator 2
 1274 0064 FB68     		ldr	r3, [r7, #12]
 1275 0066 0022     		movs	r2, #0
 1276 0068 83F86820 		strb	r2, [r3, #104]
 885:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 886:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Enable the UART Transmit Data Register Empty Interrupt */
 887:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 1277              		.loc 1 887 0 discriminator 2
 1278 006c FB68     		ldr	r3, [r7, #12]
 1279 006e 1B68     		ldr	r3, [r3]
 1280 0070 FA68     		ldr	r2, [r7, #12]
 1281 0072 1268     		ldr	r2, [r2]
 1282 0074 1268     		ldr	r2, [r2]
 1283 0076 42F08002 		orr	r2, r2, #128
 1284 007a 1A60     		str	r2, [r3]
 888:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 889:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_OK;
 1285              		.loc 1 889 0 discriminator 2
 1286 007c 0023     		movs	r3, #0
 1287 007e 00E0     		b	.L66
 1288              	.L63:
 890:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 891:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
 892:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 893:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_BUSY;
 1289              		.loc 1 893 0
 1290 0080 0223     		movs	r3, #2
ARM GAS  /tmp/cca0gMDq.s 			page 39


 1291              	.L66:
 894:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 895:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 1292              		.loc 1 895 0
 1293 0082 1846     		mov	r0, r3
 1294 0084 1437     		adds	r7, r7, #20
 1295              	.LCFI50:
 1296              		.cfi_def_cfa_offset 4
 1297 0086 BD46     		mov	sp, r7
 1298              	.LCFI51:
 1299              		.cfi_def_cfa_register 13
 1300              		@ sp needed
 1301 0088 5DF8047B 		ldr	r7, [sp], #4
 1302              	.LCFI52:
 1303              		.cfi_restore 7
 1304              		.cfi_def_cfa_offset 0
 1305 008c 7047     		bx	lr
 1306              		.cfi_endproc
 1307              	.LFE132:
 1309 008e 00BF     		.section	.text.HAL_UART_Receive_IT,"ax",%progbits
 1310              		.align	2
 1311              		.global	HAL_UART_Receive_IT
 1312              		.thumb
 1313              		.thumb_func
 1315              	HAL_UART_Receive_IT:
 1316              	.LFB133:
 896:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 897:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 898:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Receive an amount of data in interrupt mode.
 899:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
 900:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param pData pointer to data buffer.
 901:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param Size amount of data to be received.
 902:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
 903:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 904:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 905:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 1317              		.loc 1 905 0
 1318              		.cfi_startproc
 1319              		@ args = 0, pretend = 0, frame = 16
 1320              		@ frame_needed = 1, uses_anonymous_args = 0
 1321              		@ link register save eliminated.
 1322 0000 80B4     		push	{r7}
 1323              	.LCFI53:
 1324              		.cfi_def_cfa_offset 4
 1325              		.cfi_offset 7, -4
 1326 0002 85B0     		sub	sp, sp, #20
 1327              	.LCFI54:
 1328              		.cfi_def_cfa_offset 24
 1329 0004 00AF     		add	r7, sp, #0
 1330              	.LCFI55:
 1331              		.cfi_def_cfa_register 7
 1332 0006 F860     		str	r0, [r7, #12]
 1333 0008 B960     		str	r1, [r7, #8]
 1334 000a 1346     		mov	r3, r2
 1335 000c FB80     		strh	r3, [r7, #6]	@ movhi
 906:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 907:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_READY)
ARM GAS  /tmp/cca0gMDq.s 			page 40


 1336              		.loc 1 907 0
 1337 000e FB68     		ldr	r3, [r7, #12]
 1338 0010 93F86A30 		ldrb	r3, [r3, #106]
 1339 0014 DBB2     		uxtb	r3, r3
 1340 0016 202B     		cmp	r3, #32
 1341 0018 72D1     		bne	.L69
 908:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 909:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0U))
 1342              		.loc 1 909 0
 1343 001a BB68     		ldr	r3, [r7, #8]
 1344 001c 002B     		cmp	r3, #0
 1345 001e 02D0     		beq	.L70
 1346              		.loc 1 909 0 is_stmt 0 discriminator 1
 1347 0020 FB88     		ldrh	r3, [r7, #6]
 1348 0022 002B     		cmp	r3, #0
 1349 0024 01D1     		bne	.L71
 1350              	.L70:
 910:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
 911:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return HAL_ERROR;
 1351              		.loc 1 911 0 is_stmt 1
 1352 0026 0123     		movs	r3, #1
 1353 0028 6BE0     		b	.L72
 1354              	.L71:
 912:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
 913:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 914:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Process Locked */
 915:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_LOCK(huart);
 1355              		.loc 1 915 0
 1356 002a FB68     		ldr	r3, [r7, #12]
 1357 002c 93F86830 		ldrb	r3, [r3, #104]	@ zero_extendqisi2
 1358 0030 012B     		cmp	r3, #1
 1359 0032 01D1     		bne	.L73
 1360              		.loc 1 915 0 is_stmt 0 discriminator 1
 1361 0034 0223     		movs	r3, #2
 1362 0036 64E0     		b	.L72
 1363              	.L73:
 1364              		.loc 1 915 0 discriminator 2
 1365 0038 FB68     		ldr	r3, [r7, #12]
 1366 003a 0122     		movs	r2, #1
 1367 003c 83F86820 		strb	r2, [r3, #104]
 916:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 917:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->pRxBuffPtr = pData;
 1368              		.loc 1 917 0 is_stmt 1 discriminator 2
 1369 0040 FB68     		ldr	r3, [r7, #12]
 1370 0042 BA68     		ldr	r2, [r7, #8]
 1371 0044 5A65     		str	r2, [r3, #84]
 918:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxXferSize = Size;
 1372              		.loc 1 918 0 discriminator 2
 1373 0046 FB68     		ldr	r3, [r7, #12]
 1374 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1375 004a A3F85820 		strh	r2, [r3, #88]	@ movhi
 919:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxXferCount = Size;
 1376              		.loc 1 919 0 discriminator 2
 1377 004e FB68     		ldr	r3, [r7, #12]
 1378 0050 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1379 0052 A3F85A20 		strh	r2, [r3, #90]	@ movhi
 920:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/cca0gMDq.s 			page 41


 921:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Computation of UART mask to apply to RDR register */
 922:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_MASK_COMPUTATION(huart);
 1380              		.loc 1 922 0 discriminator 2
 1381 0056 FB68     		ldr	r3, [r7, #12]
 1382 0058 9B68     		ldr	r3, [r3, #8]
 1383 005a B3F5805F 		cmp	r3, #4096
 1384 005e 0ED1     		bne	.L74
 1385              		.loc 1 922 0 is_stmt 0 discriminator 1
 1386 0060 FB68     		ldr	r3, [r7, #12]
 1387 0062 1B69     		ldr	r3, [r3, #16]
 1388 0064 002B     		cmp	r3, #0
 1389 0066 05D1     		bne	.L75
 1390              		.loc 1 922 0 discriminator 3
 1391 0068 FB68     		ldr	r3, [r7, #12]
 1392 006a 40F2FF12 		movw	r2, #511
 1393 006e A3F85C20 		strh	r2, [r3, #92]	@ movhi
 1394 0072 28E0     		b	.L77
 1395              	.L75:
 1396              		.loc 1 922 0 discriminator 4
 1397 0074 FB68     		ldr	r3, [r7, #12]
 1398 0076 FF22     		movs	r2, #255
 1399 0078 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 1400 007c 23E0     		b	.L77
 1401              	.L74:
 1402              		.loc 1 922 0 discriminator 2
 1403 007e FB68     		ldr	r3, [r7, #12]
 1404 0080 9B68     		ldr	r3, [r3, #8]
 1405 0082 002B     		cmp	r3, #0
 1406 0084 0DD1     		bne	.L78
 1407              		.loc 1 922 0 discriminator 5
 1408 0086 FB68     		ldr	r3, [r7, #12]
 1409 0088 1B69     		ldr	r3, [r3, #16]
 1410 008a 002B     		cmp	r3, #0
 1411 008c 04D1     		bne	.L79
 1412              		.loc 1 922 0 discriminator 7
 1413 008e FB68     		ldr	r3, [r7, #12]
 1414 0090 FF22     		movs	r2, #255
 1415 0092 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 1416 0096 16E0     		b	.L77
 1417              	.L79:
 1418              		.loc 1 922 0 discriminator 8
 1419 0098 FB68     		ldr	r3, [r7, #12]
 1420 009a 7F22     		movs	r2, #127
 1421 009c A3F85C20 		strh	r2, [r3, #92]	@ movhi
 1422 00a0 11E0     		b	.L77
 1423              	.L78:
 1424              		.loc 1 922 0 discriminator 6
 1425 00a2 FB68     		ldr	r3, [r7, #12]
 1426 00a4 9B68     		ldr	r3, [r3, #8]
 1427 00a6 B3F1805F 		cmp	r3, #268435456
 1428 00aa 0CD1     		bne	.L77
 1429              		.loc 1 922 0 discriminator 9
 1430 00ac FB68     		ldr	r3, [r7, #12]
 1431 00ae 1B69     		ldr	r3, [r3, #16]
 1432 00b0 002B     		cmp	r3, #0
 1433 00b2 04D1     		bne	.L81
 1434              		.loc 1 922 0 discriminator 10
ARM GAS  /tmp/cca0gMDq.s 			page 42


 1435 00b4 FB68     		ldr	r3, [r7, #12]
 1436 00b6 7F22     		movs	r2, #127
 1437 00b8 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 1438 00bc 03E0     		b	.L77
 1439              	.L81:
 1440              		.loc 1 922 0 discriminator 11
 1441 00be FB68     		ldr	r3, [r7, #12]
 1442 00c0 3F22     		movs	r2, #63
 1443 00c2 A3F85C20 		strh	r2, [r3, #92]	@ movhi
 1444              	.L77:
 923:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 924:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1445              		.loc 1 924 0 is_stmt 1
 1446 00c6 FB68     		ldr	r3, [r7, #12]
 1447 00c8 0022     		movs	r2, #0
 1448 00ca DA66     		str	r2, [r3, #108]
 925:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1449              		.loc 1 925 0
 1450 00cc FB68     		ldr	r3, [r7, #12]
 1451 00ce 2222     		movs	r2, #34
 1452 00d0 83F86A20 		strb	r2, [r3, #106]
 926:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 927:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Process Unlocked */
 928:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1453              		.loc 1 928 0
 1454 00d4 FB68     		ldr	r3, [r7, #12]
 1455 00d6 0022     		movs	r2, #0
 1456 00d8 83F86820 		strb	r2, [r3, #104]
 929:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 930:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
 931:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1457              		.loc 1 931 0
 1458 00dc FB68     		ldr	r3, [r7, #12]
 1459 00de 1B68     		ldr	r3, [r3]
 1460 00e0 FA68     		ldr	r2, [r7, #12]
 1461 00e2 1268     		ldr	r2, [r2]
 1462 00e4 9268     		ldr	r2, [r2, #8]
 1463 00e6 42F00102 		orr	r2, r2, #1
 1464 00ea 9A60     		str	r2, [r3, #8]
 932:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 933:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Enable the UART Parity Error and Data Register not empty Interrupts */
 934:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 1465              		.loc 1 934 0
 1466 00ec FB68     		ldr	r3, [r7, #12]
 1467 00ee 1B68     		ldr	r3, [r3]
 1468 00f0 FA68     		ldr	r2, [r7, #12]
 1469 00f2 1268     		ldr	r2, [r2]
 1470 00f4 1268     		ldr	r2, [r2]
 1471 00f6 42F49072 		orr	r2, r2, #288
 1472 00fa 1A60     		str	r2, [r3]
 935:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 936:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_OK;
 1473              		.loc 1 936 0
 1474 00fc 0023     		movs	r3, #0
 1475 00fe 00E0     		b	.L72
 1476              	.L69:
 937:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
ARM GAS  /tmp/cca0gMDq.s 			page 43


 938:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
 939:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 940:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_BUSY;
 1477              		.loc 1 940 0
 1478 0100 0223     		movs	r3, #2
 1479              	.L72:
 941:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
 942:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 1480              		.loc 1 942 0
 1481 0102 1846     		mov	r0, r3
 1482 0104 1437     		adds	r7, r7, #20
 1483              	.LCFI56:
 1484              		.cfi_def_cfa_offset 4
 1485 0106 BD46     		mov	sp, r7
 1486              	.LCFI57:
 1487              		.cfi_def_cfa_register 13
 1488              		@ sp needed
 1489 0108 5DF8047B 		ldr	r7, [sp], #4
 1490              	.LCFI58:
 1491              		.cfi_restore 7
 1492              		.cfi_def_cfa_offset 0
 1493 010c 7047     		bx	lr
 1494              		.cfi_endproc
 1495              	.LFE133:
 1497 010e 00BF     		.section	.text.HAL_UART_Transmit_DMA,"ax",%progbits
 1498              		.align	2
 1499              		.global	HAL_UART_Transmit_DMA
 1500              		.thumb
 1501              		.thumb_func
 1503              	HAL_UART_Transmit_DMA:
 1504              	.LFB134:
 943:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 944:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
 945:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Send an amount of data in DMA mode.
 946:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
 947:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param pData pointer to data buffer.
 948:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param Size amount of data to be sent.
 949:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note This function starts a DMA transfer in interrupt mode meaning that
 950:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *       DMA half transfer complete, DMA transfer complete and DMA transfer
 951:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *       error interrupts are enabled
 952:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
 953:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
 954:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
 955:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 1505              		.loc 1 955 0
 1506              		.cfi_startproc
 1507              		@ args = 0, pretend = 0, frame = 16
 1508              		@ frame_needed = 1, uses_anonymous_args = 0
 1509 0000 90B5     		push	{r4, r7, lr}
 1510              	.LCFI59:
 1511              		.cfi_def_cfa_offset 12
 1512              		.cfi_offset 4, -12
 1513              		.cfi_offset 7, -8
 1514              		.cfi_offset 14, -4
 1515 0002 85B0     		sub	sp, sp, #20
 1516              	.LCFI60:
 1517              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/cca0gMDq.s 			page 44


 1518 0004 00AF     		add	r7, sp, #0
 1519              	.LCFI61:
 1520              		.cfi_def_cfa_register 7
 1521 0006 F860     		str	r0, [r7, #12]
 1522 0008 B960     		str	r1, [r7, #8]
 1523 000a 1346     		mov	r3, r2
 1524 000c FB80     		strh	r3, [r7, #6]	@ movhi
 956:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check if UART instance supports continuous communication using DMA */
 957:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_DMA_INSTANCE(huart->Instance));
 958:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 959:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 960:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_READY)
 1525              		.loc 1 960 0
 1526 000e FB68     		ldr	r3, [r7, #12]
 1527 0010 93F86930 		ldrb	r3, [r3, #105]
 1528 0014 DBB2     		uxtb	r3, r3
 1529 0016 202B     		cmp	r3, #32
 1530 0018 54D1     		bne	.L83
 961:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 962:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0U))
 1531              		.loc 1 962 0
 1532 001a BB68     		ldr	r3, [r7, #8]
 1533 001c 002B     		cmp	r3, #0
 1534 001e 02D0     		beq	.L84
 1535              		.loc 1 962 0 is_stmt 0 discriminator 1
 1536 0020 FB88     		ldrh	r3, [r7, #6]
 1537 0022 002B     		cmp	r3, #0
 1538 0024 01D1     		bne	.L85
 1539              	.L84:
 963:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
 964:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return HAL_ERROR;
 1540              		.loc 1 964 0 is_stmt 1
 1541 0026 0123     		movs	r3, #1
 1542 0028 4DE0     		b	.L86
 1543              	.L85:
 965:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
 966:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 967:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Process Locked */
 968:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_LOCK(huart);
 1544              		.loc 1 968 0
 1545 002a FB68     		ldr	r3, [r7, #12]
 1546 002c 93F86830 		ldrb	r3, [r3, #104]	@ zero_extendqisi2
 1547 0030 012B     		cmp	r3, #1
 1548 0032 01D1     		bne	.L87
 1549              		.loc 1 968 0 is_stmt 0 discriminator 1
 1550 0034 0223     		movs	r3, #2
 1551 0036 46E0     		b	.L86
 1552              	.L87:
 1553              		.loc 1 968 0 discriminator 2
 1554 0038 FB68     		ldr	r3, [r7, #12]
 1555 003a 0122     		movs	r2, #1
 1556 003c 83F86820 		strb	r2, [r3, #104]
 969:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 970:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->pTxBuffPtr = pData;
 1557              		.loc 1 970 0 is_stmt 1 discriminator 2
 1558 0040 FB68     		ldr	r3, [r7, #12]
 1559 0042 BA68     		ldr	r2, [r7, #8]
ARM GAS  /tmp/cca0gMDq.s 			page 45


 1560 0044 DA64     		str	r2, [r3, #76]
 971:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->TxXferSize = Size;
 1561              		.loc 1 971 0 discriminator 2
 1562 0046 FB68     		ldr	r3, [r7, #12]
 1563 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1564 004a A3F85020 		strh	r2, [r3, #80]	@ movhi
 972:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->TxXferCount = Size;
 1565              		.loc 1 972 0 discriminator 2
 1566 004e FB68     		ldr	r3, [r7, #12]
 1567 0050 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1568 0052 A3F85220 		strh	r2, [r3, #82]	@ movhi
 973:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 974:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1569              		.loc 1 974 0 discriminator 2
 1570 0056 FB68     		ldr	r3, [r7, #12]
 1571 0058 0022     		movs	r2, #0
 1572 005a DA66     		str	r2, [r3, #108]
 975:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 1573              		.loc 1 975 0 discriminator 2
 1574 005c FB68     		ldr	r3, [r7, #12]
 1575 005e 2122     		movs	r2, #33
 1576 0060 83F86920 		strb	r2, [r3, #105]
 976:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 977:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
 978:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 1577              		.loc 1 978 0 discriminator 2
 1578 0064 FB68     		ldr	r3, [r7, #12]
 1579 0066 1B6E     		ldr	r3, [r3, #96]
 1580 0068 194A     		ldr	r2, .L88
 1581 006a 9A62     		str	r2, [r3, #40]
 979:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 980:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
 981:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 1582              		.loc 1 981 0 discriminator 2
 1583 006c FB68     		ldr	r3, [r7, #12]
 1584 006e 1B6E     		ldr	r3, [r3, #96]
 1585 0070 184A     		ldr	r2, .L88+4
 1586 0072 DA62     		str	r2, [r3, #44]
 982:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 983:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Set the DMA error callback */
 984:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->hdmatx->XferErrorCallback = UART_DMAError;
 1587              		.loc 1 984 0 discriminator 2
 1588 0074 FB68     		ldr	r3, [r7, #12]
 1589 0076 1B6E     		ldr	r3, [r3, #96]
 1590 0078 174A     		ldr	r2, .L88+8
 1591 007a 1A63     		str	r2, [r3, #48]
 985:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 986:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Set the DMA abort callback */
 987:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->hdmatx->XferAbortCallback = NULL;
 1592              		.loc 1 987 0 discriminator 2
 1593 007c FB68     		ldr	r3, [r7, #12]
 1594 007e 1B6E     		ldr	r3, [r3, #96]
 1595 0080 0022     		movs	r2, #0
 1596 0082 5A63     		str	r2, [r3, #52]
 988:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 989:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Enable the UART transmit DMA channel */
 990:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, S
ARM GAS  /tmp/cca0gMDq.s 			page 46


 1597              		.loc 1 990 0 discriminator 2
 1598 0084 FB68     		ldr	r3, [r7, #12]
 1599 0086 1A6E     		ldr	r2, [r3, #96]
 1600 0088 FB68     		ldr	r3, [r7, #12]
 1601 008a DB6C     		ldr	r3, [r3, #76]
 1602 008c 1946     		mov	r1, r3
 1603 008e FB68     		ldr	r3, [r7, #12]
 1604 0090 1B68     		ldr	r3, [r3]
 1605 0092 2833     		adds	r3, r3, #40
 1606 0094 1C46     		mov	r4, r3
 1607 0096 FB88     		ldrh	r3, [r7, #6]
 1608 0098 1046     		mov	r0, r2
 1609 009a 2246     		mov	r2, r4
 1610 009c FFF7FEFF 		bl	HAL_DMA_Start_IT
 991:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 992:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Clear the TC flag in the ICR register */
 993:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 1611              		.loc 1 993 0 discriminator 2
 1612 00a0 FB68     		ldr	r3, [r7, #12]
 1613 00a2 1B68     		ldr	r3, [r3]
 1614 00a4 4022     		movs	r2, #64
 1615 00a6 1A62     		str	r2, [r3, #32]
 994:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 995:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Process Unlocked */
 996:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1616              		.loc 1 996 0 discriminator 2
 1617 00a8 FB68     		ldr	r3, [r7, #12]
 1618 00aa 0022     		movs	r2, #0
 1619 00ac 83F86820 		strb	r2, [r3, #104]
 997:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
 998:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
 999:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        in the UART CR3 register */
1000:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1620              		.loc 1 1000 0 discriminator 2
 1621 00b0 FB68     		ldr	r3, [r7, #12]
 1622 00b2 1B68     		ldr	r3, [r3]
 1623 00b4 FA68     		ldr	r2, [r7, #12]
 1624 00b6 1268     		ldr	r2, [r2]
 1625 00b8 9268     		ldr	r2, [r2, #8]
 1626 00ba 42F08002 		orr	r2, r2, #128
 1627 00be 9A60     		str	r2, [r3, #8]
1001:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1002:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_OK;
 1628              		.loc 1 1002 0 discriminator 2
 1629 00c0 0023     		movs	r3, #0
 1630 00c2 00E0     		b	.L86
 1631              	.L83:
1003:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1004:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
1005:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1006:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_BUSY;
 1632              		.loc 1 1006 0
 1633 00c4 0223     		movs	r3, #2
 1634              	.L86:
1007:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1008:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 1635              		.loc 1 1008 0
ARM GAS  /tmp/cca0gMDq.s 			page 47


 1636 00c6 1846     		mov	r0, r3
 1637 00c8 1437     		adds	r7, r7, #20
 1638              	.LCFI62:
 1639              		.cfi_def_cfa_offset 12
 1640 00ca BD46     		mov	sp, r7
 1641              	.LCFI63:
 1642              		.cfi_def_cfa_register 13
 1643              		@ sp needed
 1644 00cc 90BD     		pop	{r4, r7, pc}
 1645              	.L89:
 1646 00ce 00BF     		.align	2
 1647              	.L88:
 1648 00d0 00000000 		.word	UART_DMATransmitCplt
 1649 00d4 00000000 		.word	UART_DMATxHalfCplt
 1650 00d8 00000000 		.word	UART_DMAError
 1651              		.cfi_endproc
 1652              	.LFE134:
 1654              		.section	.text.HAL_UART_Receive_DMA,"ax",%progbits
 1655              		.align	2
 1656              		.global	HAL_UART_Receive_DMA
 1657              		.thumb
 1658              		.thumb_func
 1660              	HAL_UART_Receive_DMA:
 1661              	.LFB135:
1009:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1010:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1011:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Receive an amount of data in DMA mode.
1012:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
1013:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param pData pointer to data buffer.
1014:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param Size amount of data to be received.
1015:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1), the received data contain
1016:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         the parity bit (MSB position).
1017:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note This function starts a DMA transfer in interrupt mode meaning that
1018:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *       DMA half transfer complete, DMA transfer complete and DMA transfer
1019:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *       error interrupts are enabled
1020:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1021:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1022:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1023:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 1662              		.loc 1 1023 0
 1663              		.cfi_startproc
 1664              		@ args = 0, pretend = 0, frame = 16
 1665              		@ frame_needed = 1, uses_anonymous_args = 0
 1666 0000 90B5     		push	{r4, r7, lr}
 1667              	.LCFI64:
 1668              		.cfi_def_cfa_offset 12
 1669              		.cfi_offset 4, -12
 1670              		.cfi_offset 7, -8
 1671              		.cfi_offset 14, -4
 1672 0002 85B0     		sub	sp, sp, #20
 1673              	.LCFI65:
 1674              		.cfi_def_cfa_offset 32
 1675 0004 00AF     		add	r7, sp, #0
 1676              	.LCFI66:
 1677              		.cfi_def_cfa_register 7
 1678 0006 F860     		str	r0, [r7, #12]
 1679 0008 B960     		str	r1, [r7, #8]
ARM GAS  /tmp/cca0gMDq.s 			page 48


 1680 000a 1346     		mov	r3, r2
 1681 000c FB80     		strh	r3, [r7, #6]	@ movhi
1024:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check if UART instance supports continuous communication using DMA */
1025:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_DMA_INSTANCE(huart->Instance));
1026:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1027:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1028:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_READY)
 1682              		.loc 1 1028 0
 1683 000e FB68     		ldr	r3, [r7, #12]
 1684 0010 93F86A30 		ldrb	r3, [r3, #106]
 1685 0014 DBB2     		uxtb	r3, r3
 1686 0016 202B     		cmp	r3, #32
 1687 0018 5CD1     		bne	.L91
1029:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1030:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if((pData == NULL ) || (Size == 0U))
 1688              		.loc 1 1030 0
 1689 001a BB68     		ldr	r3, [r7, #8]
 1690 001c 002B     		cmp	r3, #0
 1691 001e 02D0     		beq	.L92
 1692              		.loc 1 1030 0 is_stmt 0 discriminator 1
 1693 0020 FB88     		ldrh	r3, [r7, #6]
 1694 0022 002B     		cmp	r3, #0
 1695 0024 01D1     		bne	.L93
 1696              	.L92:
1031:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1032:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return HAL_ERROR;
 1697              		.loc 1 1032 0 is_stmt 1
 1698 0026 0123     		movs	r3, #1
 1699 0028 55E0     		b	.L94
 1700              	.L93:
1033:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1034:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1035:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Process Locked */
1036:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_LOCK(huart);
 1701              		.loc 1 1036 0
 1702 002a FB68     		ldr	r3, [r7, #12]
 1703 002c 93F86830 		ldrb	r3, [r3, #104]	@ zero_extendqisi2
 1704 0030 012B     		cmp	r3, #1
 1705 0032 01D1     		bne	.L95
 1706              		.loc 1 1036 0 is_stmt 0 discriminator 1
 1707 0034 0223     		movs	r3, #2
 1708 0036 4EE0     		b	.L94
 1709              	.L95:
 1710              		.loc 1 1036 0 discriminator 2
 1711 0038 FB68     		ldr	r3, [r7, #12]
 1712 003a 0122     		movs	r2, #1
 1713 003c 83F86820 		strb	r2, [r3, #104]
1037:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1038:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->pRxBuffPtr = pData;
 1714              		.loc 1 1038 0 is_stmt 1 discriminator 2
 1715 0040 FB68     		ldr	r3, [r7, #12]
 1716 0042 BA68     		ldr	r2, [r7, #8]
 1717 0044 5A65     		str	r2, [r3, #84]
1039:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxXferSize = Size;
 1718              		.loc 1 1039 0 discriminator 2
 1719 0046 FB68     		ldr	r3, [r7, #12]
 1720 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
ARM GAS  /tmp/cca0gMDq.s 			page 49


 1721 004a A3F85820 		strh	r2, [r3, #88]	@ movhi
1040:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1041:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 1722              		.loc 1 1041 0 discriminator 2
 1723 004e FB68     		ldr	r3, [r7, #12]
 1724 0050 0022     		movs	r2, #0
 1725 0052 DA66     		str	r2, [r3, #108]
1042:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1726              		.loc 1 1042 0 discriminator 2
 1727 0054 FB68     		ldr	r3, [r7, #12]
 1728 0056 2222     		movs	r2, #34
 1729 0058 83F86A20 		strb	r2, [r3, #106]
1043:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1044:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Set the UART DMA transfer complete callback */
1045:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 1730              		.loc 1 1045 0 discriminator 2
 1731 005c FB68     		ldr	r3, [r7, #12]
 1732 005e 5B6E     		ldr	r3, [r3, #100]
 1733 0060 1F4A     		ldr	r2, .L96
 1734 0062 9A62     		str	r2, [r3, #40]
1046:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1047:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Set the UART DMA Half transfer complete callback */
1048:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 1735              		.loc 1 1048 0 discriminator 2
 1736 0064 FB68     		ldr	r3, [r7, #12]
 1737 0066 5B6E     		ldr	r3, [r3, #100]
 1738 0068 1E4A     		ldr	r2, .L96+4
 1739 006a DA62     		str	r2, [r3, #44]
1049:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1050:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Set the DMA error callback */
1051:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->hdmarx->XferErrorCallback = UART_DMAError;
 1740              		.loc 1 1051 0 discriminator 2
 1741 006c FB68     		ldr	r3, [r7, #12]
 1742 006e 5B6E     		ldr	r3, [r3, #100]
 1743 0070 1D4A     		ldr	r2, .L96+8
 1744 0072 1A63     		str	r2, [r3, #48]
1052:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1053:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Set the DMA abort callback */
1054:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->hdmarx->XferAbortCallback = NULL;
 1745              		.loc 1 1054 0 discriminator 2
 1746 0074 FB68     		ldr	r3, [r7, #12]
 1747 0076 5B6E     		ldr	r3, [r3, #100]
 1748 0078 0022     		movs	r2, #0
 1749 007a 5A63     		str	r2, [r3, #52]
1055:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1056:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Enable the DMA channel */
1057:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, S
 1750              		.loc 1 1057 0 discriminator 2
 1751 007c FB68     		ldr	r3, [r7, #12]
 1752 007e 5A6E     		ldr	r2, [r3, #100]
 1753 0080 FB68     		ldr	r3, [r7, #12]
 1754 0082 1B68     		ldr	r3, [r3]
 1755 0084 2433     		adds	r3, r3, #36
 1756 0086 1946     		mov	r1, r3
 1757 0088 FB68     		ldr	r3, [r7, #12]
 1758 008a 5B6D     		ldr	r3, [r3, #84]
 1759 008c 1C46     		mov	r4, r3
ARM GAS  /tmp/cca0gMDq.s 			page 50


 1760 008e FB88     		ldrh	r3, [r7, #6]
 1761 0090 1046     		mov	r0, r2
 1762 0092 2246     		mov	r2, r4
 1763 0094 FFF7FEFF 		bl	HAL_DMA_Start_IT
1058:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1059:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Process Unlocked */
1060:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UNLOCK(huart);
 1764              		.loc 1 1060 0 discriminator 2
 1765 0098 FB68     		ldr	r3, [r7, #12]
 1766 009a 0022     		movs	r2, #0
 1767 009c 83F86820 		strb	r2, [r3, #104]
1061:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1062:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Enable the UART Parity Error Interrupt */
1063:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 1768              		.loc 1 1063 0 discriminator 2
 1769 00a0 FB68     		ldr	r3, [r7, #12]
 1770 00a2 1B68     		ldr	r3, [r3]
 1771 00a4 FA68     		ldr	r2, [r7, #12]
 1772 00a6 1268     		ldr	r2, [r2]
 1773 00a8 1268     		ldr	r2, [r2]
 1774 00aa 42F48072 		orr	r2, r2, #256
 1775 00ae 1A60     		str	r2, [r3]
1064:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1065:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
1066:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1776              		.loc 1 1066 0 discriminator 2
 1777 00b0 FB68     		ldr	r3, [r7, #12]
 1778 00b2 1B68     		ldr	r3, [r3]
 1779 00b4 FA68     		ldr	r2, [r7, #12]
 1780 00b6 1268     		ldr	r2, [r2]
 1781 00b8 9268     		ldr	r2, [r2, #8]
 1782 00ba 42F00102 		orr	r2, r2, #1
 1783 00be 9A60     		str	r2, [r3, #8]
1067:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1068:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Enable the DMA transfer for the receiver request by setting the DMAR bit
1069:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        in the UART CR3 register */
1070:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 1784              		.loc 1 1070 0 discriminator 2
 1785 00c0 FB68     		ldr	r3, [r7, #12]
 1786 00c2 1B68     		ldr	r3, [r3]
 1787 00c4 FA68     		ldr	r2, [r7, #12]
 1788 00c6 1268     		ldr	r2, [r2]
 1789 00c8 9268     		ldr	r2, [r2, #8]
 1790 00ca 42F04002 		orr	r2, r2, #64
 1791 00ce 9A60     		str	r2, [r3, #8]
1071:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1072:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_OK;
 1792              		.loc 1 1072 0 discriminator 2
 1793 00d0 0023     		movs	r3, #0
 1794 00d2 00E0     		b	.L94
 1795              	.L91:
1073:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1074:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
1075:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1076:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_BUSY;
 1796              		.loc 1 1076 0
 1797 00d4 0223     		movs	r3, #2
ARM GAS  /tmp/cca0gMDq.s 			page 51


 1798              	.L94:
1077:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1078:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 1799              		.loc 1 1078 0
 1800 00d6 1846     		mov	r0, r3
 1801 00d8 1437     		adds	r7, r7, #20
 1802              	.LCFI67:
 1803              		.cfi_def_cfa_offset 12
 1804 00da BD46     		mov	sp, r7
 1805              	.LCFI68:
 1806              		.cfi_def_cfa_register 13
 1807              		@ sp needed
 1808 00dc 90BD     		pop	{r4, r7, pc}
 1809              	.L97:
 1810 00de 00BF     		.align	2
 1811              	.L96:
 1812 00e0 00000000 		.word	UART_DMAReceiveCplt
 1813 00e4 00000000 		.word	UART_DMARxHalfCplt
 1814 00e8 00000000 		.word	UART_DMAError
 1815              		.cfi_endproc
 1816              	.LFE135:
 1818              		.section	.text.HAL_UART_DMAPause,"ax",%progbits
 1819              		.align	2
 1820              		.global	HAL_UART_DMAPause
 1821              		.thumb
 1822              		.thumb_func
 1824              	HAL_UART_DMAPause:
 1825              	.LFB136:
1079:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1080:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1081:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Pause the DMA Transfer.
1082:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
1083:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1084:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1085:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
1086:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 1826              		.loc 1 1086 0
 1827              		.cfi_startproc
 1828              		@ args = 0, pretend = 0, frame = 8
 1829              		@ frame_needed = 1, uses_anonymous_args = 0
 1830              		@ link register save eliminated.
 1831 0000 80B4     		push	{r7}
 1832              	.LCFI69:
 1833              		.cfi_def_cfa_offset 4
 1834              		.cfi_offset 7, -4
 1835 0002 83B0     		sub	sp, sp, #12
 1836              	.LCFI70:
 1837              		.cfi_def_cfa_offset 16
 1838 0004 00AF     		add	r7, sp, #0
 1839              	.LCFI71:
 1840              		.cfi_def_cfa_register 7
 1841 0006 7860     		str	r0, [r7, #4]
1087:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Process Locked */
1088:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_LOCK(huart);
 1842              		.loc 1 1088 0
 1843 0008 7B68     		ldr	r3, [r7, #4]
 1844 000a 93F86830 		ldrb	r3, [r3, #104]	@ zero_extendqisi2
ARM GAS  /tmp/cca0gMDq.s 			page 52


 1845 000e 012B     		cmp	r3, #1
 1846 0010 01D1     		bne	.L99
 1847              		.loc 1 1088 0 is_stmt 0 discriminator 1
 1848 0012 0223     		movs	r3, #2
 1849 0014 42E0     		b	.L100
 1850              	.L99:
 1851              		.loc 1 1088 0 discriminator 2
 1852 0016 7B68     		ldr	r3, [r7, #4]
 1853 0018 0122     		movs	r2, #1
 1854 001a 83F86820 		strb	r2, [r3, #104]
1089:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1090:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) &&
 1855              		.loc 1 1090 0 is_stmt 1 discriminator 2
 1856 001e 7B68     		ldr	r3, [r7, #4]
 1857 0020 93F86930 		ldrb	r3, [r3, #105]
 1858 0024 DBB2     		uxtb	r3, r3
 1859 0026 212B     		cmp	r3, #33
 1860 0028 0ED1     		bne	.L101
1091:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)))
 1861              		.loc 1 1091 0 discriminator 1
 1862 002a 7B68     		ldr	r3, [r7, #4]
 1863 002c 1B68     		ldr	r3, [r3]
 1864 002e 9B68     		ldr	r3, [r3, #8]
 1865 0030 03F08003 		and	r3, r3, #128
1090:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)))
 1866              		.loc 1 1090 0 discriminator 1
 1867 0034 002B     		cmp	r3, #0
 1868 0036 07D0     		beq	.L101
1092:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1093:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Disable the UART DMA Tx request */
1094:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1869              		.loc 1 1094 0
 1870 0038 7B68     		ldr	r3, [r7, #4]
 1871 003a 1B68     		ldr	r3, [r3]
 1872 003c 7A68     		ldr	r2, [r7, #4]
 1873 003e 1268     		ldr	r2, [r2]
 1874 0040 9268     		ldr	r2, [r2, #8]
 1875 0042 22F08002 		bic	r2, r2, #128
 1876 0046 9A60     		str	r2, [r3, #8]
 1877              	.L101:
1095:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1096:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) &&
 1878              		.loc 1 1096 0
 1879 0048 7B68     		ldr	r3, [r7, #4]
 1880 004a 93F86A30 		ldrb	r3, [r3, #106]
 1881 004e DBB2     		uxtb	r3, r3
 1882 0050 222B     		cmp	r3, #34
 1883 0052 1ED1     		bne	.L102
1097:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 1884              		.loc 1 1097 0 discriminator 1
 1885 0054 7B68     		ldr	r3, [r7, #4]
 1886 0056 1B68     		ldr	r3, [r3]
 1887 0058 9B68     		ldr	r3, [r3, #8]
 1888 005a 03F04003 		and	r3, r3, #64
1096:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 1889              		.loc 1 1096 0 discriminator 1
 1890 005e 002B     		cmp	r3, #0
ARM GAS  /tmp/cca0gMDq.s 			page 53


 1891 0060 17D0     		beq	.L102
1098:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1099:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
1100:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 1892              		.loc 1 1100 0
 1893 0062 7B68     		ldr	r3, [r7, #4]
 1894 0064 1B68     		ldr	r3, [r3]
 1895 0066 7A68     		ldr	r2, [r7, #4]
 1896 0068 1268     		ldr	r2, [r2]
 1897 006a 1268     		ldr	r2, [r2]
 1898 006c 22F48072 		bic	r2, r2, #256
 1899 0070 1A60     		str	r2, [r3]
1101:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1900              		.loc 1 1101 0
 1901 0072 7B68     		ldr	r3, [r7, #4]
 1902 0074 1B68     		ldr	r3, [r3]
 1903 0076 7A68     		ldr	r2, [r7, #4]
 1904 0078 1268     		ldr	r2, [r2]
 1905 007a 9268     		ldr	r2, [r2, #8]
 1906 007c 22F00102 		bic	r2, r2, #1
 1907 0080 9A60     		str	r2, [r3, #8]
1102:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1103:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Disable the UART DMA Rx request */
1104:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 1908              		.loc 1 1104 0
 1909 0082 7B68     		ldr	r3, [r7, #4]
 1910 0084 1B68     		ldr	r3, [r3]
 1911 0086 7A68     		ldr	r2, [r7, #4]
 1912 0088 1268     		ldr	r2, [r2]
 1913 008a 9268     		ldr	r2, [r2, #8]
 1914 008c 22F04002 		bic	r2, r2, #64
 1915 0090 9A60     		str	r2, [r3, #8]
 1916              	.L102:
1105:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1106:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1107:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Process Unlocked */
1108:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 1917              		.loc 1 1108 0
 1918 0092 7B68     		ldr	r3, [r7, #4]
 1919 0094 0022     		movs	r2, #0
 1920 0096 83F86820 		strb	r2, [r3, #104]
1109:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1110:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 1921              		.loc 1 1110 0
 1922 009a 0023     		movs	r3, #0
 1923              	.L100:
1111:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 1924              		.loc 1 1111 0
 1925 009c 1846     		mov	r0, r3
 1926 009e 0C37     		adds	r7, r7, #12
 1927              	.LCFI72:
 1928              		.cfi_def_cfa_offset 4
 1929 00a0 BD46     		mov	sp, r7
 1930              	.LCFI73:
 1931              		.cfi_def_cfa_register 13
 1932              		@ sp needed
 1933 00a2 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/cca0gMDq.s 			page 54


 1934              	.LCFI74:
 1935              		.cfi_restore 7
 1936              		.cfi_def_cfa_offset 0
 1937 00a6 7047     		bx	lr
 1938              		.cfi_endproc
 1939              	.LFE136:
 1941              		.section	.text.HAL_UART_DMAResume,"ax",%progbits
 1942              		.align	2
 1943              		.global	HAL_UART_DMAResume
 1944              		.thumb
 1945              		.thumb_func
 1947              	HAL_UART_DMAResume:
 1948              	.LFB137:
1112:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1113:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1114:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Resume the DMA Transfer.
1115:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
1116:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1117:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1118:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
1119:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 1949              		.loc 1 1119 0
 1950              		.cfi_startproc
 1951              		@ args = 0, pretend = 0, frame = 8
 1952              		@ frame_needed = 1, uses_anonymous_args = 0
 1953              		@ link register save eliminated.
 1954 0000 80B4     		push	{r7}
 1955              	.LCFI75:
 1956              		.cfi_def_cfa_offset 4
 1957              		.cfi_offset 7, -4
 1958 0002 83B0     		sub	sp, sp, #12
 1959              	.LCFI76:
 1960              		.cfi_def_cfa_offset 16
 1961 0004 00AF     		add	r7, sp, #0
 1962              	.LCFI77:
 1963              		.cfi_def_cfa_register 7
 1964 0006 7860     		str	r0, [r7, #4]
1120:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Process Locked */
1121:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_LOCK(huart);
 1965              		.loc 1 1121 0
 1966 0008 7B68     		ldr	r3, [r7, #4]
 1967 000a 93F86830 		ldrb	r3, [r3, #104]	@ zero_extendqisi2
 1968 000e 012B     		cmp	r3, #1
 1969 0010 01D1     		bne	.L104
 1970              		.loc 1 1121 0 is_stmt 0 discriminator 1
 1971 0012 0223     		movs	r3, #2
 1972 0014 38E0     		b	.L105
 1973              	.L104:
 1974              		.loc 1 1121 0 discriminator 2
 1975 0016 7B68     		ldr	r3, [r7, #4]
 1976 0018 0122     		movs	r2, #1
 1977 001a 83F86820 		strb	r2, [r3, #104]
1122:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1123:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(huart->gState == HAL_UART_STATE_BUSY_TX)
 1978              		.loc 1 1123 0 is_stmt 1 discriminator 2
 1979 001e 7B68     		ldr	r3, [r7, #4]
 1980 0020 93F86930 		ldrb	r3, [r3, #105]
ARM GAS  /tmp/cca0gMDq.s 			page 55


 1981 0024 DBB2     		uxtb	r3, r3
 1982 0026 212B     		cmp	r3, #33
 1983 0028 07D1     		bne	.L106
1124:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1125:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Enable the UART DMA Tx request */
1126:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 1984              		.loc 1 1126 0
 1985 002a 7B68     		ldr	r3, [r7, #4]
 1986 002c 1B68     		ldr	r3, [r3]
 1987 002e 7A68     		ldr	r2, [r7, #4]
 1988 0030 1268     		ldr	r2, [r2]
 1989 0032 9268     		ldr	r2, [r2, #8]
 1990 0034 42F08002 		orr	r2, r2, #128
 1991 0038 9A60     		str	r2, [r3, #8]
 1992              	.L106:
1127:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1128:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 1993              		.loc 1 1128 0
 1994 003a 7B68     		ldr	r3, [r7, #4]
 1995 003c 93F86A30 		ldrb	r3, [r3, #106]
 1996 0040 DBB2     		uxtb	r3, r3
 1997 0042 222B     		cmp	r3, #34
 1998 0044 1BD1     		bne	.L107
1129:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1130:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Clear the Overrun flag before resuming the Rx transfer */
1131:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 1999              		.loc 1 1131 0
 2000 0046 7B68     		ldr	r3, [r7, #4]
 2001 0048 1B68     		ldr	r3, [r3]
 2002 004a 0822     		movs	r2, #8
 2003 004c 1A62     		str	r2, [r3, #32]
1132:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1133:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
1134:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 2004              		.loc 1 1134 0
 2005 004e 7B68     		ldr	r3, [r7, #4]
 2006 0050 1B68     		ldr	r3, [r3]
 2007 0052 7A68     		ldr	r2, [r7, #4]
 2008 0054 1268     		ldr	r2, [r2]
 2009 0056 1268     		ldr	r2, [r2]
 2010 0058 42F48072 		orr	r2, r2, #256
 2011 005c 1A60     		str	r2, [r3]
1135:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2012              		.loc 1 1135 0
 2013 005e 7B68     		ldr	r3, [r7, #4]
 2014 0060 1B68     		ldr	r3, [r3]
 2015 0062 7A68     		ldr	r2, [r7, #4]
 2016 0064 1268     		ldr	r2, [r2]
 2017 0066 9268     		ldr	r2, [r2, #8]
 2018 0068 42F00102 		orr	r2, r2, #1
 2019 006c 9A60     		str	r2, [r3, #8]
1136:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1137:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Enable the UART DMA Rx request */
1138:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2020              		.loc 1 1138 0
 2021 006e 7B68     		ldr	r3, [r7, #4]
 2022 0070 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cca0gMDq.s 			page 56


 2023 0072 7A68     		ldr	r2, [r7, #4]
 2024 0074 1268     		ldr	r2, [r2]
 2025 0076 9268     		ldr	r2, [r2, #8]
 2026 0078 42F04002 		orr	r2, r2, #64
 2027 007c 9A60     		str	r2, [r3, #8]
 2028              	.L107:
1139:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1140:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1141:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Process Unlocked */
1142:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 2029              		.loc 1 1142 0
 2030 007e 7B68     		ldr	r3, [r7, #4]
 2031 0080 0022     		movs	r2, #0
 2032 0082 83F86820 		strb	r2, [r3, #104]
1143:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1144:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 2033              		.loc 1 1144 0
 2034 0086 0023     		movs	r3, #0
 2035              	.L105:
1145:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 2036              		.loc 1 1145 0
 2037 0088 1846     		mov	r0, r3
 2038 008a 0C37     		adds	r7, r7, #12
 2039              	.LCFI78:
 2040              		.cfi_def_cfa_offset 4
 2041 008c BD46     		mov	sp, r7
 2042              	.LCFI79:
 2043              		.cfi_def_cfa_register 13
 2044              		@ sp needed
 2045 008e 5DF8047B 		ldr	r7, [sp], #4
 2046              	.LCFI80:
 2047              		.cfi_restore 7
 2048              		.cfi_def_cfa_offset 0
 2049 0092 7047     		bx	lr
 2050              		.cfi_endproc
 2051              	.LFE137:
 2053              		.section	.text.HAL_UART_DMAStop,"ax",%progbits
 2054              		.align	2
 2055              		.global	HAL_UART_DMAStop
 2056              		.thumb
 2057              		.thumb_func
 2059              	HAL_UART_DMAStop:
 2060              	.LFB138:
1146:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1147:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1148:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Stop the DMA Transfer.
1149:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
1150:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1151:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1152:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
1153:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 2061              		.loc 1 1153 0
 2062              		.cfi_startproc
 2063              		@ args = 0, pretend = 0, frame = 8
 2064              		@ frame_needed = 1, uses_anonymous_args = 0
 2065 0000 80B5     		push	{r7, lr}
 2066              	.LCFI81:
ARM GAS  /tmp/cca0gMDq.s 			page 57


 2067              		.cfi_def_cfa_offset 8
 2068              		.cfi_offset 7, -8
 2069              		.cfi_offset 14, -4
 2070 0002 82B0     		sub	sp, sp, #8
 2071              	.LCFI82:
 2072              		.cfi_def_cfa_offset 16
 2073 0004 00AF     		add	r7, sp, #0
 2074              	.LCFI83:
 2075              		.cfi_def_cfa_register 7
 2076 0006 7860     		str	r0, [r7, #4]
1154:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
1155:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      to call the HAL UART API under callbacks HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1156:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback: 
1157:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete  
1158:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of 
1159:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      the stream and the corresponding call back is executed. */
1160:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1161:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
1162:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if ((huart->gState == HAL_UART_STATE_BUSY_TX) &&
 2077              		.loc 1 1162 0
 2078 0008 7B68     		ldr	r3, [r7, #4]
 2079 000a 93F86930 		ldrb	r3, [r3, #105]
 2080 000e DBB2     		uxtb	r3, r3
 2081 0010 212B     		cmp	r3, #33
 2082 0012 1AD1     		bne	.L109
1163:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)))
 2083              		.loc 1 1163 0 discriminator 1
 2084 0014 7B68     		ldr	r3, [r7, #4]
 2085 0016 1B68     		ldr	r3, [r3]
 2086 0018 9B68     		ldr	r3, [r3, #8]
 2087 001a 03F08003 		and	r3, r3, #128
1162:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)))
 2088              		.loc 1 1162 0 discriminator 1
 2089 001e 002B     		cmp	r3, #0
 2090 0020 13D0     		beq	.L109
1164:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1165:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2091              		.loc 1 1165 0
 2092 0022 7B68     		ldr	r3, [r7, #4]
 2093 0024 1B68     		ldr	r3, [r3]
 2094 0026 7A68     		ldr	r2, [r7, #4]
 2095 0028 1268     		ldr	r2, [r2]
 2096 002a 9268     		ldr	r2, [r2, #8]
 2097 002c 22F08002 		bic	r2, r2, #128
 2098 0030 9A60     		str	r2, [r3, #8]
1166:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1167:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Abort the UART DMA Tx channel */
1168:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(huart->hdmatx != NULL)
 2099              		.loc 1 1168 0
 2100 0032 7B68     		ldr	r3, [r7, #4]
 2101 0034 1B6E     		ldr	r3, [r3, #96]
 2102 0036 002B     		cmp	r3, #0
 2103 0038 04D0     		beq	.L110
1169:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1170:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmatx);
 2104              		.loc 1 1170 0
 2105 003a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cca0gMDq.s 			page 58


 2106 003c 1B6E     		ldr	r3, [r3, #96]
 2107 003e 1846     		mov	r0, r3
 2108 0040 FFF7FEFF 		bl	HAL_DMA_Abort
 2109              	.L110:
1171:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1172:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1173:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 2110              		.loc 1 1173 0
 2111 0044 7868     		ldr	r0, [r7, #4]
 2112 0046 FFF7FEFF 		bl	UART_EndTxTransfer
 2113              	.L109:
1174:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1175:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1176:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
1177:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if ((huart->RxState == HAL_UART_STATE_BUSY_RX) &&
 2114              		.loc 1 1177 0
 2115 004a 7B68     		ldr	r3, [r7, #4]
 2116 004c 93F86A30 		ldrb	r3, [r3, #106]
 2117 0050 DBB2     		uxtb	r3, r3
 2118 0052 222B     		cmp	r3, #34
 2119 0054 1AD1     		bne	.L111
1178:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 2120              		.loc 1 1178 0 discriminator 1
 2121 0056 7B68     		ldr	r3, [r7, #4]
 2122 0058 1B68     		ldr	r3, [r3]
 2123 005a 9B68     		ldr	r3, [r3, #8]
 2124 005c 03F04003 		and	r3, r3, #64
1177:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 2125              		.loc 1 1177 0 discriminator 1
 2126 0060 002B     		cmp	r3, #0
 2127 0062 13D0     		beq	.L111
1179:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1180:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2128              		.loc 1 1180 0
 2129 0064 7B68     		ldr	r3, [r7, #4]
 2130 0066 1B68     		ldr	r3, [r3]
 2131 0068 7A68     		ldr	r2, [r7, #4]
 2132 006a 1268     		ldr	r2, [r2]
 2133 006c 9268     		ldr	r2, [r2, #8]
 2134 006e 22F04002 		bic	r2, r2, #64
 2135 0072 9A60     		str	r2, [r3, #8]
1181:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1182:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Abort the UART DMA Rx channel */
1183:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(huart->hdmarx != NULL)
 2136              		.loc 1 1183 0
 2137 0074 7B68     		ldr	r3, [r7, #4]
 2138 0076 5B6E     		ldr	r3, [r3, #100]
 2139 0078 002B     		cmp	r3, #0
 2140 007a 04D0     		beq	.L112
1184:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1185:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmarx);
 2141              		.loc 1 1185 0
 2142 007c 7B68     		ldr	r3, [r7, #4]
 2143 007e 5B6E     		ldr	r3, [r3, #100]
 2144 0080 1846     		mov	r0, r3
 2145 0082 FFF7FEFF 		bl	HAL_DMA_Abort
 2146              	.L112:
ARM GAS  /tmp/cca0gMDq.s 			page 59


1186:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1187:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1188:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 2147              		.loc 1 1188 0
 2148 0086 7868     		ldr	r0, [r7, #4]
 2149 0088 FFF7FEFF 		bl	UART_EndRxTransfer
 2150              	.L111:
1189:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1190:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1191:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 2151              		.loc 1 1191 0
 2152 008c 0023     		movs	r3, #0
1192:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 2153              		.loc 1 1192 0
 2154 008e 1846     		mov	r0, r3
 2155 0090 0837     		adds	r7, r7, #8
 2156              	.LCFI84:
 2157              		.cfi_def_cfa_offset 8
 2158 0092 BD46     		mov	sp, r7
 2159              	.LCFI85:
 2160              		.cfi_def_cfa_register 13
 2161              		@ sp needed
 2162 0094 80BD     		pop	{r7, pc}
 2163              		.cfi_endproc
 2164              	.LFE138:
 2166 0096 00BF     		.section	.text.HAL_UART_Abort,"ax",%progbits
 2167              		.align	2
 2168              		.global	HAL_UART_Abort
 2169              		.thumb
 2170              		.thumb_func
 2172              	HAL_UART_Abort:
 2173              	.LFB139:
1193:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1194:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1195:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Abort ongoing transfers (blocking mode).
1196:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
1197:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1198:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         This procedure performs following operations :
1199:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1200:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1201:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1202:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Set handle State to READY
1203:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1204:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1205:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** */
1206:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
1207:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 2174              		.loc 1 1207 0
 2175              		.cfi_startproc
 2176              		@ args = 0, pretend = 0, frame = 8
 2177              		@ frame_needed = 1, uses_anonymous_args = 0
 2178 0000 80B5     		push	{r7, lr}
 2179              	.LCFI86:
 2180              		.cfi_def_cfa_offset 8
 2181              		.cfi_offset 7, -8
 2182              		.cfi_offset 14, -4
 2183 0002 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/cca0gMDq.s 			page 60


 2184              	.LCFI87:
 2185              		.cfi_def_cfa_offset 16
 2186 0004 00AF     		add	r7, sp, #0
 2187              	.LCFI88:
 2188              		.cfi_def_cfa_register 7
 2189 0006 7860     		str	r0, [r7, #4]
1208:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1209:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
 2190              		.loc 1 1209 0
 2191 0008 7B68     		ldr	r3, [r7, #4]
 2192 000a 1B68     		ldr	r3, [r3]
 2193 000c 7A68     		ldr	r2, [r7, #4]
 2194 000e 1268     		ldr	r2, [r2]
 2195 0010 1268     		ldr	r2, [r2]
 2196 0012 22F4F072 		bic	r2, r2, #480
 2197 0016 1A60     		str	r2, [r3]
1210:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2198              		.loc 1 1210 0
 2199 0018 7B68     		ldr	r3, [r7, #4]
 2200 001a 1B68     		ldr	r3, [r3]
 2201 001c 7A68     		ldr	r2, [r7, #4]
 2202 001e 1268     		ldr	r2, [r2]
 2203 0020 9268     		ldr	r2, [r2, #8]
 2204 0022 22F00102 		bic	r2, r2, #1
 2205 0026 9A60     		str	r2, [r3, #8]
1211:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1212:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1213:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2206              		.loc 1 1213 0
 2207 0028 7B68     		ldr	r3, [r7, #4]
 2208 002a 1B68     		ldr	r3, [r3]
 2209 002c 9B68     		ldr	r3, [r3, #8]
 2210 002e 03F08003 		and	r3, r3, #128
 2211 0032 002B     		cmp	r3, #0
 2212 0034 14D0     		beq	.L115
1214:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1215:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2213              		.loc 1 1215 0
 2214 0036 7B68     		ldr	r3, [r7, #4]
 2215 0038 1B68     		ldr	r3, [r3]
 2216 003a 7A68     		ldr	r2, [r7, #4]
 2217 003c 1268     		ldr	r2, [r2]
 2218 003e 9268     		ldr	r2, [r2, #8]
 2219 0040 22F08002 		bic	r2, r2, #128
 2220 0044 9A60     		str	r2, [r3, #8]
1216:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1217:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1218:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(huart->hdmatx != NULL)
 2221              		.loc 1 1218 0
 2222 0046 7B68     		ldr	r3, [r7, #4]
 2223 0048 1B6E     		ldr	r3, [r3, #96]
 2224 004a 002B     		cmp	r3, #0
 2225 004c 08D0     		beq	.L115
1219:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1220:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null. 
1221:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1222:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
ARM GAS  /tmp/cca0gMDq.s 			page 61


 2226              		.loc 1 1222 0
 2227 004e 7B68     		ldr	r3, [r7, #4]
 2228 0050 1B6E     		ldr	r3, [r3, #96]
 2229 0052 0022     		movs	r2, #0
 2230 0054 5A63     		str	r2, [r3, #52]
1223:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1224:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmatx);
 2231              		.loc 1 1224 0
 2232 0056 7B68     		ldr	r3, [r7, #4]
 2233 0058 1B6E     		ldr	r3, [r3, #96]
 2234 005a 1846     		mov	r0, r3
 2235 005c FFF7FEFF 		bl	HAL_DMA_Abort
 2236              	.L115:
1225:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1226:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1227:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1228:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1229:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2237              		.loc 1 1229 0
 2238 0060 7B68     		ldr	r3, [r7, #4]
 2239 0062 1B68     		ldr	r3, [r3]
 2240 0064 9B68     		ldr	r3, [r3, #8]
 2241 0066 03F04003 		and	r3, r3, #64
 2242 006a 002B     		cmp	r3, #0
 2243 006c 14D0     		beq	.L116
1230:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1231:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2244              		.loc 1 1231 0
 2245 006e 7B68     		ldr	r3, [r7, #4]
 2246 0070 1B68     		ldr	r3, [r3]
 2247 0072 7A68     		ldr	r2, [r7, #4]
 2248 0074 1268     		ldr	r2, [r2]
 2249 0076 9268     		ldr	r2, [r2, #8]
 2250 0078 22F04002 		bic	r2, r2, #64
 2251 007c 9A60     		str	r2, [r3, #8]
1232:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1233:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1234:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(huart->hdmarx != NULL)
 2252              		.loc 1 1234 0
 2253 007e 7B68     		ldr	r3, [r7, #4]
 2254 0080 5B6E     		ldr	r3, [r3, #100]
 2255 0082 002B     		cmp	r3, #0
 2256 0084 08D0     		beq	.L116
1235:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1236:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null. 
1237:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1238:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 2257              		.loc 1 1238 0
 2258 0086 7B68     		ldr	r3, [r7, #4]
 2259 0088 5B6E     		ldr	r3, [r3, #100]
 2260 008a 0022     		movs	r2, #0
 2261 008c 5A63     		str	r2, [r3, #52]
1239:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1240:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmarx);
 2262              		.loc 1 1240 0
 2263 008e 7B68     		ldr	r3, [r7, #4]
 2264 0090 5B6E     		ldr	r3, [r3, #100]
ARM GAS  /tmp/cca0gMDq.s 			page 62


 2265 0092 1846     		mov	r0, r3
 2266 0094 FFF7FEFF 		bl	HAL_DMA_Abort
 2267              	.L116:
1241:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1242:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1243:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1244:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Reset Tx and Rx transfer counters */
1245:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->TxXferCount = 0U; 
 2268              		.loc 1 1245 0
 2269 0098 7B68     		ldr	r3, [r7, #4]
 2270 009a 0022     		movs	r2, #0
 2271 009c A3F85220 		strh	r2, [r3, #82]	@ movhi
1246:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxXferCount = 0U; 
 2272              		.loc 1 1246 0
 2273 00a0 7B68     		ldr	r3, [r7, #4]
 2274 00a2 0022     		movs	r2, #0
 2275 00a4 A3F85A20 		strh	r2, [r3, #90]	@ movhi
1247:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1248:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
1249:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 2276              		.loc 1 1249 0
 2277 00a8 7B68     		ldr	r3, [r7, #4]
 2278 00aa 1B68     		ldr	r3, [r3]
 2279 00ac 0F22     		movs	r2, #15
 2280 00ae 1A62     		str	r2, [r3, #32]
1250:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1251:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
1252:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 2281              		.loc 1 1252 0
 2282 00b0 7B68     		ldr	r3, [r7, #4]
 2283 00b2 2022     		movs	r2, #32
 2284 00b4 83F86920 		strb	r2, [r3, #105]
1253:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 2285              		.loc 1 1253 0
 2286 00b8 7B68     		ldr	r3, [r7, #4]
 2287 00ba 2022     		movs	r2, #32
 2288 00bc 83F86A20 		strb	r2, [r3, #106]
1254:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1255:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Reset Handle ErrorCode to No Error */
1256:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 2289              		.loc 1 1256 0
 2290 00c0 7B68     		ldr	r3, [r7, #4]
 2291 00c2 0022     		movs	r2, #0
 2292 00c4 DA66     		str	r2, [r3, #108]
1257:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1258:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 2293              		.loc 1 1258 0
 2294 00c6 0023     		movs	r3, #0
1259:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 2295              		.loc 1 1259 0
 2296 00c8 1846     		mov	r0, r3
 2297 00ca 0837     		adds	r7, r7, #8
 2298              	.LCFI89:
 2299              		.cfi_def_cfa_offset 8
 2300 00cc BD46     		mov	sp, r7
 2301              	.LCFI90:
 2302              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cca0gMDq.s 			page 63


 2303              		@ sp needed
 2304 00ce 80BD     		pop	{r7, pc}
 2305              		.cfi_endproc
 2306              	.LFE139:
 2308              		.section	.text.HAL_UART_AbortTransmit,"ax",%progbits
 2309              		.align	2
 2310              		.global	HAL_UART_AbortTransmit
 2311              		.thumb
 2312              		.thumb_func
 2314              	HAL_UART_AbortTransmit:
 2315              	.LFB140:
1260:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1261:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1262:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
1263:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
1264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1265:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         This procedure performs following operations :
1266:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1267:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1268:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1269:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Set handle State to READY
1270:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1271:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1272:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** */
1273:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
1274:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 2316              		.loc 1 1274 0
 2317              		.cfi_startproc
 2318              		@ args = 0, pretend = 0, frame = 8
 2319              		@ frame_needed = 1, uses_anonymous_args = 0
 2320 0000 80B5     		push	{r7, lr}
 2321              	.LCFI91:
 2322              		.cfi_def_cfa_offset 8
 2323              		.cfi_offset 7, -8
 2324              		.cfi_offset 14, -4
 2325 0002 82B0     		sub	sp, sp, #8
 2326              	.LCFI92:
 2327              		.cfi_def_cfa_offset 16
 2328 0004 00AF     		add	r7, sp, #0
 2329              	.LCFI93:
 2330              		.cfi_def_cfa_register 7
 2331 0006 7860     		str	r0, [r7, #4]
1275:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
1276:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 2332              		.loc 1 1276 0
 2333 0008 7B68     		ldr	r3, [r7, #4]
 2334 000a 1B68     		ldr	r3, [r3]
 2335 000c 7A68     		ldr	r2, [r7, #4]
 2336 000e 1268     		ldr	r2, [r2]
 2337 0010 1268     		ldr	r2, [r2]
 2338 0012 22F0C002 		bic	r2, r2, #192
 2339 0016 1A60     		str	r2, [r3]
1277:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1278:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1279:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2340              		.loc 1 1279 0
 2341 0018 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cca0gMDq.s 			page 64


 2342 001a 1B68     		ldr	r3, [r3]
 2343 001c 9B68     		ldr	r3, [r3, #8]
 2344 001e 03F08003 		and	r3, r3, #128
 2345 0022 002B     		cmp	r3, #0
 2346 0024 14D0     		beq	.L119
1280:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1281:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2347              		.loc 1 1281 0
 2348 0026 7B68     		ldr	r3, [r7, #4]
 2349 0028 1B68     		ldr	r3, [r3]
 2350 002a 7A68     		ldr	r2, [r7, #4]
 2351 002c 1268     		ldr	r2, [r2]
 2352 002e 9268     		ldr	r2, [r2, #8]
 2353 0030 22F08002 		bic	r2, r2, #128
 2354 0034 9A60     		str	r2, [r3, #8]
1282:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1283:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1284:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(huart->hdmatx != NULL)
 2355              		.loc 1 1284 0
 2356 0036 7B68     		ldr	r3, [r7, #4]
 2357 0038 1B6E     		ldr	r3, [r3, #96]
 2358 003a 002B     		cmp	r3, #0
 2359 003c 08D0     		beq	.L119
1285:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1286:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null. 
1287:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1288:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 2360              		.loc 1 1288 0
 2361 003e 7B68     		ldr	r3, [r7, #4]
 2362 0040 1B6E     		ldr	r3, [r3, #96]
 2363 0042 0022     		movs	r2, #0
 2364 0044 5A63     		str	r2, [r3, #52]
1289:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1290:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmatx);
 2365              		.loc 1 1290 0
 2366 0046 7B68     		ldr	r3, [r7, #4]
 2367 0048 1B6E     		ldr	r3, [r3, #96]
 2368 004a 1846     		mov	r0, r3
 2369 004c FFF7FEFF 		bl	HAL_DMA_Abort
 2370              	.L119:
1291:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1292:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1293:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1294:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Reset Tx transfer counter */
1295:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->TxXferCount = 0U; 
 2371              		.loc 1 1295 0
 2372 0050 7B68     		ldr	r3, [r7, #4]
 2373 0052 0022     		movs	r2, #0
 2374 0054 A3F85220 		strh	r2, [r3, #82]	@ movhi
1296:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1297:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Restore huart->gState to Ready */
1298:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 2375              		.loc 1 1298 0
 2376 0058 7B68     		ldr	r3, [r7, #4]
 2377 005a 2022     		movs	r2, #32
 2378 005c 83F86920 		strb	r2, [r3, #105]
1299:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/cca0gMDq.s 			page 65


1300:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 2379              		.loc 1 1300 0
 2380 0060 0023     		movs	r3, #0
1301:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 2381              		.loc 1 1301 0
 2382 0062 1846     		mov	r0, r3
 2383 0064 0837     		adds	r7, r7, #8
 2384              	.LCFI94:
 2385              		.cfi_def_cfa_offset 8
 2386 0066 BD46     		mov	sp, r7
 2387              	.LCFI95:
 2388              		.cfi_def_cfa_register 13
 2389              		@ sp needed
 2390 0068 80BD     		pop	{r7, pc}
 2391              		.cfi_endproc
 2392              	.LFE140:
 2394 006a 00BF     		.section	.text.HAL_UART_AbortReceive,"ax",%progbits
 2395              		.align	2
 2396              		.global	HAL_UART_AbortReceive
 2397              		.thumb
 2398              		.thumb_func
 2400              	HAL_UART_AbortReceive:
 2401              	.LFB141:
1302:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1303:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1304:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1305:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
1306:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
1307:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         This procedure performs following operations :
1308:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
1309:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1310:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1311:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Set handle State to READY
1312:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1313:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1314:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** */
1315:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
1316:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 2402              		.loc 1 1316 0
 2403              		.cfi_startproc
 2404              		@ args = 0, pretend = 0, frame = 8
 2405              		@ frame_needed = 1, uses_anonymous_args = 0
 2406 0000 80B5     		push	{r7, lr}
 2407              	.LCFI96:
 2408              		.cfi_def_cfa_offset 8
 2409              		.cfi_offset 7, -8
 2410              		.cfi_offset 14, -4
 2411 0002 82B0     		sub	sp, sp, #8
 2412              	.LCFI97:
 2413              		.cfi_def_cfa_offset 16
 2414 0004 00AF     		add	r7, sp, #0
 2415              	.LCFI98:
 2416              		.cfi_def_cfa_register 7
 2417 0006 7860     		str	r0, [r7, #4]
1317:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1318:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 2418              		.loc 1 1318 0
ARM GAS  /tmp/cca0gMDq.s 			page 66


 2419 0008 7B68     		ldr	r3, [r7, #4]
 2420 000a 1B68     		ldr	r3, [r3]
 2421 000c 7A68     		ldr	r2, [r7, #4]
 2422 000e 1268     		ldr	r2, [r2]
 2423 0010 1268     		ldr	r2, [r2]
 2424 0012 22F49072 		bic	r2, r2, #288
 2425 0016 1A60     		str	r2, [r3]
1319:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2426              		.loc 1 1319 0
 2427 0018 7B68     		ldr	r3, [r7, #4]
 2428 001a 1B68     		ldr	r3, [r3]
 2429 001c 7A68     		ldr	r2, [r7, #4]
 2430 001e 1268     		ldr	r2, [r2]
 2431 0020 9268     		ldr	r2, [r2, #8]
 2432 0022 22F00102 		bic	r2, r2, #1
 2433 0026 9A60     		str	r2, [r3, #8]
1320:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1321:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1322:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2434              		.loc 1 1322 0
 2435 0028 7B68     		ldr	r3, [r7, #4]
 2436 002a 1B68     		ldr	r3, [r3]
 2437 002c 9B68     		ldr	r3, [r3, #8]
 2438 002e 03F04003 		and	r3, r3, #64
 2439 0032 002B     		cmp	r3, #0
 2440 0034 14D0     		beq	.L122
1323:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1324:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2441              		.loc 1 1324 0
 2442 0036 7B68     		ldr	r3, [r7, #4]
 2443 0038 1B68     		ldr	r3, [r3]
 2444 003a 7A68     		ldr	r2, [r7, #4]
 2445 003c 1268     		ldr	r2, [r2]
 2446 003e 9268     		ldr	r2, [r2, #8]
 2447 0040 22F04002 		bic	r2, r2, #64
 2448 0044 9A60     		str	r2, [r3, #8]
1325:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1326:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1327:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(huart->hdmarx != NULL)
 2449              		.loc 1 1327 0
 2450 0046 7B68     		ldr	r3, [r7, #4]
 2451 0048 5B6E     		ldr	r3, [r3, #100]
 2452 004a 002B     		cmp	r3, #0
 2453 004c 08D0     		beq	.L122
1328:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1329:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null. 
1330:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1331:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 2454              		.loc 1 1331 0
 2455 004e 7B68     		ldr	r3, [r7, #4]
 2456 0050 5B6E     		ldr	r3, [r3, #100]
 2457 0052 0022     		movs	r2, #0
 2458 0054 5A63     		str	r2, [r3, #52]
1332:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1333:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       HAL_DMA_Abort(huart->hdmarx);
 2459              		.loc 1 1333 0
 2460 0056 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cca0gMDq.s 			page 67


 2461 0058 5B6E     		ldr	r3, [r3, #100]
 2462 005a 1846     		mov	r0, r3
 2463 005c FFF7FEFF 		bl	HAL_DMA_Abort
 2464              	.L122:
1334:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1335:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1336:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1337:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Reset Rx transfer counter */
1338:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxXferCount = 0U; 
 2465              		.loc 1 1338 0
 2466 0060 7B68     		ldr	r3, [r7, #4]
 2467 0062 0022     		movs	r2, #0
 2468 0064 A3F85A20 		strh	r2, [r3, #90]	@ movhi
1339:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1340:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
1341:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 2469              		.loc 1 1341 0
 2470 0068 7B68     		ldr	r3, [r7, #4]
 2471 006a 1B68     		ldr	r3, [r3]
 2472 006c 0F22     		movs	r2, #15
 2473 006e 1A62     		str	r2, [r3, #32]
1342:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1343:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
1344:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 2474              		.loc 1 1344 0
 2475 0070 7B68     		ldr	r3, [r7, #4]
 2476 0072 2022     		movs	r2, #32
 2477 0074 83F86A20 		strb	r2, [r3, #106]
1345:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1346:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 2478              		.loc 1 1346 0
 2479 0078 0023     		movs	r3, #0
1347:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 2480              		.loc 1 1347 0
 2481 007a 1846     		mov	r0, r3
 2482 007c 0837     		adds	r7, r7, #8
 2483              	.LCFI99:
 2484              		.cfi_def_cfa_offset 8
 2485 007e BD46     		mov	sp, r7
 2486              	.LCFI100:
 2487              		.cfi_def_cfa_register 13
 2488              		@ sp needed
 2489 0080 80BD     		pop	{r7, pc}
 2490              		.cfi_endproc
 2491              	.LFE141:
 2493 0082 00BF     		.section	.text.HAL_UART_Abort_IT,"ax",%progbits
 2494              		.align	2
 2495              		.global	HAL_UART_Abort_IT
 2496              		.thumb
 2497              		.thumb_func
 2499              	HAL_UART_Abort_IT:
 2500              	.LFB142:
1348:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1349:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1350:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
1351:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
1352:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
ARM GAS  /tmp/cca0gMDq.s 			page 68


1353:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         This procedure performs following operations :
1354:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1355:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1356:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1357:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Set handle State to READY
1358:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1359:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1360:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1361:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1362:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** */
1363:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
1364:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 2501              		.loc 1 1364 0
 2502              		.cfi_startproc
 2503              		@ args = 0, pretend = 0, frame = 16
 2504              		@ frame_needed = 1, uses_anonymous_args = 0
 2505 0000 80B5     		push	{r7, lr}
 2506              	.LCFI101:
 2507              		.cfi_def_cfa_offset 8
 2508              		.cfi_offset 7, -8
 2509              		.cfi_offset 14, -4
 2510 0002 84B0     		sub	sp, sp, #16
 2511              	.LCFI102:
 2512              		.cfi_def_cfa_offset 24
 2513 0004 00AF     		add	r7, sp, #0
 2514              	.LCFI103:
 2515              		.cfi_def_cfa_register 7
 2516 0006 7860     		str	r0, [r7, #4]
1365:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint32_t abortcplt = 1U;
 2517              		.loc 1 1365 0
 2518 0008 0123     		movs	r3, #1
 2519 000a FB60     		str	r3, [r7, #12]
1366:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   
1367:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1368:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
 2520              		.loc 1 1368 0
 2521 000c 7B68     		ldr	r3, [r7, #4]
 2522 000e 1B68     		ldr	r3, [r3]
 2523 0010 7A68     		ldr	r2, [r7, #4]
 2524 0012 1268     		ldr	r2, [r2]
 2525 0014 1268     		ldr	r2, [r2]
 2526 0016 22F4F072 		bic	r2, r2, #480
 2527 001a 1A60     		str	r2, [r3]
1369:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2528              		.loc 1 1369 0
 2529 001c 7B68     		ldr	r3, [r7, #4]
 2530 001e 1B68     		ldr	r3, [r3]
 2531 0020 7A68     		ldr	r2, [r7, #4]
 2532 0022 1268     		ldr	r2, [r2]
 2533 0024 9268     		ldr	r2, [r2, #8]
 2534 0026 22F00102 		bic	r2, r2, #1
 2535 002a 9A60     		str	r2, [r3, #8]
1370:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1371:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks sh
1372:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      before any call to DMA Abort functions */
1373:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* DMA Tx Handle is valid */
1374:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(huart->hdmatx != NULL)
ARM GAS  /tmp/cca0gMDq.s 			page 69


 2536              		.loc 1 1374 0
 2537 002c 7B68     		ldr	r3, [r7, #4]
 2538 002e 1B6E     		ldr	r3, [r3, #96]
 2539 0030 002B     		cmp	r3, #0
 2540 0032 0FD0     		beq	.L125
1375:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1376:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
1377:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        Otherwise, set it to NULL */
1378:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2541              		.loc 1 1378 0
 2542 0034 7B68     		ldr	r3, [r7, #4]
 2543 0036 1B68     		ldr	r3, [r3]
 2544 0038 9B68     		ldr	r3, [r3, #8]
 2545 003a 03F08003 		and	r3, r3, #128
 2546 003e 002B     		cmp	r3, #0
 2547 0040 04D0     		beq	.L126
1379:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1380:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 2548              		.loc 1 1380 0
 2549 0042 7B68     		ldr	r3, [r7, #4]
 2550 0044 1B6E     		ldr	r3, [r3, #96]
 2551 0046 414A     		ldr	r2, .L135
 2552 0048 5A63     		str	r2, [r3, #52]
 2553 004a 03E0     		b	.L125
 2554              	.L126:
1381:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1382:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     else
1383:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1384:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
 2555              		.loc 1 1384 0
 2556 004c 7B68     		ldr	r3, [r7, #4]
 2557 004e 1B6E     		ldr	r3, [r3, #96]
 2558 0050 0022     		movs	r2, #0
 2559 0052 5A63     		str	r2, [r3, #52]
 2560              	.L125:
1385:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1386:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1387:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* DMA Rx Handle is valid */
1388:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(huart->hdmarx != NULL)
 2561              		.loc 1 1388 0
 2562 0054 7B68     		ldr	r3, [r7, #4]
 2563 0056 5B6E     		ldr	r3, [r3, #100]
 2564 0058 002B     		cmp	r3, #0
 2565 005a 0FD0     		beq	.L127
1389:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1390:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
1391:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        Otherwise, set it to NULL */
1392:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2566              		.loc 1 1392 0
 2567 005c 7B68     		ldr	r3, [r7, #4]
 2568 005e 1B68     		ldr	r3, [r3]
 2569 0060 9B68     		ldr	r3, [r3, #8]
 2570 0062 03F04003 		and	r3, r3, #64
 2571 0066 002B     		cmp	r3, #0
 2572 0068 04D0     		beq	.L128
1393:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1394:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
ARM GAS  /tmp/cca0gMDq.s 			page 70


 2573              		.loc 1 1394 0
 2574 006a 7B68     		ldr	r3, [r7, #4]
 2575 006c 5B6E     		ldr	r3, [r3, #100]
 2576 006e 384A     		ldr	r2, .L135+4
 2577 0070 5A63     		str	r2, [r3, #52]
 2578 0072 03E0     		b	.L127
 2579              	.L128:
1395:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1396:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     else
1397:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1398:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
 2580              		.loc 1 1398 0
 2581 0074 7B68     		ldr	r3, [r7, #4]
 2582 0076 5B6E     		ldr	r3, [r3, #100]
 2583 0078 0022     		movs	r2, #0
 2584 007a 5A63     		str	r2, [r3, #52]
 2585              	.L127:
1399:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1400:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1401:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   
1402:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1403:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2586              		.loc 1 1403 0
 2587 007c 7B68     		ldr	r3, [r7, #4]
 2588 007e 1B68     		ldr	r3, [r3]
 2589 0080 9B68     		ldr	r3, [r3, #8]
 2590 0082 03F08003 		and	r3, r3, #128
 2591 0086 002B     		cmp	r3, #0
 2592 0088 1AD0     		beq	.L129
1404:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1405:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Disable DMA Tx at UART level */
1406:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2593              		.loc 1 1406 0
 2594 008a 7B68     		ldr	r3, [r7, #4]
 2595 008c 1B68     		ldr	r3, [r3]
 2596 008e 7A68     		ldr	r2, [r7, #4]
 2597 0090 1268     		ldr	r2, [r2]
 2598 0092 9268     		ldr	r2, [r2, #8]
 2599 0094 22F08002 		bic	r2, r2, #128
 2600 0098 9A60     		str	r2, [r3, #8]
1407:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1408:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
1409:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(huart->hdmatx != NULL)
 2601              		.loc 1 1409 0
 2602 009a 7B68     		ldr	r3, [r7, #4]
 2603 009c 1B6E     		ldr	r3, [r3, #96]
 2604 009e 002B     		cmp	r3, #0
 2605 00a0 0ED0     		beq	.L129
1410:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1411:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* UART Tx DMA Abort callback has already been initialised : 
1412:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1413:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1414:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Abort DMA TX */
1415:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if(HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 2606              		.loc 1 1415 0
 2607 00a2 7B68     		ldr	r3, [r7, #4]
 2608 00a4 1B6E     		ldr	r3, [r3, #96]
ARM GAS  /tmp/cca0gMDq.s 			page 71


 2609 00a6 1846     		mov	r0, r3
 2610 00a8 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2611 00ac 0346     		mov	r3, r0
 2612 00ae 002B     		cmp	r3, #0
 2613 00b0 04D0     		beq	.L130
1416:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
1417:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback = NULL;
 2614              		.loc 1 1417 0
 2615 00b2 7B68     		ldr	r3, [r7, #4]
 2616 00b4 1B6E     		ldr	r3, [r3, #96]
 2617 00b6 0022     		movs	r2, #0
 2618 00b8 5A63     		str	r2, [r3, #52]
 2619 00ba 01E0     		b	.L129
 2620              	.L130:
1418:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1419:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       else
1420:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
1421:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         abortcplt = 0U;
 2621              		.loc 1 1421 0
 2622 00bc 0023     		movs	r3, #0
 2623 00be FB60     		str	r3, [r7, #12]
 2624              	.L129:
1422:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1423:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1424:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1425:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1426:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1427:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2625              		.loc 1 1427 0
 2626 00c0 7B68     		ldr	r3, [r7, #4]
 2627 00c2 1B68     		ldr	r3, [r3]
 2628 00c4 9B68     		ldr	r3, [r3, #8]
 2629 00c6 03F04003 		and	r3, r3, #64
 2630 00ca 002B     		cmp	r3, #0
 2631 00cc 1CD0     		beq	.L131
1428:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1429:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2632              		.loc 1 1429 0
 2633 00ce 7B68     		ldr	r3, [r7, #4]
 2634 00d0 1B68     		ldr	r3, [r3]
 2635 00d2 7A68     		ldr	r2, [r7, #4]
 2636 00d4 1268     		ldr	r2, [r2]
 2637 00d6 9268     		ldr	r2, [r2, #8]
 2638 00d8 22F04002 		bic	r2, r2, #64
 2639 00dc 9A60     		str	r2, [r3, #8]
1430:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1431:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
1432:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(huart->hdmarx != NULL)
 2640              		.loc 1 1432 0
 2641 00de 7B68     		ldr	r3, [r7, #4]
 2642 00e0 5B6E     		ldr	r3, [r3, #100]
 2643 00e2 002B     		cmp	r3, #0
 2644 00e4 10D0     		beq	.L131
1433:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1434:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* UART Rx DMA Abort callback has already been initialised : 
1435:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1436:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/cca0gMDq.s 			page 72


1437:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Abort DMA RX */
1438:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 2645              		.loc 1 1438 0
 2646 00e6 7B68     		ldr	r3, [r7, #4]
 2647 00e8 5B6E     		ldr	r3, [r3, #100]
 2648 00ea 1846     		mov	r0, r3
 2649 00ec FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2650 00f0 0346     		mov	r3, r0
 2651 00f2 002B     		cmp	r3, #0
 2652 00f4 06D0     		beq	.L132
1439:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
1440:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback = NULL;
 2653              		.loc 1 1440 0
 2654 00f6 7B68     		ldr	r3, [r7, #4]
 2655 00f8 5B6E     		ldr	r3, [r3, #100]
 2656 00fa 0022     		movs	r2, #0
 2657 00fc 5A63     		str	r2, [r3, #52]
1441:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         abortcplt = 1U;
 2658              		.loc 1 1441 0
 2659 00fe 0123     		movs	r3, #1
 2660 0100 FB60     		str	r3, [r7, #12]
 2661 0102 01E0     		b	.L131
 2662              	.L132:
1442:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1443:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       else
1444:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
1445:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         abortcplt = 0U;
 2663              		.loc 1 1445 0
 2664 0104 0023     		movs	r3, #0
 2665 0106 FB60     		str	r3, [r7, #12]
 2666              	.L131:
1446:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1447:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1448:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1449:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1450:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
1451:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (abortcplt == 1U)
 2667              		.loc 1 1451 0
 2668 0108 FB68     		ldr	r3, [r7, #12]
 2669 010a 012B     		cmp	r3, #1
 2670 010c 19D1     		bne	.L133
1452:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1453:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Reset Tx and Rx transfer counters */
1454:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->TxXferCount = 0U; 
 2671              		.loc 1 1454 0
 2672 010e 7B68     		ldr	r3, [r7, #4]
 2673 0110 0022     		movs	r2, #0
 2674 0112 A3F85220 		strh	r2, [r3, #82]	@ movhi
1455:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxXferCount = 0U;
 2675              		.loc 1 1455 0
 2676 0116 7B68     		ldr	r3, [r7, #4]
 2677 0118 0022     		movs	r2, #0
 2678 011a A3F85A20 		strh	r2, [r3, #90]	@ movhi
1456:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1457:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Reset errorCode */
1458:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
 2679              		.loc 1 1458 0
ARM GAS  /tmp/cca0gMDq.s 			page 73


 2680 011e 7B68     		ldr	r3, [r7, #4]
 2681 0120 0022     		movs	r2, #0
 2682 0122 DA66     		str	r2, [r3, #108]
1459:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1460:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Clear the Error flags in the ICR register */
1461:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF
 2683              		.loc 1 1461 0
 2684 0124 7B68     		ldr	r3, [r7, #4]
 2685 0126 1B68     		ldr	r3, [r3]
 2686 0128 0F22     		movs	r2, #15
 2687 012a 1A62     		str	r2, [r3, #32]
1462:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1463:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Restore huart->gState and huart->RxState to Ready */
1464:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->gState  = HAL_UART_STATE_READY;
 2688              		.loc 1 1464 0
 2689 012c 7B68     		ldr	r3, [r7, #4]
 2690 012e 2022     		movs	r2, #32
 2691 0130 83F86920 		strb	r2, [r3, #105]
1465:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 2692              		.loc 1 1465 0
 2693 0134 7B68     		ldr	r3, [r7, #4]
 2694 0136 2022     		movs	r2, #32
 2695 0138 83F86A20 		strb	r2, [r3, #106]
1466:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1467:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1468:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     HAL_UART_AbortCpltCallback(huart);
 2696              		.loc 1 1468 0
 2697 013c 7868     		ldr	r0, [r7, #4]
 2698 013e FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 2699              	.L133:
1469:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1470:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1471:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 2700              		.loc 1 1471 0
 2701 0142 0023     		movs	r3, #0
1472:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 2702              		.loc 1 1472 0
 2703 0144 1846     		mov	r0, r3
 2704 0146 1037     		adds	r7, r7, #16
 2705              	.LCFI104:
 2706              		.cfi_def_cfa_offset 8
 2707 0148 BD46     		mov	sp, r7
 2708              	.LCFI105:
 2709              		.cfi_def_cfa_register 13
 2710              		@ sp needed
 2711 014a 80BD     		pop	{r7, pc}
 2712              	.L136:
 2713              		.align	2
 2714              	.L135:
 2715 014c 00000000 		.word	UART_DMATxAbortCallback
 2716 0150 00000000 		.word	UART_DMARxAbortCallback
 2717              		.cfi_endproc
 2718              	.LFE142:
 2720              		.section	.text.HAL_UART_AbortTransmit_IT,"ax",%progbits
 2721              		.align	2
 2722              		.global	HAL_UART_AbortTransmit_IT
 2723              		.thumb
ARM GAS  /tmp/cca0gMDq.s 			page 74


 2724              		.thumb_func
 2726              	HAL_UART_AbortTransmit_IT:
 2727              	.LFB143:
1473:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1474:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1475:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
1476:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
1477:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1478:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         This procedure performs following operations :
1479:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1480:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1481:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1482:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Set handle State to READY
1483:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1484:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1485:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1486:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1487:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** */
1488:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
1489:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 2728              		.loc 1 1489 0
 2729              		.cfi_startproc
 2730              		@ args = 0, pretend = 0, frame = 8
 2731              		@ frame_needed = 1, uses_anonymous_args = 0
 2732 0000 80B5     		push	{r7, lr}
 2733              	.LCFI106:
 2734              		.cfi_def_cfa_offset 8
 2735              		.cfi_offset 7, -8
 2736              		.cfi_offset 14, -4
 2737 0002 82B0     		sub	sp, sp, #8
 2738              	.LCFI107:
 2739              		.cfi_def_cfa_offset 16
 2740 0004 00AF     		add	r7, sp, #0
 2741              	.LCFI108:
 2742              		.cfi_def_cfa_register 7
 2743 0006 7860     		str	r0, [r7, #4]
1490:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
1491:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 2744              		.loc 1 1491 0
 2745 0008 7B68     		ldr	r3, [r7, #4]
 2746 000a 1B68     		ldr	r3, [r3]
 2747 000c 7A68     		ldr	r2, [r7, #4]
 2748 000e 1268     		ldr	r2, [r2]
 2749 0010 1268     		ldr	r2, [r2]
 2750 0012 22F0C002 		bic	r2, r2, #192
 2751 0016 1A60     		str	r2, [r3]
1492:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1493:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1494:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 2752              		.loc 1 1494 0
 2753 0018 7B68     		ldr	r3, [r7, #4]
 2754 001a 1B68     		ldr	r3, [r3]
 2755 001c 9B68     		ldr	r3, [r3, #8]
 2756 001e 03F08003 		and	r3, r3, #128
 2757 0022 002B     		cmp	r3, #0
 2758 0024 2BD0     		beq	.L138
1495:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
ARM GAS  /tmp/cca0gMDq.s 			page 75


1496:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 2759              		.loc 1 1496 0
 2760 0026 7B68     		ldr	r3, [r7, #4]
 2761 0028 1B68     		ldr	r3, [r3]
 2762 002a 7A68     		ldr	r2, [r7, #4]
 2763 002c 1268     		ldr	r2, [r2]
 2764 002e 9268     		ldr	r2, [r2, #8]
 2765 0030 22F08002 		bic	r2, r2, #128
 2766 0034 9A60     		str	r2, [r3, #8]
1497:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1498:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
1499:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(huart->hdmatx != NULL)
 2767              		.loc 1 1499 0
 2768 0036 7B68     		ldr	r3, [r7, #4]
 2769 0038 1B6E     		ldr	r3, [r3, #96]
 2770 003a 002B     		cmp	r3, #0
 2771 003c 13D0     		beq	.L139
1500:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1501:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Set the UART DMA Abort callback : 
1502:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1503:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 2772              		.loc 1 1503 0
 2773 003e 7B68     		ldr	r3, [r7, #4]
 2774 0040 1B6E     		ldr	r3, [r3, #96]
 2775 0042 174A     		ldr	r2, .L144
 2776 0044 5A63     		str	r2, [r3, #52]
1504:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1505:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Abort DMA TX */
1506:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if(HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 2777              		.loc 1 1506 0
 2778 0046 7B68     		ldr	r3, [r7, #4]
 2779 0048 1B6E     		ldr	r3, [r3, #96]
 2780 004a 1846     		mov	r0, r3
 2781 004c FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2782 0050 0346     		mov	r3, r0
 2783 0052 002B     		cmp	r3, #0
 2784 0054 1ED0     		beq	.L142
1507:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
1508:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
1509:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback(huart->hdmatx);
 2785              		.loc 1 1509 0
 2786 0056 7B68     		ldr	r3, [r7, #4]
 2787 0058 1B6E     		ldr	r3, [r3, #96]
 2788 005a 5B6B     		ldr	r3, [r3, #52]
 2789 005c 7A68     		ldr	r2, [r7, #4]
 2790 005e 126E     		ldr	r2, [r2, #96]
 2791 0060 1046     		mov	r0, r2
 2792 0062 9847     		blx	r3
 2793 0064 16E0     		b	.L142
 2794              	.L139:
1510:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1511:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1512:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     else
1513:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1514:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Reset Tx transfer counter */
1515:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->TxXferCount = 0U; 
 2795              		.loc 1 1515 0
ARM GAS  /tmp/cca0gMDq.s 			page 76


 2796 0066 7B68     		ldr	r3, [r7, #4]
 2797 0068 0022     		movs	r2, #0
 2798 006a A3F85220 		strh	r2, [r3, #82]	@ movhi
1516:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1517:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Restore huart->gState to Ready */
1518:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
 2799              		.loc 1 1518 0
 2800 006e 7B68     		ldr	r3, [r7, #4]
 2801 0070 2022     		movs	r2, #32
 2802 0072 83F86920 		strb	r2, [r3, #105]
1519:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1520:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1521:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       HAL_UART_AbortTransmitCpltCallback(huart);
 2803              		.loc 1 1521 0
 2804 0076 7868     		ldr	r0, [r7, #4]
 2805 0078 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 2806 007c 0AE0     		b	.L142
 2807              	.L138:
1522:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1523:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1524:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
1525:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1526:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Reset Tx transfer counter */
1527:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->TxXferCount = 0U; 
 2808              		.loc 1 1527 0
 2809 007e 7B68     		ldr	r3, [r7, #4]
 2810 0080 0022     		movs	r2, #0
 2811 0082 A3F85220 		strh	r2, [r3, #82]	@ movhi
1528:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1529:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Restore huart->gState to Ready */
1530:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
 2812              		.loc 1 1530 0
 2813 0086 7B68     		ldr	r3, [r7, #4]
 2814 0088 2022     		movs	r2, #32
 2815 008a 83F86920 		strb	r2, [r3, #105]
1531:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1532:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1533:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     HAL_UART_AbortTransmitCpltCallback(huart);
 2816              		.loc 1 1533 0
 2817 008e 7868     		ldr	r0, [r7, #4]
 2818 0090 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 2819              	.L142:
1534:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1535:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1536:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 2820              		.loc 1 1536 0
 2821 0094 0023     		movs	r3, #0
1537:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 2822              		.loc 1 1537 0
 2823 0096 1846     		mov	r0, r3
 2824 0098 0837     		adds	r7, r7, #8
 2825              	.LCFI109:
 2826              		.cfi_def_cfa_offset 8
 2827 009a BD46     		mov	sp, r7
 2828              	.LCFI110:
 2829              		.cfi_def_cfa_register 13
 2830              		@ sp needed
ARM GAS  /tmp/cca0gMDq.s 			page 77


 2831 009c 80BD     		pop	{r7, pc}
 2832              	.L145:
 2833 009e 00BF     		.align	2
 2834              	.L144:
 2835 00a0 00000000 		.word	UART_DMATxOnlyAbortCallback
 2836              		.cfi_endproc
 2837              	.LFE143:
 2839              		.section	.text.HAL_UART_AbortReceive_IT,"ax",%progbits
 2840              		.align	2
 2841              		.global	HAL_UART_AbortReceive_IT
 2842              		.thumb
 2843              		.thumb_func
 2845              	HAL_UART_AbortReceive_IT:
 2846              	.LFB144:
1538:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1539:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1540:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
1541:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
1542:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
1543:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         This procedure performs following operations :
1544:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
1545:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1546:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1547:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - Set handle State to READY
1548:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1549:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1550:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1551:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1552:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** */
1553:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
1554:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 2847              		.loc 1 1554 0
 2848              		.cfi_startproc
 2849              		@ args = 0, pretend = 0, frame = 8
 2850              		@ frame_needed = 1, uses_anonymous_args = 0
 2851 0000 80B5     		push	{r7, lr}
 2852              	.LCFI111:
 2853              		.cfi_def_cfa_offset 8
 2854              		.cfi_offset 7, -8
 2855              		.cfi_offset 14, -4
 2856 0002 82B0     		sub	sp, sp, #8
 2857              	.LCFI112:
 2858              		.cfi_def_cfa_offset 16
 2859 0004 00AF     		add	r7, sp, #0
 2860              	.LCFI113:
 2861              		.cfi_def_cfa_register 7
 2862 0006 7860     		str	r0, [r7, #4]
1555:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1556:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 2863              		.loc 1 1556 0
 2864 0008 7B68     		ldr	r3, [r7, #4]
 2865 000a 1B68     		ldr	r3, [r3]
 2866 000c 7A68     		ldr	r2, [r7, #4]
 2867 000e 1268     		ldr	r2, [r2]
 2868 0010 1268     		ldr	r2, [r2]
 2869 0012 22F49072 		bic	r2, r2, #288
 2870 0016 1A60     		str	r2, [r3]
ARM GAS  /tmp/cca0gMDq.s 			page 78


1557:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2871              		.loc 1 1557 0
 2872 0018 7B68     		ldr	r3, [r7, #4]
 2873 001a 1B68     		ldr	r3, [r3]
 2874 001c 7A68     		ldr	r2, [r7, #4]
 2875 001e 1268     		ldr	r2, [r2]
 2876 0020 9268     		ldr	r2, [r2, #8]
 2877 0022 22F00102 		bic	r2, r2, #1
 2878 0026 9A60     		str	r2, [r3, #8]
1558:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1559:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1560:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 2879              		.loc 1 1560 0
 2880 0028 7B68     		ldr	r3, [r7, #4]
 2881 002a 1B68     		ldr	r3, [r3]
 2882 002c 9B68     		ldr	r3, [r3, #8]
 2883 002e 03F04003 		and	r3, r3, #64
 2884 0032 002B     		cmp	r3, #0
 2885 0034 2FD0     		beq	.L147
1561:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1562:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 2886              		.loc 1 1562 0
 2887 0036 7B68     		ldr	r3, [r7, #4]
 2888 0038 1B68     		ldr	r3, [r3]
 2889 003a 7A68     		ldr	r2, [r7, #4]
 2890 003c 1268     		ldr	r2, [r2]
 2891 003e 9268     		ldr	r2, [r2, #8]
 2892 0040 22F04002 		bic	r2, r2, #64
 2893 0044 9A60     		str	r2, [r3, #8]
1563:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1564:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
1565:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(huart->hdmarx != NULL)
 2894              		.loc 1 1565 0
 2895 0046 7B68     		ldr	r3, [r7, #4]
 2896 0048 5B6E     		ldr	r3, [r3, #100]
 2897 004a 002B     		cmp	r3, #0
 2898 004c 13D0     		beq	.L148
1566:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1567:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Set the UART DMA Abort callback : 
1568:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1569:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 2899              		.loc 1 1569 0
 2900 004e 7B68     		ldr	r3, [r7, #4]
 2901 0050 5B6E     		ldr	r3, [r3, #100]
 2902 0052 1B4A     		ldr	r2, .L153
 2903 0054 5A63     		str	r2, [r3, #52]
1570:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1571:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Abort DMA RX */
1572:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 2904              		.loc 1 1572 0
 2905 0056 7B68     		ldr	r3, [r7, #4]
 2906 0058 5B6E     		ldr	r3, [r3, #100]
 2907 005a 1846     		mov	r0, r3
 2908 005c FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2909 0060 0346     		mov	r3, r0
 2910 0062 002B     		cmp	r3, #0
 2911 0064 26D0     		beq	.L151
ARM GAS  /tmp/cca0gMDq.s 			page 79


1573:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
1574:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
1575:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback(huart->hdmarx);
 2912              		.loc 1 1575 0
 2913 0066 7B68     		ldr	r3, [r7, #4]
 2914 0068 5B6E     		ldr	r3, [r3, #100]
 2915 006a 5B6B     		ldr	r3, [r3, #52]
 2916 006c 7A68     		ldr	r2, [r7, #4]
 2917 006e 526E     		ldr	r2, [r2, #100]
 2918 0070 1046     		mov	r0, r2
 2919 0072 9847     		blx	r3
 2920 0074 1EE0     		b	.L151
 2921              	.L148:
1576:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1577:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1578:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     else
1579:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1580:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Reset Rx transfer counter */
1581:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->RxXferCount = 0U; 
 2922              		.loc 1 1581 0
 2923 0076 7B68     		ldr	r3, [r7, #4]
 2924 0078 0022     		movs	r2, #0
 2925 007a A3F85A20 		strh	r2, [r3, #90]	@ movhi
1582:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1583:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Clear the Error flags in the ICR register */
1584:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_F
 2926              		.loc 1 1584 0
 2927 007e 7B68     		ldr	r3, [r7, #4]
 2928 0080 1B68     		ldr	r3, [r3]
 2929 0082 0F22     		movs	r2, #15
 2930 0084 1A62     		str	r2, [r3, #32]
1585:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1586:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Restore huart->RxState to Ready */
1587:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 2931              		.loc 1 1587 0
 2932 0086 7B68     		ldr	r3, [r7, #4]
 2933 0088 2022     		movs	r2, #32
 2934 008a 83F86A20 		strb	r2, [r3, #106]
1588:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1589:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1590:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       HAL_UART_AbortReceiveCpltCallback(huart);
 2935              		.loc 1 1590 0
 2936 008e 7868     		ldr	r0, [r7, #4]
 2937 0090 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 2938 0094 0EE0     		b	.L151
 2939              	.L147:
1591:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1592:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1593:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
1594:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1595:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Reset Rx transfer counter */
1596:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxXferCount = 0U; 
 2940              		.loc 1 1596 0
 2941 0096 7B68     		ldr	r3, [r7, #4]
 2942 0098 0022     		movs	r2, #0
 2943 009a A3F85A20 		strh	r2, [r3, #90]	@ movhi
1597:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/cca0gMDq.s 			page 80


1598:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Clear the Error flags in the ICR register */
1599:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF
 2944              		.loc 1 1599 0
 2945 009e 7B68     		ldr	r3, [r7, #4]
 2946 00a0 1B68     		ldr	r3, [r3]
 2947 00a2 0F22     		movs	r2, #15
 2948 00a4 1A62     		str	r2, [r3, #32]
1600:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1601:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Restore huart->RxState to Ready */
1602:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 2949              		.loc 1 1602 0
 2950 00a6 7B68     		ldr	r3, [r7, #4]
 2951 00a8 2022     		movs	r2, #32
 2952 00aa 83F86A20 		strb	r2, [r3, #106]
1603:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1604:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1605:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     HAL_UART_AbortReceiveCpltCallback(huart);
 2953              		.loc 1 1605 0
 2954 00ae 7868     		ldr	r0, [r7, #4]
 2955 00b0 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 2956              	.L151:
1606:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1607:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1608:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 2957              		.loc 1 1608 0
 2958 00b4 0023     		movs	r3, #0
1609:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 2959              		.loc 1 1609 0
 2960 00b6 1846     		mov	r0, r3
 2961 00b8 0837     		adds	r7, r7, #8
 2962              	.LCFI114:
 2963              		.cfi_def_cfa_offset 8
 2964 00ba BD46     		mov	sp, r7
 2965              	.LCFI115:
 2966              		.cfi_def_cfa_register 13
 2967              		@ sp needed
 2968 00bc 80BD     		pop	{r7, pc}
 2969              	.L154:
 2970 00be 00BF     		.align	2
 2971              	.L153:
 2972 00c0 00000000 		.word	UART_DMARxOnlyAbortCallback
 2973              		.cfi_endproc
 2974              	.LFE144:
 2976              		.section	.text.HAL_UART_IRQHandler,"ax",%progbits
 2977              		.align	2
 2978              		.global	HAL_UART_IRQHandler
 2979              		.thumb
 2980              		.thumb_func
 2982              	HAL_UART_IRQHandler:
 2983              	.LFB145:
1610:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1611:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1612:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Handle UART interrupt request.
1613:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
1614:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
1615:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1616:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
ARM GAS  /tmp/cca0gMDq.s 			page 81


1617:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 2984              		.loc 1 1617 0
 2985              		.cfi_startproc
 2986              		@ args = 0, pretend = 0, frame = 24
 2987              		@ frame_needed = 1, uses_anonymous_args = 0
 2988 0000 80B5     		push	{r7, lr}
 2989              	.LCFI116:
 2990              		.cfi_def_cfa_offset 8
 2991              		.cfi_offset 7, -8
 2992              		.cfi_offset 14, -4
 2993 0002 86B0     		sub	sp, sp, #24
 2994              	.LCFI117:
 2995              		.cfi_def_cfa_offset 32
 2996 0004 00AF     		add	r7, sp, #0
 2997              	.LCFI118:
 2998              		.cfi_def_cfa_register 7
 2999 0006 7860     		str	r0, [r7, #4]
1618:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 3000              		.loc 1 1618 0
 3001 0008 7B68     		ldr	r3, [r7, #4]
 3002 000a 1B68     		ldr	r3, [r3]
 3003 000c DB69     		ldr	r3, [r3, #28]
 3004 000e 7B61     		str	r3, [r7, #20]
1619:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 3005              		.loc 1 1619 0
 3006 0010 7B68     		ldr	r3, [r7, #4]
 3007 0012 1B68     		ldr	r3, [r3]
 3008 0014 1B68     		ldr	r3, [r3]
 3009 0016 3B61     		str	r3, [r7, #16]
1620:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint32_t cr3its;
1621:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint32_t errorflags;
1622:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1623:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* If no error occurs */
1624:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 3010              		.loc 1 1624 0
 3011 0018 7B69     		ldr	r3, [r7, #20]
 3012 001a 03F00F03 		and	r3, r3, #15
 3013 001e FB60     		str	r3, [r7, #12]
1625:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (errorflags == RESET)
 3014              		.loc 1 1625 0
 3015 0020 FB68     		ldr	r3, [r7, #12]
 3016 0022 002B     		cmp	r3, #0
 3017 0024 0DD1     		bne	.L156
1626:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1627:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* UART in mode Receiver ---------------------------------------------------*/
1628:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 3018              		.loc 1 1628 0
 3019 0026 7B69     		ldr	r3, [r7, #20]
 3020 0028 03F02003 		and	r3, r3, #32
 3021 002c 002B     		cmp	r3, #0
 3022 002e 08D0     		beq	.L156
 3023              		.loc 1 1628 0 is_stmt 0 discriminator 1
 3024 0030 3B69     		ldr	r3, [r7, #16]
 3025 0032 03F02003 		and	r3, r3, #32
 3026 0036 002B     		cmp	r3, #0
 3027 0038 03D0     		beq	.L156
1629:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
ARM GAS  /tmp/cca0gMDq.s 			page 82


1630:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       UART_Receive_IT(huart);
 3028              		.loc 1 1630 0 is_stmt 1
 3029 003a 7868     		ldr	r0, [r7, #4]
 3030 003c FFF7FEFF 		bl	UART_Receive_IT
1631:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return;
 3031              		.loc 1 1631 0
 3032 0040 F7E0     		b	.L155
 3033              	.L156:
1632:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1633:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }  
1634:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1635:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* If some errors occur */
1636:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   cr3its = READ_REG(huart->Instance->CR3);
 3034              		.loc 1 1636 0
 3035 0042 7B68     		ldr	r3, [r7, #4]
 3036 0044 1B68     		ldr	r3, [r3]
 3037 0046 9B68     		ldr	r3, [r3, #8]
 3038 0048 BB60     		str	r3, [r7, #8]
1637:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(   (errorflags != RESET)
 3039              		.loc 1 1637 0
 3040 004a FB68     		ldr	r3, [r7, #12]
 3041 004c 002B     		cmp	r3, #0
 3042 004e 00F0B980 		beq	.L158
1638:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      && (   ((cr3its & USART_CR3_EIE) != RESET)
 3043              		.loc 1 1638 0
 3044 0052 BB68     		ldr	r3, [r7, #8]
 3045 0054 03F00103 		and	r3, r3, #1
 3046 0058 002B     		cmp	r3, #0
 3047 005a 05D1     		bne	.L159
1639:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 3048              		.loc 1 1639 0
 3049 005c 3B69     		ldr	r3, [r7, #16]
 3050 005e 03F49073 		and	r3, r3, #288
 3051 0062 002B     		cmp	r3, #0
 3052 0064 00F0AE80 		beq	.L158
 3053              	.L159:
1640:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1641:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* UART parity error interrupt occurred -------------------------------------*/
1642:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 3054              		.loc 1 1642 0
 3055 0068 7B69     		ldr	r3, [r7, #20]
 3056 006a 03F00103 		and	r3, r3, #1
 3057 006e 002B     		cmp	r3, #0
 3058 0070 0ED0     		beq	.L160
 3059              		.loc 1 1642 0 is_stmt 0 discriminator 1
 3060 0072 3B69     		ldr	r3, [r7, #16]
 3061 0074 03F48073 		and	r3, r3, #256
 3062 0078 002B     		cmp	r3, #0
 3063 007a 09D0     		beq	.L160
1643:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1644:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 3064              		.loc 1 1644 0 is_stmt 1
 3065 007c 7B68     		ldr	r3, [r7, #4]
 3066 007e 1B68     		ldr	r3, [r3]
 3067 0080 0122     		movs	r2, #1
 3068 0082 1A62     		str	r2, [r3, #32]
1645:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/cca0gMDq.s 			page 83


1646:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_PE;
 3069              		.loc 1 1646 0
 3070 0084 7B68     		ldr	r3, [r7, #4]
 3071 0086 DB6E     		ldr	r3, [r3, #108]
 3072 0088 43F00102 		orr	r2, r3, #1
 3073 008c 7B68     		ldr	r3, [r7, #4]
 3074 008e DA66     		str	r2, [r3, #108]
 3075              	.L160:
1647:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1648:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1649:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* UART frame error interrupt occurred --------------------------------------*/
1650:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 3076              		.loc 1 1650 0
 3077 0090 7B69     		ldr	r3, [r7, #20]
 3078 0092 03F00203 		and	r3, r3, #2
 3079 0096 002B     		cmp	r3, #0
 3080 0098 0ED0     		beq	.L161
 3081              		.loc 1 1650 0 is_stmt 0 discriminator 1
 3082 009a BB68     		ldr	r3, [r7, #8]
 3083 009c 03F00103 		and	r3, r3, #1
 3084 00a0 002B     		cmp	r3, #0
 3085 00a2 09D0     		beq	.L161
1651:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1652:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 3086              		.loc 1 1652 0 is_stmt 1
 3087 00a4 7B68     		ldr	r3, [r7, #4]
 3088 00a6 1B68     		ldr	r3, [r3]
 3089 00a8 0222     		movs	r2, #2
 3090 00aa 1A62     		str	r2, [r3, #32]
1653:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1654:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_FE;
 3091              		.loc 1 1654 0
 3092 00ac 7B68     		ldr	r3, [r7, #4]
 3093 00ae DB6E     		ldr	r3, [r3, #108]
 3094 00b0 43F00402 		orr	r2, r3, #4
 3095 00b4 7B68     		ldr	r3, [r7, #4]
 3096 00b6 DA66     		str	r2, [r3, #108]
 3097              	.L161:
1655:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1656:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1657:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* UART noise error interrupt occurred --------------------------------------*/
1658:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 3098              		.loc 1 1658 0
 3099 00b8 7B69     		ldr	r3, [r7, #20]
 3100 00ba 03F00403 		and	r3, r3, #4
 3101 00be 002B     		cmp	r3, #0
 3102 00c0 0ED0     		beq	.L162
 3103              		.loc 1 1658 0 is_stmt 0 discriminator 1
 3104 00c2 BB68     		ldr	r3, [r7, #8]
 3105 00c4 03F00103 		and	r3, r3, #1
 3106 00c8 002B     		cmp	r3, #0
 3107 00ca 09D0     		beq	.L162
1659:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1660:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 3108              		.loc 1 1660 0 is_stmt 1
 3109 00cc 7B68     		ldr	r3, [r7, #4]
 3110 00ce 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cca0gMDq.s 			page 84


 3111 00d0 0422     		movs	r2, #4
 3112 00d2 1A62     		str	r2, [r3, #32]
1661:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1662:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_NE;
 3113              		.loc 1 1662 0
 3114 00d4 7B68     		ldr	r3, [r7, #4]
 3115 00d6 DB6E     		ldr	r3, [r3, #108]
 3116 00d8 43F00202 		orr	r2, r3, #2
 3117 00dc 7B68     		ldr	r3, [r7, #4]
 3118 00de DA66     		str	r2, [r3, #108]
 3119              	.L162:
1663:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1664:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     
1665:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* UART Over-Run interrupt occurred -----------------------------------------*/
1666:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(((isrflags & USART_ISR_ORE) != RESET) &&
 3120              		.loc 1 1666 0
 3121 00e0 7B69     		ldr	r3, [r7, #20]
 3122 00e2 03F00803 		and	r3, r3, #8
 3123 00e6 002B     		cmp	r3, #0
 3124 00e8 13D0     		beq	.L163
1667:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 3125              		.loc 1 1667 0 discriminator 1
 3126 00ea 3B69     		ldr	r3, [r7, #16]
 3127 00ec 03F02003 		and	r3, r3, #32
1666:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 3128              		.loc 1 1666 0 discriminator 1
 3129 00f0 002B     		cmp	r3, #0
 3130 00f2 04D1     		bne	.L164
 3131              		.loc 1 1667 0
 3132 00f4 BB68     		ldr	r3, [r7, #8]
 3133 00f6 03F00103 		and	r3, r3, #1
 3134 00fa 002B     		cmp	r3, #0
 3135 00fc 09D0     		beq	.L163
 3136              	.L164:
1668:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1669:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 3137              		.loc 1 1669 0
 3138 00fe 7B68     		ldr	r3, [r7, #4]
 3139 0100 1B68     		ldr	r3, [r3]
 3140 0102 0822     		movs	r2, #8
 3141 0104 1A62     		str	r2, [r3, #32]
1670:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1671:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_ORE;
 3142              		.loc 1 1671 0
 3143 0106 7B68     		ldr	r3, [r7, #4]
 3144 0108 DB6E     		ldr	r3, [r3, #108]
 3145 010a 43F00802 		orr	r2, r3, #8
 3146 010e 7B68     		ldr	r3, [r7, #4]
 3147 0110 DA66     		str	r2, [r3, #108]
 3148              	.L163:
1672:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1673:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1674:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Call UART Error Call back function if need be --------------------------*/
1675:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 3149              		.loc 1 1675 0
 3150 0112 7B68     		ldr	r3, [r7, #4]
 3151 0114 DB6E     		ldr	r3, [r3, #108]
ARM GAS  /tmp/cca0gMDq.s 			page 85


 3152 0116 002B     		cmp	r3, #0
 3153 0118 53D0     		beq	.L165
1676:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
1677:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* UART in mode Receiver ---------------------------------------------------*/
1678:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 3154              		.loc 1 1678 0
 3155 011a 7B69     		ldr	r3, [r7, #20]
 3156 011c 03F02003 		and	r3, r3, #32
 3157 0120 002B     		cmp	r3, #0
 3158 0122 07D0     		beq	.L166
 3159              		.loc 1 1678 0 is_stmt 0 discriminator 1
 3160 0124 3B69     		ldr	r3, [r7, #16]
 3161 0126 03F02003 		and	r3, r3, #32
 3162 012a 002B     		cmp	r3, #0
 3163 012c 02D0     		beq	.L166
1679:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
1680:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         UART_Receive_IT(huart);
 3164              		.loc 1 1680 0 is_stmt 1
 3165 012e 7868     		ldr	r0, [r7, #4]
 3166 0130 FFF7FEFF 		bl	UART_Receive_IT
 3167              	.L166:
1681:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1682:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1683:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* If Overrun error occurs, or if any error occurs in DMA mode reception,
1684:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****          consider error as blocking */
1685:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 3168              		.loc 1 1685 0
 3169 0134 7B68     		ldr	r3, [r7, #4]
 3170 0136 DB6E     		ldr	r3, [r3, #108]
 3171 0138 03F00803 		and	r3, r3, #8
 3172 013c 002B     		cmp	r3, #0
 3173 013e 06D1     		bne	.L167
1686:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 3174              		.loc 1 1686 0 discriminator 1
 3175 0140 7B68     		ldr	r3, [r7, #4]
 3176 0142 1B68     		ldr	r3, [r3]
 3177 0144 9B68     		ldr	r3, [r3, #8]
 3178 0146 03F04003 		and	r3, r3, #64
1685:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 3179              		.loc 1 1685 0 discriminator 1
 3180 014a 002B     		cmp	r3, #0
 3181 014c 32D0     		beq	.L168
 3182              	.L167:
1687:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {  
1688:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /* Blocking error : transfer is aborted
1689:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            Set the UART state ready to be able to start again the process,
1690:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
1691:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         UART_EndRxTransfer(huart);
 3183              		.loc 1 1691 0
 3184 014e 7868     		ldr	r0, [r7, #4]
 3185 0150 FFF7FEFF 		bl	UART_EndRxTransfer
1692:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1693:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /* Disable the UART DMA Rx request if enabled */
1694:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 3186              		.loc 1 1694 0
 3187 0154 7B68     		ldr	r3, [r7, #4]
 3188 0156 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cca0gMDq.s 			page 86


 3189 0158 9B68     		ldr	r3, [r3, #8]
 3190 015a 03F04003 		and	r3, r3, #64
 3191 015e 002B     		cmp	r3, #0
 3192 0160 23D0     		beq	.L169
1695:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         {
1696:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 3193              		.loc 1 1696 0
 3194 0162 7B68     		ldr	r3, [r7, #4]
 3195 0164 1B68     		ldr	r3, [r3]
 3196 0166 7A68     		ldr	r2, [r7, #4]
 3197 0168 1268     		ldr	r2, [r2]
 3198 016a 9268     		ldr	r2, [r2, #8]
 3199 016c 22F04002 		bic	r2, r2, #64
 3200 0170 9A60     		str	r2, [r3, #8]
1697:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1698:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           /* Abort the UART DMA Rx channel */
1699:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           if(huart->hdmarx != NULL)
 3201              		.loc 1 1699 0
 3202 0172 7B68     		ldr	r3, [r7, #4]
 3203 0174 5B6E     		ldr	r3, [r3, #100]
 3204 0176 002B     		cmp	r3, #0
 3205 0178 13D0     		beq	.L170
1700:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           {
1701:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             /* Set the UART DMA Abort callback : 
1702:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****                will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
1703:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 3206              		.loc 1 1703 0
 3207 017a 7B68     		ldr	r3, [r7, #4]
 3208 017c 5B6E     		ldr	r3, [r3, #100]
 3209 017e 2E4A     		ldr	r2, .L176
 3210 0180 5A63     		str	r2, [r3, #52]
1704:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1705:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             /* Abort DMA RX */
1706:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 3211              		.loc 1 1706 0
 3212 0182 7B68     		ldr	r3, [r7, #4]
 3213 0184 5B6E     		ldr	r3, [r3, #100]
 3214 0186 1846     		mov	r0, r3
 3215 0188 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3216 018c 0346     		mov	r3, r0
 3217 018e 002B     		cmp	r3, #0
 3218 0190 0FD0     		beq	.L173
1707:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             {
1708:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****               /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
1709:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****               huart->hdmarx->XferAbortCallback(huart->hdmarx);
 3219              		.loc 1 1709 0
 3220 0192 7B68     		ldr	r3, [r7, #4]
 3221 0194 5B6E     		ldr	r3, [r3, #100]
 3222 0196 5B6B     		ldr	r3, [r3, #52]
 3223 0198 7A68     		ldr	r2, [r7, #4]
 3224 019a 526E     		ldr	r2, [r2, #100]
 3225 019c 1046     		mov	r0, r2
 3226 019e 9847     		blx	r3
 3227 01a0 07E0     		b	.L173
 3228              	.L170:
1710:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             }
1711:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           }
ARM GAS  /tmp/cca0gMDq.s 			page 87


1712:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           else
1713:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           {
1714:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             /* Call user error callback */
1715:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             HAL_UART_ErrorCallback(huart);
 3229              		.loc 1 1715 0
 3230 01a2 7868     		ldr	r0, [r7, #4]
 3231 01a4 FFF7FEFF 		bl	HAL_UART_ErrorCallback
1694:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         {
 3232              		.loc 1 1694 0
 3233 01a8 0BE0     		b	.L165
 3234              	.L169:
1716:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           }
1717:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         }
1718:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         else
1719:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         {
1720:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           /* Call user error callback */
1721:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****           HAL_UART_ErrorCallback(huart);
 3235              		.loc 1 1721 0
 3236 01aa 7868     		ldr	r0, [r7, #4]
 3237 01ac FFF7FEFF 		bl	HAL_UART_ErrorCallback
1694:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         {
 3238              		.loc 1 1694 0
 3239 01b0 07E0     		b	.L165
 3240              	.L173:
1694:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         {
 3241              		.loc 1 1694 0 is_stmt 0 discriminator 2
 3242 01b2 06E0     		b	.L165
 3243              	.L168:
1722:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         }
1723:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1724:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       else
1725:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
1726:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /* Non Blocking error : transfer could go on. 
1727:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            Error is notified to user through user error callback */
1728:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         HAL_UART_ErrorCallback(huart);
 3244              		.loc 1 1728 0 is_stmt 1
 3245 01b4 7868     		ldr	r0, [r7, #4]
 3246 01b6 FFF7FEFF 		bl	HAL_UART_ErrorCallback
1729:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_NONE;
 3247              		.loc 1 1729 0
 3248 01ba 7B68     		ldr	r3, [r7, #4]
 3249 01bc 0022     		movs	r2, #0
 3250 01be DA66     		str	r2, [r3, #108]
1730:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
1731:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
1732:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return;
 3251              		.loc 1 1732 0
 3252 01c0 37E0     		b	.L155
 3253              	.L165:
 3254              		.loc 1 1732 0 is_stmt 0 discriminator 3
 3255 01c2 36E0     		b	.L155
 3256              	.L158:
1733:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1734:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   } /* End if some error occurs */
1735:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1736:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
1737:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
ARM GAS  /tmp/cca0gMDq.s 			page 88


 3257              		.loc 1 1737 0 is_stmt 1
 3258 01c4 7B69     		ldr	r3, [r7, #20]
 3259 01c6 03F48013 		and	r3, r3, #1048576
 3260 01ca 002B     		cmp	r3, #0
 3261 01cc 15D0     		beq	.L174
 3262              		.loc 1 1737 0 is_stmt 0 discriminator 1
 3263 01ce BB68     		ldr	r3, [r7, #8]
 3264 01d0 03F48003 		and	r3, r3, #4194304
 3265 01d4 002B     		cmp	r3, #0
 3266 01d6 10D0     		beq	.L174
1738:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1739:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 3267              		.loc 1 1739 0 is_stmt 1
 3268 01d8 7B68     		ldr	r3, [r7, #4]
 3269 01da 1B68     		ldr	r3, [r3]
 3270 01dc 4FF48012 		mov	r2, #1048576
 3271 01e0 1A62     		str	r2, [r3, #32]
1740:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Set the UART state ready to be able to start again the process */
1741:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->gState  = HAL_UART_STATE_READY;
 3272              		.loc 1 1741 0
 3273 01e2 7B68     		ldr	r3, [r7, #4]
 3274 01e4 2022     		movs	r2, #32
 3275 01e6 83F86920 		strb	r2, [r3, #105]
1742:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 3276              		.loc 1 1742 0
 3277 01ea 7B68     		ldr	r3, [r7, #4]
 3278 01ec 2022     		movs	r2, #32
 3279 01ee 83F86A20 		strb	r2, [r3, #106]
1743:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     HAL_UARTEx_WakeupCallback(huart);
 3280              		.loc 1 1743 0
 3281 01f2 7868     		ldr	r0, [r7, #4]
 3282 01f4 FFF7FEFF 		bl	HAL_UARTEx_WakeupCallback
1744:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return;
 3283              		.loc 1 1744 0
 3284 01f8 1BE0     		b	.L155
 3285              	.L174:
1745:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1746:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1747:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* UART in mode Transmitter ------------------------------------------------*/
1748:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 3286              		.loc 1 1748 0
 3287 01fa 7B69     		ldr	r3, [r7, #20]
 3288 01fc 03F08003 		and	r3, r3, #128
 3289 0200 002B     		cmp	r3, #0
 3290 0202 08D0     		beq	.L175
 3291              		.loc 1 1748 0 is_stmt 0 discriminator 1
 3292 0204 3B69     		ldr	r3, [r7, #16]
 3293 0206 03F08003 		and	r3, r3, #128
 3294 020a 002B     		cmp	r3, #0
 3295 020c 03D0     		beq	.L175
1749:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1750:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_Transmit_IT(huart);
 3296              		.loc 1 1750 0 is_stmt 1
 3297 020e 7868     		ldr	r0, [r7, #4]
 3298 0210 FFF7FEFF 		bl	UART_Transmit_IT
1751:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return;
 3299              		.loc 1 1751 0
ARM GAS  /tmp/cca0gMDq.s 			page 89


 3300 0214 0DE0     		b	.L155
 3301              	.L175:
1752:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1753:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1754:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* UART in mode Transmitter (transmission end) -----------------------------*/
1755:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 3302              		.loc 1 1755 0
 3303 0216 7B69     		ldr	r3, [r7, #20]
 3304 0218 03F04003 		and	r3, r3, #64
 3305 021c 002B     		cmp	r3, #0
 3306 021e 08D0     		beq	.L155
 3307              		.loc 1 1755 0 is_stmt 0 discriminator 1
 3308 0220 3B69     		ldr	r3, [r7, #16]
 3309 0222 03F04003 		and	r3, r3, #64
 3310 0226 002B     		cmp	r3, #0
 3311 0228 03D0     		beq	.L155
1756:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
1757:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_EndTransmit_IT(huart);
 3312              		.loc 1 1757 0 is_stmt 1
 3313 022a 7868     		ldr	r0, [r7, #4]
 3314 022c FFF7FEFF 		bl	UART_EndTransmit_IT
1758:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return;
 3315              		.loc 1 1758 0
 3316 0230 00BF     		nop
 3317              	.L155:
1759:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
1760:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1761:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 3318              		.loc 1 1761 0
 3319 0232 1837     		adds	r7, r7, #24
 3320              	.LCFI119:
 3321              		.cfi_def_cfa_offset 8
 3322 0234 BD46     		mov	sp, r7
 3323              	.LCFI120:
 3324              		.cfi_def_cfa_register 13
 3325              		@ sp needed
 3326 0236 80BD     		pop	{r7, pc}
 3327              	.L177:
 3328              		.align	2
 3329              	.L176:
 3330 0238 00000000 		.word	UART_DMAAbortOnError
 3331              		.cfi_endproc
 3332              	.LFE145:
 3334              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 3335              		.align	2
 3336              		.weak	HAL_UART_TxCpltCallback
 3337              		.thumb
 3338              		.thumb_func
 3340              	HAL_UART_TxCpltCallback:
 3341              	.LFB146:
1762:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1763:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1764:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Tx Transfer completed callback.
1765:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
1766:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
1767:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1768:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
ARM GAS  /tmp/cca0gMDq.s 			page 90


1769:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 3342              		.loc 1 1769 0
 3343              		.cfi_startproc
 3344              		@ args = 0, pretend = 0, frame = 8
 3345              		@ frame_needed = 1, uses_anonymous_args = 0
 3346              		@ link register save eliminated.
 3347 0000 80B4     		push	{r7}
 3348              	.LCFI121:
 3349              		.cfi_def_cfa_offset 4
 3350              		.cfi_offset 7, -4
 3351 0002 83B0     		sub	sp, sp, #12
 3352              	.LCFI122:
 3353              		.cfi_def_cfa_offset 16
 3354 0004 00AF     		add	r7, sp, #0
 3355              	.LCFI123:
 3356              		.cfi_def_cfa_register 7
 3357 0006 7860     		str	r0, [r7, #4]
1770:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1771:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UNUSED(huart);
1772:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1773:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1774:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             the HAL_UART_TxCpltCallback can be implemented in the user file.
1775:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    */
1776:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 3358              		.loc 1 1776 0
 3359 0008 0C37     		adds	r7, r7, #12
 3360              	.LCFI124:
 3361              		.cfi_def_cfa_offset 4
 3362 000a BD46     		mov	sp, r7
 3363              	.LCFI125:
 3364              		.cfi_def_cfa_register 13
 3365              		@ sp needed
 3366 000c 5DF8047B 		ldr	r7, [sp], #4
 3367              	.LCFI126:
 3368              		.cfi_restore 7
 3369              		.cfi_def_cfa_offset 0
 3370 0010 7047     		bx	lr
 3371              		.cfi_endproc
 3372              	.LFE146:
 3374 0012 00BF     		.section	.text.HAL_UART_TxHalfCpltCallback,"ax",%progbits
 3375              		.align	2
 3376              		.weak	HAL_UART_TxHalfCpltCallback
 3377              		.thumb
 3378              		.thumb_func
 3380              	HAL_UART_TxHalfCpltCallback:
 3381              	.LFB147:
1777:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1778:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1779:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Tx Half Transfer completed callback.
1780:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
1781:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
1782:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1783:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
1784:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 3382              		.loc 1 1784 0
 3383              		.cfi_startproc
 3384              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/cca0gMDq.s 			page 91


 3385              		@ frame_needed = 1, uses_anonymous_args = 0
 3386              		@ link register save eliminated.
 3387 0000 80B4     		push	{r7}
 3388              	.LCFI127:
 3389              		.cfi_def_cfa_offset 4
 3390              		.cfi_offset 7, -4
 3391 0002 83B0     		sub	sp, sp, #12
 3392              	.LCFI128:
 3393              		.cfi_def_cfa_offset 16
 3394 0004 00AF     		add	r7, sp, #0
 3395              	.LCFI129:
 3396              		.cfi_def_cfa_register 7
 3397 0006 7860     		str	r0, [r7, #4]
1785:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1786:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UNUSED(huart);
1787:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1788:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
1789:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
1790:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    */
1791:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 3398              		.loc 1 1791 0
 3399 0008 0C37     		adds	r7, r7, #12
 3400              	.LCFI130:
 3401              		.cfi_def_cfa_offset 4
 3402 000a BD46     		mov	sp, r7
 3403              	.LCFI131:
 3404              		.cfi_def_cfa_register 13
 3405              		@ sp needed
 3406 000c 5DF8047B 		ldr	r7, [sp], #4
 3407              	.LCFI132:
 3408              		.cfi_restore 7
 3409              		.cfi_def_cfa_offset 0
 3410 0010 7047     		bx	lr
 3411              		.cfi_endproc
 3412              	.LFE147:
 3414 0012 00BF     		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 3415              		.align	2
 3416              		.weak	HAL_UART_RxCpltCallback
 3417              		.thumb
 3418              		.thumb_func
 3420              	HAL_UART_RxCpltCallback:
 3421              	.LFB148:
1792:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1793:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1794:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Rx Transfer completed callback.
1795:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
1796:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
1797:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1798:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** __weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
1799:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 3422              		.loc 1 1799 0
 3423              		.cfi_startproc
 3424              		@ args = 0, pretend = 0, frame = 8
 3425              		@ frame_needed = 1, uses_anonymous_args = 0
 3426              		@ link register save eliminated.
 3427 0000 80B4     		push	{r7}
 3428              	.LCFI133:
ARM GAS  /tmp/cca0gMDq.s 			page 92


 3429              		.cfi_def_cfa_offset 4
 3430              		.cfi_offset 7, -4
 3431 0002 83B0     		sub	sp, sp, #12
 3432              	.LCFI134:
 3433              		.cfi_def_cfa_offset 16
 3434 0004 00AF     		add	r7, sp, #0
 3435              	.LCFI135:
 3436              		.cfi_def_cfa_register 7
 3437 0006 7860     		str	r0, [r7, #4]
1800:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1801:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UNUSED(huart);
1802:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1803:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1804:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             the HAL_UART_RxCpltCallback can be implemented in the user file.
1805:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    */
1806:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 3438              		.loc 1 1806 0
 3439 0008 0C37     		adds	r7, r7, #12
 3440              	.LCFI136:
 3441              		.cfi_def_cfa_offset 4
 3442 000a BD46     		mov	sp, r7
 3443              	.LCFI137:
 3444              		.cfi_def_cfa_register 13
 3445              		@ sp needed
 3446 000c 5DF8047B 		ldr	r7, [sp], #4
 3447              	.LCFI138:
 3448              		.cfi_restore 7
 3449              		.cfi_def_cfa_offset 0
 3450 0010 7047     		bx	lr
 3451              		.cfi_endproc
 3452              	.LFE148:
 3454 0012 00BF     		.section	.text.HAL_UART_RxHalfCpltCallback,"ax",%progbits
 3455              		.align	2
 3456              		.weak	HAL_UART_RxHalfCpltCallback
 3457              		.thumb
 3458              		.thumb_func
 3460              	HAL_UART_RxHalfCpltCallback:
 3461              	.LFB149:
1807:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1808:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1809:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Rx Half Transfer completed callback.
1810:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
1811:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
1812:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1813:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** __weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
1814:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 3462              		.loc 1 1814 0
 3463              		.cfi_startproc
 3464              		@ args = 0, pretend = 0, frame = 8
 3465              		@ frame_needed = 1, uses_anonymous_args = 0
 3466              		@ link register save eliminated.
 3467 0000 80B4     		push	{r7}
 3468              	.LCFI139:
 3469              		.cfi_def_cfa_offset 4
 3470              		.cfi_offset 7, -4
 3471 0002 83B0     		sub	sp, sp, #12
 3472              	.LCFI140:
ARM GAS  /tmp/cca0gMDq.s 			page 93


 3473              		.cfi_def_cfa_offset 16
 3474 0004 00AF     		add	r7, sp, #0
 3475              	.LCFI141:
 3476              		.cfi_def_cfa_register 7
 3477 0006 7860     		str	r0, [r7, #4]
1815:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1816:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UNUSED(huart);
1817:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1818:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
1819:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****            the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
1820:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    */
1821:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 3478              		.loc 1 1821 0
 3479 0008 0C37     		adds	r7, r7, #12
 3480              	.LCFI142:
 3481              		.cfi_def_cfa_offset 4
 3482 000a BD46     		mov	sp, r7
 3483              	.LCFI143:
 3484              		.cfi_def_cfa_register 13
 3485              		@ sp needed
 3486 000c 5DF8047B 		ldr	r7, [sp], #4
 3487              	.LCFI144:
 3488              		.cfi_restore 7
 3489              		.cfi_def_cfa_offset 0
 3490 0010 7047     		bx	lr
 3491              		.cfi_endproc
 3492              	.LFE149:
 3494 0012 00BF     		.section	.text.HAL_UART_ErrorCallback,"ax",%progbits
 3495              		.align	2
 3496              		.weak	HAL_UART_ErrorCallback
 3497              		.thumb
 3498              		.thumb_func
 3500              	HAL_UART_ErrorCallback:
 3501              	.LFB150:
1822:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1823:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1824:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief UART error callback.
1825:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
1826:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
1827:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1828:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
1829:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 3502              		.loc 1 1829 0
 3503              		.cfi_startproc
 3504              		@ args = 0, pretend = 0, frame = 8
 3505              		@ frame_needed = 1, uses_anonymous_args = 0
 3506              		@ link register save eliminated.
 3507 0000 80B4     		push	{r7}
 3508              	.LCFI145:
 3509              		.cfi_def_cfa_offset 4
 3510              		.cfi_offset 7, -4
 3511 0002 83B0     		sub	sp, sp, #12
 3512              	.LCFI146:
 3513              		.cfi_def_cfa_offset 16
 3514 0004 00AF     		add	r7, sp, #0
 3515              	.LCFI147:
 3516              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cca0gMDq.s 			page 94


 3517 0006 7860     		str	r0, [r7, #4]
1830:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1831:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UNUSED(huart);
1832:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1833:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1834:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             the HAL_UART_ErrorCallback can be implemented in the user file.
1835:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    */
1836:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 3518              		.loc 1 1836 0
 3519 0008 0C37     		adds	r7, r7, #12
 3520              	.LCFI148:
 3521              		.cfi_def_cfa_offset 4
 3522 000a BD46     		mov	sp, r7
 3523              	.LCFI149:
 3524              		.cfi_def_cfa_register 13
 3525              		@ sp needed
 3526 000c 5DF8047B 		ldr	r7, [sp], #4
 3527              	.LCFI150:
 3528              		.cfi_restore 7
 3529              		.cfi_def_cfa_offset 0
 3530 0010 7047     		bx	lr
 3531              		.cfi_endproc
 3532              	.LFE150:
 3534 0012 00BF     		.section	.text.HAL_UART_AbortCpltCallback,"ax",%progbits
 3535              		.align	2
 3536              		.weak	HAL_UART_AbortCpltCallback
 3537              		.thumb
 3538              		.thumb_func
 3540              	HAL_UART_AbortCpltCallback:
 3541              	.LFB151:
1837:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1838:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1839:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
1840:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
1841:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
1842:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1843:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** __weak void HAL_UART_AbortCpltCallback (UART_HandleTypeDef *huart)
1844:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 3542              		.loc 1 1844 0
 3543              		.cfi_startproc
 3544              		@ args = 0, pretend = 0, frame = 8
 3545              		@ frame_needed = 1, uses_anonymous_args = 0
 3546              		@ link register save eliminated.
 3547 0000 80B4     		push	{r7}
 3548              	.LCFI151:
 3549              		.cfi_def_cfa_offset 4
 3550              		.cfi_offset 7, -4
 3551 0002 83B0     		sub	sp, sp, #12
 3552              	.LCFI152:
 3553              		.cfi_def_cfa_offset 16
 3554 0004 00AF     		add	r7, sp, #0
 3555              	.LCFI153:
 3556              		.cfi_def_cfa_register 7
 3557 0006 7860     		str	r0, [r7, #4]
1845:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1846:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UNUSED(huart);
1847:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/cca0gMDq.s 			page 95


1848:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1849:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             the HAL_UART_AbortCpltCallback can be implemented in the user file.
1850:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    */
1851:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 3558              		.loc 1 1851 0
 3559 0008 0C37     		adds	r7, r7, #12
 3560              	.LCFI154:
 3561              		.cfi_def_cfa_offset 4
 3562 000a BD46     		mov	sp, r7
 3563              	.LCFI155:
 3564              		.cfi_def_cfa_register 13
 3565              		@ sp needed
 3566 000c 5DF8047B 		ldr	r7, [sp], #4
 3567              	.LCFI156:
 3568              		.cfi_restore 7
 3569              		.cfi_def_cfa_offset 0
 3570 0010 7047     		bx	lr
 3571              		.cfi_endproc
 3572              	.LFE151:
 3574 0012 00BF     		.section	.text.HAL_UART_AbortTransmitCpltCallback,"ax",%progbits
 3575              		.align	2
 3576              		.weak	HAL_UART_AbortTransmitCpltCallback
 3577              		.thumb
 3578              		.thumb_func
 3580              	HAL_UART_AbortTransmitCpltCallback:
 3581              	.LFB152:
1852:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1853:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1854:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
1855:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
1856:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
1857:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1858:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** __weak void HAL_UART_AbortTransmitCpltCallback (UART_HandleTypeDef *huart)
1859:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 3582              		.loc 1 1859 0
 3583              		.cfi_startproc
 3584              		@ args = 0, pretend = 0, frame = 8
 3585              		@ frame_needed = 1, uses_anonymous_args = 0
 3586              		@ link register save eliminated.
 3587 0000 80B4     		push	{r7}
 3588              	.LCFI157:
 3589              		.cfi_def_cfa_offset 4
 3590              		.cfi_offset 7, -4
 3591 0002 83B0     		sub	sp, sp, #12
 3592              	.LCFI158:
 3593              		.cfi_def_cfa_offset 16
 3594 0004 00AF     		add	r7, sp, #0
 3595              	.LCFI159:
 3596              		.cfi_def_cfa_register 7
 3597 0006 7860     		str	r0, [r7, #4]
1860:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1861:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UNUSED(huart);
1862:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1863:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1864:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
1865:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    */
1866:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
ARM GAS  /tmp/cca0gMDq.s 			page 96


 3598              		.loc 1 1866 0
 3599 0008 0C37     		adds	r7, r7, #12
 3600              	.LCFI160:
 3601              		.cfi_def_cfa_offset 4
 3602 000a BD46     		mov	sp, r7
 3603              	.LCFI161:
 3604              		.cfi_def_cfa_register 13
 3605              		@ sp needed
 3606 000c 5DF8047B 		ldr	r7, [sp], #4
 3607              	.LCFI162:
 3608              		.cfi_restore 7
 3609              		.cfi_def_cfa_offset 0
 3610 0010 7047     		bx	lr
 3611              		.cfi_endproc
 3612              	.LFE152:
 3614 0012 00BF     		.section	.text.HAL_UART_AbortReceiveCpltCallback,"ax",%progbits
 3615              		.align	2
 3616              		.weak	HAL_UART_AbortReceiveCpltCallback
 3617              		.thumb
 3618              		.thumb_func
 3620              	HAL_UART_AbortReceiveCpltCallback:
 3621              	.LFB153:
1867:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1868:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1869:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  UART Abort Receive Complete callback.
1870:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
1871:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
1872:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1873:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** __weak void HAL_UART_AbortReceiveCpltCallback (UART_HandleTypeDef *huart)
1874:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 3622              		.loc 1 1874 0
 3623              		.cfi_startproc
 3624              		@ args = 0, pretend = 0, frame = 8
 3625              		@ frame_needed = 1, uses_anonymous_args = 0
 3626              		@ link register save eliminated.
 3627 0000 80B4     		push	{r7}
 3628              	.LCFI163:
 3629              		.cfi_def_cfa_offset 4
 3630              		.cfi_offset 7, -4
 3631 0002 83B0     		sub	sp, sp, #12
 3632              	.LCFI164:
 3633              		.cfi_def_cfa_offset 16
 3634 0004 00AF     		add	r7, sp, #0
 3635              	.LCFI165:
 3636              		.cfi_def_cfa_register 7
 3637 0006 7860     		str	r0, [r7, #4]
1875:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
1876:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UNUSED(huart);
1877:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1878:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1879:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
1880:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    */
1881:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 3638              		.loc 1 1881 0
 3639 0008 0C37     		adds	r7, r7, #12
 3640              	.LCFI166:
 3641              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cca0gMDq.s 			page 97


 3642 000a BD46     		mov	sp, r7
 3643              	.LCFI167:
 3644              		.cfi_def_cfa_register 13
 3645              		@ sp needed
 3646 000c 5DF8047B 		ldr	r7, [sp], #4
 3647              	.LCFI168:
 3648              		.cfi_restore 7
 3649              		.cfi_def_cfa_offset 0
 3650 0010 7047     		bx	lr
 3651              		.cfi_endproc
 3652              	.LFE153:
 3654 0012 00BF     		.section	.text.HAL_MultiProcessor_EnableMuteMode,"ax",%progbits
 3655              		.align	2
 3656              		.global	HAL_MultiProcessor_EnableMuteMode
 3657              		.thumb
 3658              		.thumb_func
 3660              	HAL_MultiProcessor_EnableMuteMode:
 3661              	.LFB154:
1882:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1883:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1884:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @}
1885:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1886:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1887:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group3 Peripheral Control functions
1888:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *  @brief   UART control functions
1889:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *
1890:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** @verbatim
1891:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****  ===============================================================================
1892:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****                       ##### Peripheral Control functions #####
1893:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****  ===============================================================================
1894:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     [..]
1895:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     This subsection provides a set of functions allowing to control the UART.
1896:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      (+) HAL_MultiProcessor_EnableMuteMode() API enables mute mode
1897:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      (+) HAL_MultiProcessor_DisableMuteMode() API disables mute mode
1898:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      (+) HAL_MultiProcessor_EnterMuteMode() API enters mute mode
1899:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      (+) HAL_HalfDuplex_EnableTransmitter() API disables receiver and enables transmitter
1900:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      (+) HAL_HalfDuplex_EnableReceiver() API disables transmitter and enables receiver
1901:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****      (+) HAL_LIN_SendBreak() API transmits the break characters
1902:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** @endverbatim
1903:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @{
1904:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1905:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1906:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1907:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Enable UART in mute mode (does not mean UART enters mute mode;
1908:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * to enter mute mode, HAL_MultiProcessor_EnterMuteMode() API must be called).
1909:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
1910:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1911:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1912:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_EnableMuteMode(UART_HandleTypeDef *huart)
1913:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 3662              		.loc 1 1913 0
 3663              		.cfi_startproc
 3664              		@ args = 0, pretend = 0, frame = 8
 3665              		@ frame_needed = 1, uses_anonymous_args = 0
 3666 0000 80B5     		push	{r7, lr}
 3667              	.LCFI169:
 3668              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cca0gMDq.s 			page 98


 3669              		.cfi_offset 7, -8
 3670              		.cfi_offset 14, -4
 3671 0002 82B0     		sub	sp, sp, #8
 3672              	.LCFI170:
 3673              		.cfi_def_cfa_offset 16
 3674 0004 00AF     		add	r7, sp, #0
 3675              	.LCFI171:
 3676              		.cfi_def_cfa_register 7
 3677 0006 7860     		str	r0, [r7, #4]
1914:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Process Locked */
1915:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_LOCK(huart);
 3678              		.loc 1 1915 0
 3679 0008 7B68     		ldr	r3, [r7, #4]
 3680 000a 93F86830 		ldrb	r3, [r3, #104]	@ zero_extendqisi2
 3681 000e 012B     		cmp	r3, #1
 3682 0010 01D1     		bne	.L187
 3683              		.loc 1 1915 0 is_stmt 0 discriminator 1
 3684 0012 0223     		movs	r3, #2
 3685 0014 17E0     		b	.L188
 3686              	.L187:
 3687              		.loc 1 1915 0 discriminator 2
 3688 0016 7B68     		ldr	r3, [r7, #4]
 3689 0018 0122     		movs	r2, #1
 3690 001a 83F86820 		strb	r2, [r3, #104]
1916:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1917:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3691              		.loc 1 1917 0 is_stmt 1 discriminator 2
 3692 001e 7B68     		ldr	r3, [r7, #4]
 3693 0020 2422     		movs	r2, #36
 3694 0022 83F86920 		strb	r2, [r3, #105]
1918:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1919:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Enable USART mute mode by setting the MME bit in the CR1 register */
1920:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_MME);
 3695              		.loc 1 1920 0 discriminator 2
 3696 0026 7B68     		ldr	r3, [r7, #4]
 3697 0028 1B68     		ldr	r3, [r3]
 3698 002a 7A68     		ldr	r2, [r7, #4]
 3699 002c 1268     		ldr	r2, [r2]
 3700 002e 1268     		ldr	r2, [r2]
 3701 0030 42F40052 		orr	r2, r2, #8192
 3702 0034 1A60     		str	r2, [r3]
1921:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1922:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 3703              		.loc 1 1922 0 discriminator 2
 3704 0036 7B68     		ldr	r3, [r7, #4]
 3705 0038 2022     		movs	r2, #32
 3706 003a 83F86920 		strb	r2, [r3, #105]
1923:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1924:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 3707              		.loc 1 1924 0 discriminator 2
 3708 003e 7868     		ldr	r0, [r7, #4]
 3709 0040 FFF7FEFF 		bl	UART_CheckIdleState
 3710 0044 0346     		mov	r3, r0
 3711              	.L188:
1925:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 3712              		.loc 1 1925 0
 3713 0046 1846     		mov	r0, r3
ARM GAS  /tmp/cca0gMDq.s 			page 99


 3714 0048 0837     		adds	r7, r7, #8
 3715              	.LCFI172:
 3716              		.cfi_def_cfa_offset 8
 3717 004a BD46     		mov	sp, r7
 3718              	.LCFI173:
 3719              		.cfi_def_cfa_register 13
 3720              		@ sp needed
 3721 004c 80BD     		pop	{r7, pc}
 3722              		.cfi_endproc
 3723              	.LFE154:
 3725 004e 00BF     		.section	.text.HAL_MultiProcessor_DisableMuteMode,"ax",%progbits
 3726              		.align	2
 3727              		.global	HAL_MultiProcessor_DisableMuteMode
 3728              		.thumb
 3729              		.thumb_func
 3731              	HAL_MultiProcessor_DisableMuteMode:
 3732              	.LFB155:
1926:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1927:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1928:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Disable UART mute mode (does not mean the UART actually exits mute mode
1929:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         as it may not have been in mute mode at this very moment).
1930:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
1931:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1932:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1933:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_DisableMuteMode(UART_HandleTypeDef *huart)
1934:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 3733              		.loc 1 1934 0
 3734              		.cfi_startproc
 3735              		@ args = 0, pretend = 0, frame = 8
 3736              		@ frame_needed = 1, uses_anonymous_args = 0
 3737 0000 80B5     		push	{r7, lr}
 3738              	.LCFI174:
 3739              		.cfi_def_cfa_offset 8
 3740              		.cfi_offset 7, -8
 3741              		.cfi_offset 14, -4
 3742 0002 82B0     		sub	sp, sp, #8
 3743              	.LCFI175:
 3744              		.cfi_def_cfa_offset 16
 3745 0004 00AF     		add	r7, sp, #0
 3746              	.LCFI176:
 3747              		.cfi_def_cfa_register 7
 3748 0006 7860     		str	r0, [r7, #4]
1935:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Process Locked */
1936:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_LOCK(huart);
 3749              		.loc 1 1936 0
 3750 0008 7B68     		ldr	r3, [r7, #4]
 3751 000a 93F86830 		ldrb	r3, [r3, #104]	@ zero_extendqisi2
 3752 000e 012B     		cmp	r3, #1
 3753 0010 01D1     		bne	.L190
 3754              		.loc 1 1936 0 is_stmt 0 discriminator 1
 3755 0012 0223     		movs	r3, #2
 3756 0014 17E0     		b	.L191
 3757              	.L190:
 3758              		.loc 1 1936 0 discriminator 2
 3759 0016 7B68     		ldr	r3, [r7, #4]
 3760 0018 0122     		movs	r2, #1
 3761 001a 83F86820 		strb	r2, [r3, #104]
ARM GAS  /tmp/cca0gMDq.s 			page 100


1937:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1938:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3762              		.loc 1 1938 0 is_stmt 1 discriminator 2
 3763 001e 7B68     		ldr	r3, [r7, #4]
 3764 0020 2422     		movs	r2, #36
 3765 0022 83F86920 		strb	r2, [r3, #105]
1939:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1940:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    /* Disable USART mute mode by clearing the MME bit in the CR1 register */
1941:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_MME);
 3766              		.loc 1 1941 0 discriminator 2
 3767 0026 7B68     		ldr	r3, [r7, #4]
 3768 0028 1B68     		ldr	r3, [r3]
 3769 002a 7A68     		ldr	r2, [r7, #4]
 3770 002c 1268     		ldr	r2, [r2]
 3771 002e 1268     		ldr	r2, [r2]
 3772 0030 22F40052 		bic	r2, r2, #8192
 3773 0034 1A60     		str	r2, [r3]
1942:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1943:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 3774              		.loc 1 1943 0 discriminator 2
 3775 0036 7B68     		ldr	r3, [r7, #4]
 3776 0038 2022     		movs	r2, #32
 3777 003a 83F86920 		strb	r2, [r3, #105]
1944:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1945:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 3778              		.loc 1 1945 0 discriminator 2
 3779 003e 7868     		ldr	r0, [r7, #4]
 3780 0040 FFF7FEFF 		bl	UART_CheckIdleState
 3781 0044 0346     		mov	r3, r0
 3782              	.L191:
1946:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 3783              		.loc 1 1946 0
 3784 0046 1846     		mov	r0, r3
 3785 0048 0837     		adds	r7, r7, #8
 3786              	.LCFI177:
 3787              		.cfi_def_cfa_offset 8
 3788 004a BD46     		mov	sp, r7
 3789              	.LCFI178:
 3790              		.cfi_def_cfa_register 13
 3791              		@ sp needed
 3792 004c 80BD     		pop	{r7, pc}
 3793              		.cfi_endproc
 3794              	.LFE155:
 3796 004e 00BF     		.section	.text.HAL_MultiProcessor_EnterMuteMode,"ax",%progbits
 3797              		.align	2
 3798              		.global	HAL_MultiProcessor_EnterMuteMode
 3799              		.thumb
 3800              		.thumb_func
 3802              	HAL_MultiProcessor_EnterMuteMode:
 3803              	.LFB156:
1947:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1948:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1949:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Enter UART mute mode (means UART actually enters mute mode).
1950:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note  To exit from mute mode, HAL_MultiProcessor_DisableMuteMode() API must be called.
1951:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
1952:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
1953:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
ARM GAS  /tmp/cca0gMDq.s 			page 101


1954:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** void HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
1955:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 3804              		.loc 1 1955 0
 3805              		.cfi_startproc
 3806              		@ args = 0, pretend = 0, frame = 8
 3807              		@ frame_needed = 1, uses_anonymous_args = 0
 3808              		@ link register save eliminated.
 3809 0000 80B4     		push	{r7}
 3810              	.LCFI179:
 3811              		.cfi_def_cfa_offset 4
 3812              		.cfi_offset 7, -4
 3813 0002 83B0     		sub	sp, sp, #12
 3814              	.LCFI180:
 3815              		.cfi_def_cfa_offset 16
 3816 0004 00AF     		add	r7, sp, #0
 3817              	.LCFI181:
 3818              		.cfi_def_cfa_register 7
 3819 0006 7860     		str	r0, [r7, #4]
1956:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
 3820              		.loc 1 1956 0
 3821 0008 7B68     		ldr	r3, [r7, #4]
 3822 000a 1B68     		ldr	r3, [r3]
 3823 000c 7A68     		ldr	r2, [r7, #4]
 3824 000e 1268     		ldr	r2, [r2]
 3825 0010 9269     		ldr	r2, [r2, #24]
 3826 0012 42F00402 		orr	r2, r2, #4
 3827 0016 9A61     		str	r2, [r3, #24]
1957:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 3828              		.loc 1 1957 0
 3829 0018 0C37     		adds	r7, r7, #12
 3830              	.LCFI182:
 3831              		.cfi_def_cfa_offset 4
 3832 001a BD46     		mov	sp, r7
 3833              	.LCFI183:
 3834              		.cfi_def_cfa_register 13
 3835              		@ sp needed
 3836 001c 5DF8047B 		ldr	r7, [sp], #4
 3837              	.LCFI184:
 3838              		.cfi_restore 7
 3839              		.cfi_def_cfa_offset 0
 3840 0020 7047     		bx	lr
 3841              		.cfi_endproc
 3842              	.LFE156:
 3844 0022 00BF     		.section	.text.HAL_HalfDuplex_EnableTransmitter,"ax",%progbits
 3845              		.align	2
 3846              		.global	HAL_HalfDuplex_EnableTransmitter
 3847              		.thumb
 3848              		.thumb_func
 3850              	HAL_HalfDuplex_EnableTransmitter:
 3851              	.LFB157:
1958:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1959:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1960:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Enable the UART transmitter and disable the UART receiver.
1961:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
1962:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
1963:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1964:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
ARM GAS  /tmp/cca0gMDq.s 			page 102


1965:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 3852              		.loc 1 1965 0
 3853              		.cfi_startproc
 3854              		@ args = 0, pretend = 0, frame = 8
 3855              		@ frame_needed = 1, uses_anonymous_args = 0
 3856              		@ link register save eliminated.
 3857 0000 80B4     		push	{r7}
 3858              	.LCFI185:
 3859              		.cfi_def_cfa_offset 4
 3860              		.cfi_offset 7, -4
 3861 0002 83B0     		sub	sp, sp, #12
 3862              	.LCFI186:
 3863              		.cfi_def_cfa_offset 16
 3864 0004 00AF     		add	r7, sp, #0
 3865              	.LCFI187:
 3866              		.cfi_def_cfa_register 7
 3867 0006 7860     		str	r0, [r7, #4]
1966:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Process Locked */
1967:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_LOCK(huart);
 3868              		.loc 1 1967 0
 3869 0008 7B68     		ldr	r3, [r7, #4]
 3870 000a 93F86830 		ldrb	r3, [r3, #104]	@ zero_extendqisi2
 3871 000e 012B     		cmp	r3, #1
 3872 0010 01D1     		bne	.L194
 3873              		.loc 1 1967 0 is_stmt 0 discriminator 1
 3874 0012 0223     		movs	r3, #2
 3875 0014 20E0     		b	.L195
 3876              	.L194:
 3877              		.loc 1 1967 0 discriminator 2
 3878 0016 7B68     		ldr	r3, [r7, #4]
 3879 0018 0122     		movs	r2, #1
 3880 001a 83F86820 		strb	r2, [r3, #104]
1968:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3881              		.loc 1 1968 0 is_stmt 1 discriminator 2
 3882 001e 7B68     		ldr	r3, [r7, #4]
 3883 0020 2422     		movs	r2, #36
 3884 0022 83F86920 		strb	r2, [r3, #105]
1969:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1970:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Clear TE and RE bits */
1971:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 3885              		.loc 1 1971 0 discriminator 2
 3886 0026 7B68     		ldr	r3, [r7, #4]
 3887 0028 1B68     		ldr	r3, [r3]
 3888 002a 7A68     		ldr	r2, [r7, #4]
 3889 002c 1268     		ldr	r2, [r2]
 3890 002e 1268     		ldr	r2, [r2]
 3891 0030 22F00C02 		bic	r2, r2, #12
 3892 0034 1A60     		str	r2, [r3]
1972:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
1973:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 3893              		.loc 1 1973 0 discriminator 2
 3894 0036 7B68     		ldr	r3, [r7, #4]
 3895 0038 1B68     		ldr	r3, [r3]
 3896 003a 7A68     		ldr	r2, [r7, #4]
 3897 003c 1268     		ldr	r2, [r2]
 3898 003e 1268     		ldr	r2, [r2]
 3899 0040 42F00802 		orr	r2, r2, #8
ARM GAS  /tmp/cca0gMDq.s 			page 103


 3900 0044 1A60     		str	r2, [r3]
1974:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1975:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 3901              		.loc 1 1975 0 discriminator 2
 3902 0046 7B68     		ldr	r3, [r7, #4]
 3903 0048 2022     		movs	r2, #32
 3904 004a 83F86920 		strb	r2, [r3, #105]
1976:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1977:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Process Unlocked */
1978:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 3905              		.loc 1 1978 0 discriminator 2
 3906 004e 7B68     		ldr	r3, [r7, #4]
 3907 0050 0022     		movs	r2, #0
 3908 0052 83F86820 		strb	r2, [r3, #104]
1979:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1980:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 3909              		.loc 1 1980 0 discriminator 2
 3910 0056 0023     		movs	r3, #0
 3911              	.L195:
1981:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 3912              		.loc 1 1981 0
 3913 0058 1846     		mov	r0, r3
 3914 005a 0C37     		adds	r7, r7, #12
 3915              	.LCFI188:
 3916              		.cfi_def_cfa_offset 4
 3917 005c BD46     		mov	sp, r7
 3918              	.LCFI189:
 3919              		.cfi_def_cfa_register 13
 3920              		@ sp needed
 3921 005e 5DF8047B 		ldr	r7, [sp], #4
 3922              	.LCFI190:
 3923              		.cfi_restore 7
 3924              		.cfi_def_cfa_offset 0
 3925 0062 7047     		bx	lr
 3926              		.cfi_endproc
 3927              	.LFE157:
 3929              		.section	.text.HAL_HalfDuplex_EnableReceiver,"ax",%progbits
 3930              		.align	2
 3931              		.global	HAL_HalfDuplex_EnableReceiver
 3932              		.thumb
 3933              		.thumb_func
 3935              	HAL_HalfDuplex_EnableReceiver:
 3936              	.LFB158:
1982:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1983:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
1984:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Enable the UART receiver and disable the UART transmitter.
1985:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
1986:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status.
1987:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
1988:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
1989:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 3937              		.loc 1 1989 0
 3938              		.cfi_startproc
 3939              		@ args = 0, pretend = 0, frame = 8
 3940              		@ frame_needed = 1, uses_anonymous_args = 0
 3941              		@ link register save eliminated.
 3942 0000 80B4     		push	{r7}
ARM GAS  /tmp/cca0gMDq.s 			page 104


 3943              	.LCFI191:
 3944              		.cfi_def_cfa_offset 4
 3945              		.cfi_offset 7, -4
 3946 0002 83B0     		sub	sp, sp, #12
 3947              	.LCFI192:
 3948              		.cfi_def_cfa_offset 16
 3949 0004 00AF     		add	r7, sp, #0
 3950              	.LCFI193:
 3951              		.cfi_def_cfa_register 7
 3952 0006 7860     		str	r0, [r7, #4]
1990:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Process Locked */
1991:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_LOCK(huart);
 3953              		.loc 1 1991 0
 3954 0008 7B68     		ldr	r3, [r7, #4]
 3955 000a 93F86830 		ldrb	r3, [r3, #104]	@ zero_extendqisi2
 3956 000e 012B     		cmp	r3, #1
 3957 0010 01D1     		bne	.L197
 3958              		.loc 1 1991 0 is_stmt 0 discriminator 1
 3959 0012 0223     		movs	r3, #2
 3960 0014 20E0     		b	.L198
 3961              	.L197:
 3962              		.loc 1 1991 0 discriminator 2
 3963 0016 7B68     		ldr	r3, [r7, #4]
 3964 0018 0122     		movs	r2, #1
 3965 001a 83F86820 		strb	r2, [r3, #104]
1992:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3966              		.loc 1 1992 0 is_stmt 1 discriminator 2
 3967 001e 7B68     		ldr	r3, [r7, #4]
 3968 0020 2422     		movs	r2, #36
 3969 0022 83F86920 		strb	r2, [r3, #105]
1993:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1994:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Clear TE and RE bits */
1995:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 3970              		.loc 1 1995 0 discriminator 2
 3971 0026 7B68     		ldr	r3, [r7, #4]
 3972 0028 1B68     		ldr	r3, [r3]
 3973 002a 7A68     		ldr	r2, [r7, #4]
 3974 002c 1268     		ldr	r2, [r2]
 3975 002e 1268     		ldr	r2, [r2]
 3976 0030 22F00C02 		bic	r2, r2, #12
 3977 0034 1A60     		str	r2, [r3]
1996:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
1997:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 3978              		.loc 1 1997 0 discriminator 2
 3979 0036 7B68     		ldr	r3, [r7, #4]
 3980 0038 1B68     		ldr	r3, [r3]
 3981 003a 7A68     		ldr	r2, [r7, #4]
 3982 003c 1268     		ldr	r2, [r2]
 3983 003e 1268     		ldr	r2, [r2]
 3984 0040 42F00402 		orr	r2, r2, #4
 3985 0044 1A60     		str	r2, [r3]
1998:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
1999:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 3986              		.loc 1 1999 0 discriminator 2
 3987 0046 7B68     		ldr	r3, [r7, #4]
 3988 0048 2022     		movs	r2, #32
 3989 004a 83F86920 		strb	r2, [r3, #105]
ARM GAS  /tmp/cca0gMDq.s 			page 105


2000:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Process Unlocked */
2001:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 3990              		.loc 1 2001 0 discriminator 2
 3991 004e 7B68     		ldr	r3, [r7, #4]
 3992 0050 0022     		movs	r2, #0
 3993 0052 83F86820 		strb	r2, [r3, #104]
2002:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2003:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 3994              		.loc 1 2003 0 discriminator 2
 3995 0056 0023     		movs	r3, #0
 3996              	.L198:
2004:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 3997              		.loc 1 2004 0
 3998 0058 1846     		mov	r0, r3
 3999 005a 0C37     		adds	r7, r7, #12
 4000              	.LCFI194:
 4001              		.cfi_def_cfa_offset 4
 4002 005c BD46     		mov	sp, r7
 4003              	.LCFI195:
 4004              		.cfi_def_cfa_register 13
 4005              		@ sp needed
 4006 005e 5DF8047B 		ldr	r7, [sp], #4
 4007              	.LCFI196:
 4008              		.cfi_restore 7
 4009              		.cfi_def_cfa_offset 0
 4010 0062 7047     		bx	lr
 4011              		.cfi_endproc
 4012              	.LFE158:
 4014              		.section	.text.HAL_LIN_SendBreak,"ax",%progbits
 4015              		.align	2
 4016              		.global	HAL_LIN_SendBreak
 4017              		.thumb
 4018              		.thumb_func
 4020              	HAL_LIN_SendBreak:
 4021              	.LFB159:
2005:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2006:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2007:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2008:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Transmit break characters.
2009:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
2010:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
2011:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2012:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
2013:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 4022              		.loc 1 2013 0
 4023              		.cfi_startproc
 4024              		@ args = 0, pretend = 0, frame = 8
 4025              		@ frame_needed = 1, uses_anonymous_args = 0
 4026              		@ link register save eliminated.
 4027 0000 80B4     		push	{r7}
 4028              	.LCFI197:
 4029              		.cfi_def_cfa_offset 4
 4030              		.cfi_offset 7, -4
 4031 0002 83B0     		sub	sp, sp, #12
 4032              	.LCFI198:
 4033              		.cfi_def_cfa_offset 16
 4034 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/cca0gMDq.s 			page 106


 4035              	.LCFI199:
 4036              		.cfi_def_cfa_register 7
 4037 0006 7860     		str	r0, [r7, #4]
2014:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check the parameters */
2015:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
2016:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2017:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Process Locked */
2018:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_LOCK(huart);
 4038              		.loc 1 2018 0
 4039 0008 7B68     		ldr	r3, [r7, #4]
 4040 000a 93F86830 		ldrb	r3, [r3, #104]	@ zero_extendqisi2
 4041 000e 012B     		cmp	r3, #1
 4042 0010 01D1     		bne	.L200
 4043              		.loc 1 2018 0 is_stmt 0 discriminator 1
 4044 0012 0223     		movs	r3, #2
 4045 0014 18E0     		b	.L201
 4046              	.L200:
 4047              		.loc 1 2018 0 discriminator 2
 4048 0016 7B68     		ldr	r3, [r7, #4]
 4049 0018 0122     		movs	r2, #1
 4050 001a 83F86820 		strb	r2, [r3, #104]
2019:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2020:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4051              		.loc 1 2020 0 is_stmt 1 discriminator 2
 4052 001e 7B68     		ldr	r3, [r7, #4]
 4053 0020 2422     		movs	r2, #36
 4054 0022 83F86920 		strb	r2, [r3, #105]
2021:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2022:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Send break characters */
2023:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->Instance->RQR |= UART_SENDBREAK_REQUEST;
 4055              		.loc 1 2023 0 discriminator 2
 4056 0026 7B68     		ldr	r3, [r7, #4]
 4057 0028 1B68     		ldr	r3, [r3]
 4058 002a 7A68     		ldr	r2, [r7, #4]
 4059 002c 1268     		ldr	r2, [r2]
 4060 002e 9269     		ldr	r2, [r2, #24]
 4061 0030 42F00202 		orr	r2, r2, #2
 4062 0034 9A61     		str	r2, [r3, #24]
2024:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2025:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 4063              		.loc 1 2025 0 discriminator 2
 4064 0036 7B68     		ldr	r3, [r7, #4]
 4065 0038 2022     		movs	r2, #32
 4066 003a 83F86920 		strb	r2, [r3, #105]
2026:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2027:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Process Unlocked */
2028:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 4067              		.loc 1 2028 0 discriminator 2
 4068 003e 7B68     		ldr	r3, [r7, #4]
 4069 0040 0022     		movs	r2, #0
 4070 0042 83F86820 		strb	r2, [r3, #104]
2029:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2030:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 4071              		.loc 1 2030 0 discriminator 2
 4072 0046 0023     		movs	r3, #0
 4073              	.L201:
2031:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
ARM GAS  /tmp/cca0gMDq.s 			page 107


 4074              		.loc 1 2031 0
 4075 0048 1846     		mov	r0, r3
 4076 004a 0C37     		adds	r7, r7, #12
 4077              	.LCFI200:
 4078              		.cfi_def_cfa_offset 4
 4079 004c BD46     		mov	sp, r7
 4080              	.LCFI201:
 4081              		.cfi_def_cfa_register 13
 4082              		@ sp needed
 4083 004e 5DF8047B 		ldr	r7, [sp], #4
 4084              	.LCFI202:
 4085              		.cfi_restore 7
 4086              		.cfi_def_cfa_offset 0
 4087 0052 7047     		bx	lr
 4088              		.cfi_endproc
 4089              	.LFE159:
 4091              		.section	.text.HAL_UART_GetState,"ax",%progbits
 4092              		.align	2
 4093              		.global	HAL_UART_GetState
 4094              		.thumb
 4095              		.thumb_func
 4097              	HAL_UART_GetState:
 4098              	.LFB160:
2032:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2033:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2034:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2035:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @}
2036:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2037:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2038:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group4 Peripheral State and Error functions
2039:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****  *  @brief   UART Peripheral State functions
2040:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****  *
2041:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** @verbatim
2042:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   ==============================================================================
2043:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****             ##### Peripheral State and Error functions #####
2044:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   ==============================================================================
2045:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     [..]
2046:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     This subsection provides functions allowing to :
2047:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (+) Return the UART handle state.
2048:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       (+) Return the UART handle error code
2049:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2050:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** @endverbatim
2051:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @{
2052:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2053:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2054:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2055:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Return the UART handle state.
2056:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2057:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *               the configuration information for the specified UART.
2058:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL state
2059:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2060:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
2061:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 4099              		.loc 1 2061 0
 4100              		.cfi_startproc
 4101              		@ args = 0, pretend = 0, frame = 16
 4102              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cca0gMDq.s 			page 108


 4103              		@ link register save eliminated.
 4104 0000 80B4     		push	{r7}
 4105              	.LCFI203:
 4106              		.cfi_def_cfa_offset 4
 4107              		.cfi_offset 7, -4
 4108 0002 85B0     		sub	sp, sp, #20
 4109              	.LCFI204:
 4110              		.cfi_def_cfa_offset 24
 4111 0004 00AF     		add	r7, sp, #0
 4112              	.LCFI205:
 4113              		.cfi_def_cfa_register 7
 4114 0006 7860     		str	r0, [r7, #4]
2062:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint32_t temp1= 0x00U, temp2 = 0x00U;
 4115              		.loc 1 2062 0
 4116 0008 0023     		movs	r3, #0
 4117 000a FB60     		str	r3, [r7, #12]
 4118 000c 0023     		movs	r3, #0
 4119 000e BB60     		str	r3, [r7, #8]
2063:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   temp1 = huart->gState;
 4120              		.loc 1 2063 0
 4121 0010 7B68     		ldr	r3, [r7, #4]
 4122 0012 93F86930 		ldrb	r3, [r3, #105]
 4123 0016 DBB2     		uxtb	r3, r3
 4124 0018 FB60     		str	r3, [r7, #12]
2064:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   temp2 = huart->RxState;
 4125              		.loc 1 2064 0
 4126 001a 7B68     		ldr	r3, [r7, #4]
 4127 001c 93F86A30 		ldrb	r3, [r3, #106]
 4128 0020 DBB2     		uxtb	r3, r3
 4129 0022 BB60     		str	r3, [r7, #8]
2065:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2066:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return (HAL_UART_StateTypeDef)(temp1 | temp2);
 4130              		.loc 1 2066 0
 4131 0024 FB68     		ldr	r3, [r7, #12]
 4132 0026 DAB2     		uxtb	r2, r3
 4133 0028 BB68     		ldr	r3, [r7, #8]
 4134 002a DBB2     		uxtb	r3, r3
 4135 002c 1343     		orrs	r3, r3, r2
 4136 002e DBB2     		uxtb	r3, r3
2067:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 4137              		.loc 1 2067 0
 4138 0030 1846     		mov	r0, r3
 4139 0032 1437     		adds	r7, r7, #20
 4140              	.LCFI206:
 4141              		.cfi_def_cfa_offset 4
 4142 0034 BD46     		mov	sp, r7
 4143              	.LCFI207:
 4144              		.cfi_def_cfa_register 13
 4145              		@ sp needed
 4146 0036 5DF8047B 		ldr	r7, [sp], #4
 4147              	.LCFI208:
 4148              		.cfi_restore 7
 4149              		.cfi_def_cfa_offset 0
 4150 003a 7047     		bx	lr
 4151              		.cfi_endproc
 4152              	.LFE160:
 4154              		.section	.text.HAL_UART_GetError,"ax",%progbits
ARM GAS  /tmp/cca0gMDq.s 			page 109


 4155              		.align	2
 4156              		.global	HAL_UART_GetError
 4157              		.thumb
 4158              		.thumb_func
 4160              	HAL_UART_GetError:
 4161              	.LFB161:
2068:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2069:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2070:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Return the UART handle error code.
2071:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2072:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *               the configuration information for the specified UART.
2073:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval UART Error Code
2074:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2075:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
2076:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 4162              		.loc 1 2076 0
 4163              		.cfi_startproc
 4164              		@ args = 0, pretend = 0, frame = 8
 4165              		@ frame_needed = 1, uses_anonymous_args = 0
 4166              		@ link register save eliminated.
 4167 0000 80B4     		push	{r7}
 4168              	.LCFI209:
 4169              		.cfi_def_cfa_offset 4
 4170              		.cfi_offset 7, -4
 4171 0002 83B0     		sub	sp, sp, #12
 4172              	.LCFI210:
 4173              		.cfi_def_cfa_offset 16
 4174 0004 00AF     		add	r7, sp, #0
 4175              	.LCFI211:
 4176              		.cfi_def_cfa_register 7
 4177 0006 7860     		str	r0, [r7, #4]
2077:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return huart->ErrorCode;
 4178              		.loc 1 2077 0
 4179 0008 7B68     		ldr	r3, [r7, #4]
 4180 000a DB6E     		ldr	r3, [r3, #108]
2078:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 4181              		.loc 1 2078 0
 4182 000c 1846     		mov	r0, r3
 4183 000e 0C37     		adds	r7, r7, #12
 4184              	.LCFI212:
 4185              		.cfi_def_cfa_offset 4
 4186 0010 BD46     		mov	sp, r7
 4187              	.LCFI213:
 4188              		.cfi_def_cfa_register 13
 4189              		@ sp needed
 4190 0012 5DF8047B 		ldr	r7, [sp], #4
 4191              	.LCFI214:
 4192              		.cfi_restore 7
 4193              		.cfi_def_cfa_offset 0
 4194 0016 7047     		bx	lr
 4195              		.cfi_endproc
 4196              	.LFE161:
 4198              		.section	.text.UART_SetConfig,"ax",%progbits
 4199              		.align	2
 4200              		.global	UART_SetConfig
 4201              		.thumb
 4202              		.thumb_func
ARM GAS  /tmp/cca0gMDq.s 			page 110


 4204              	UART_SetConfig:
 4205              	.LFB162:
2079:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2080:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @}
2081:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2082:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2083:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2084:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @}
2085:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2086:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2087:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /** @defgroup UART_Private_Functions UART Private Functions
2088:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @{
2089:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2090:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2091:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2092:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Configure the UART peripheral.
2093:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
2094:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
2095:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2096:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
2097:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 4206              		.loc 1 2097 0
 4207              		.cfi_startproc
 4208              		@ args = 0, pretend = 0, frame = 24
 4209              		@ frame_needed = 1, uses_anonymous_args = 0
 4210 0000 90B5     		push	{r4, r7, lr}
 4211              	.LCFI215:
 4212              		.cfi_def_cfa_offset 12
 4213              		.cfi_offset 4, -12
 4214              		.cfi_offset 7, -8
 4215              		.cfi_offset 14, -4
 4216 0002 87B0     		sub	sp, sp, #28
 4217              	.LCFI216:
 4218              		.cfi_def_cfa_offset 40
 4219 0004 00AF     		add	r7, sp, #0
 4220              	.LCFI217:
 4221              		.cfi_def_cfa_register 7
 4222 0006 7860     		str	r0, [r7, #4]
2098:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint32_t tmpreg                     = 0x00000000U;
 4223              		.loc 1 2098 0
 4224 0008 0023     		movs	r3, #0
 4225 000a FB60     		str	r3, [r7, #12]
2099:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 4226              		.loc 1 2099 0
 4227 000c 1023     		movs	r3, #16
 4228 000e FB75     		strb	r3, [r7, #23]
2100:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint16_t brrtemp                    = 0x0000U;
 4229              		.loc 1 2100 0
 4230 0010 0023     		movs	r3, #0
 4231 0012 7B81     		strh	r3, [r7, #10]	@ movhi
2101:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint16_t usartdiv                   = 0x0000U;
 4232              		.loc 1 2101 0
 4233 0014 0023     		movs	r3, #0
 4234 0016 BB82     		strh	r3, [r7, #20]	@ movhi
2102:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_StatusTypeDef ret               = HAL_OK;
 4235              		.loc 1 2102 0
 4236 0018 0023     		movs	r3, #0
ARM GAS  /tmp/cca0gMDq.s 			page 111


 4237 001a FB74     		strb	r3, [r7, #19]
2103:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2104:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check the parameters */
2105:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
2106:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
2107:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
2108:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
2109:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
2110:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
2111:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
2112:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
2113:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2114:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2115:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2116:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Clear M, PCE, PS, TE, RE and OVER8 bits and configure
2117:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    *  the UART Word Length, Parity, Mode and oversampling:
2118:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    *  set the M bits according to huart->Init.WordLength value
2119:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    *  set PCE and PS bits according to huart->Init.Parity value
2120:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    *  set TE and RE bits according to huart->Init.Mode value
2121:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    *  set OVER8 bit according to huart->Init.OverSampling value */
2122:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.O
 4238              		.loc 1 2122 0
 4239 001c 7B68     		ldr	r3, [r7, #4]
 4240 001e 9A68     		ldr	r2, [r3, #8]
 4241 0020 7B68     		ldr	r3, [r7, #4]
 4242 0022 1B69     		ldr	r3, [r3, #16]
 4243 0024 1A43     		orrs	r2, r2, r3
 4244 0026 7B68     		ldr	r3, [r7, #4]
 4245 0028 5B69     		ldr	r3, [r3, #20]
 4246 002a 1A43     		orrs	r2, r2, r3
 4247 002c 7B68     		ldr	r3, [r7, #4]
 4248 002e DB69     		ldr	r3, [r3, #28]
 4249 0030 1343     		orrs	r3, r3, r2
 4250 0032 FB60     		str	r3, [r7, #12]
2123:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 4251              		.loc 1 2123 0
 4252 0034 7B68     		ldr	r3, [r7, #4]
 4253 0036 1A68     		ldr	r2, [r3]
 4254 0038 7B68     		ldr	r3, [r7, #4]
 4255 003a 1B68     		ldr	r3, [r3]
 4256 003c 1968     		ldr	r1, [r3]
 4257 003e 9D4B     		ldr	r3, .L237
 4258 0040 0B40     		ands	r3, r3, r1
 4259 0042 F968     		ldr	r1, [r7, #12]
 4260 0044 0B43     		orrs	r3, r3, r1
 4261 0046 1360     		str	r3, [r2]
2124:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2125:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
2126:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits according
2127:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    * to huart->Init.StopBits value */
2128:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 4262              		.loc 1 2128 0
 4263 0048 7B68     		ldr	r3, [r7, #4]
 4264 004a 1B68     		ldr	r3, [r3]
 4265 004c 7A68     		ldr	r2, [r7, #4]
 4266 004e 1268     		ldr	r2, [r2]
 4267 0050 5268     		ldr	r2, [r2, #4]
ARM GAS  /tmp/cca0gMDq.s 			page 112


 4268 0052 22F44051 		bic	r1, r2, #12288
 4269 0056 7A68     		ldr	r2, [r7, #4]
 4270 0058 D268     		ldr	r2, [r2, #12]
 4271 005a 0A43     		orrs	r2, r2, r1
 4272 005c 5A60     		str	r2, [r3, #4]
2129:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2130:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
2131:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Configure
2132:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    * - UART HardWare Flow Control: set CTSE and RTSE bits according
2133:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    *   to huart->Init.HwFlowCtl value
2134:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    * - one-bit sampling method versus three samples' majority rule according
2135:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****    *   to huart->Init.OneBitSampling */
2136:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 4273              		.loc 1 2136 0
 4274 005e 7B68     		ldr	r3, [r7, #4]
 4275 0060 9A69     		ldr	r2, [r3, #24]
 4276 0062 7B68     		ldr	r3, [r7, #4]
 4277 0064 1B6A     		ldr	r3, [r3, #32]
 4278 0066 1343     		orrs	r3, r3, r2
 4279 0068 FB60     		str	r3, [r7, #12]
2137:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 4280              		.loc 1 2137 0
 4281 006a 7B68     		ldr	r3, [r7, #4]
 4282 006c 1B68     		ldr	r3, [r3]
 4283 006e 7A68     		ldr	r2, [r7, #4]
 4284 0070 1268     		ldr	r2, [r2]
 4285 0072 9268     		ldr	r2, [r2, #8]
 4286 0074 22F43061 		bic	r1, r2, #2816
 4287 0078 FA68     		ldr	r2, [r7, #12]
 4288 007a 0A43     		orrs	r2, r2, r1
 4289 007c 9A60     		str	r2, [r3, #8]
2138:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2139:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /*-------------------------- USART BRR Configuration -----------------------*/
2140:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UART_GETCLOCKSOURCE(huart, clocksource);
 4290              		.loc 1 2140 0
 4291 007e 7B68     		ldr	r3, [r7, #4]
 4292 0080 1B68     		ldr	r3, [r3]
 4293 0082 8D4A     		ldr	r2, .L237+4
 4294 0084 9342     		cmp	r3, r2
 4295 0086 21D1     		bne	.L207
 4296              		.loc 1 2140 0 is_stmt 0 discriminator 1
 4297 0088 8C4B     		ldr	r3, .L237+8
 4298 008a 1B6B     		ldr	r3, [r3, #48]
 4299 008c 03F00303 		and	r3, r3, #3
 4300 0090 032B     		cmp	r3, #3
 4301 0092 17D8     		bhi	.L208
 4302 0094 01A2     		adr	r2, .L210
 4303 0096 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4304 009a 00BF     		.p2align 2
 4305              	.L210:
 4306 009c AD000000 		.word	.L209+1
 4307 00a0 B9000000 		.word	.L211+1
 4308 00a4 BF000000 		.word	.L212+1
 4309 00a8 B3000000 		.word	.L213+1
 4310              		.p2align 1
 4311              	.L209:
 4312              		.loc 1 2140 0 discriminator 4
ARM GAS  /tmp/cca0gMDq.s 			page 113


 4313 00ac 0023     		movs	r3, #0
 4314 00ae FB75     		strb	r3, [r7, #23]
 4315 00b0 0AE0     		b	.L236
 4316              	.L213:
 4317              		.loc 1 2140 0 discriminator 7
 4318 00b2 0223     		movs	r3, #2
 4319 00b4 FB75     		strb	r3, [r7, #23]
 4320 00b6 07E0     		b	.L236
 4321              	.L211:
 4322              		.loc 1 2140 0 discriminator 5
 4323 00b8 0423     		movs	r3, #4
 4324 00ba FB75     		strb	r3, [r7, #23]
 4325 00bc 04E0     		b	.L236
 4326              	.L212:
 4327              		.loc 1 2140 0 discriminator 6
 4328 00be 0823     		movs	r3, #8
 4329 00c0 FB75     		strb	r3, [r7, #23]
 4330 00c2 01E0     		b	.L236
 4331              	.L208:
 4332              		.loc 1 2140 0 discriminator 3
 4333 00c4 1023     		movs	r3, #16
 4334 00c6 FB75     		strb	r3, [r7, #23]
 4335              	.L236:
 4336              		.loc 1 2140 0
 4337 00c8 00BF     		nop
 4338 00ca 11E0     		b	.L215
 4339              	.L207:
 4340              		.loc 1 2140 0 discriminator 2
 4341 00cc 7B68     		ldr	r3, [r7, #4]
 4342 00ce 1B68     		ldr	r3, [r3]
 4343 00d0 7B4A     		ldr	r2, .L237+12
 4344 00d2 9342     		cmp	r3, r2
 4345 00d4 02D1     		bne	.L216
 4346              		.loc 1 2140 0 discriminator 8
 4347 00d6 0023     		movs	r3, #0
 4348 00d8 FB75     		strb	r3, [r7, #23]
 4349 00da 09E0     		b	.L215
 4350              	.L216:
 4351              		.loc 1 2140 0 discriminator 9
 4352 00dc 7B68     		ldr	r3, [r7, #4]
 4353 00de 1B68     		ldr	r3, [r3]
 4354 00e0 784A     		ldr	r2, .L237+16
 4355 00e2 9342     		cmp	r3, r2
 4356 00e4 02D1     		bne	.L217
 4357              		.loc 1 2140 0 discriminator 10
 4358 00e6 0023     		movs	r3, #0
 4359 00e8 FB75     		strb	r3, [r7, #23]
 4360 00ea 01E0     		b	.L215
 4361              	.L217:
 4362              		.loc 1 2140 0 discriminator 11
 4363 00ec 1023     		movs	r3, #16
 4364 00ee FB75     		strb	r3, [r7, #23]
 4365              	.L215:
2141:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2142:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check UART Over Sampling to set Baud Rate Register */
2143:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 4366              		.loc 1 2143 0 is_stmt 1
ARM GAS  /tmp/cca0gMDq.s 			page 114


 4367 00f0 7B68     		ldr	r3, [r7, #4]
 4368 00f2 DB69     		ldr	r3, [r3, #28]
 4369 00f4 B3F5004F 		cmp	r3, #32768
 4370 00f8 6ED1     		bne	.L218
2144:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2145:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     switch (clocksource)
 4371              		.loc 1 2145 0
 4372 00fa FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4373 00fc 082B     		cmp	r3, #8
 4374 00fe 57D8     		bhi	.L219
 4375 0100 01A2     		adr	r2, .L221
 4376 0102 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4377 0106 00BF     		.p2align 2
 4378              	.L221:
 4379 0108 2D010000 		.word	.L220+1
 4380 010c 49010000 		.word	.L222+1
 4381 0110 65010000 		.word	.L223+1
 4382 0114 B1010000 		.word	.L219+1
 4383 0118 7F010000 		.word	.L224+1
 4384 011c B1010000 		.word	.L219+1
 4385 0120 B1010000 		.word	.L219+1
 4386 0124 B1010000 		.word	.L219+1
 4387 0128 9B010000 		.word	.L225+1
 4388              		.p2align 1
 4389              	.L220:
2146:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2147:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK1:
2148:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 4390              		.loc 1 2148 0
 4391 012c FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 4392 0130 0346     		mov	r3, r0
 4393 0132 5A00     		lsls	r2, r3, #1
 4394 0134 7B68     		ldr	r3, [r7, #4]
 4395 0136 5B68     		ldr	r3, [r3, #4]
 4396 0138 5B08     		lsrs	r3, r3, #1
 4397 013a 1A44     		add	r2, r2, r3
 4398 013c 7B68     		ldr	r3, [r7, #4]
 4399 013e 5B68     		ldr	r3, [r3, #4]
 4400 0140 B2FBF3F3 		udiv	r3, r2, r3
 4401 0144 BB82     		strh	r3, [r7, #20]	@ movhi
2149:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 4402              		.loc 1 2149 0
 4403 0146 36E0     		b	.L226
 4404              	.L222:
2150:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK2:
2151:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 4405              		.loc 1 2151 0
 4406 0148 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 4407 014c 0346     		mov	r3, r0
 4408 014e 5A00     		lsls	r2, r3, #1
 4409 0150 7B68     		ldr	r3, [r7, #4]
 4410 0152 5B68     		ldr	r3, [r3, #4]
 4411 0154 5B08     		lsrs	r3, r3, #1
 4412 0156 1A44     		add	r2, r2, r3
 4413 0158 7B68     		ldr	r3, [r7, #4]
 4414 015a 5B68     		ldr	r3, [r3, #4]
 4415 015c B2FBF3F3 		udiv	r3, r2, r3
ARM GAS  /tmp/cca0gMDq.s 			page 115


 4416 0160 BB82     		strh	r3, [r7, #20]	@ movhi
2152:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 4417              		.loc 1 2152 0
 4418 0162 28E0     		b	.L226
 4419              	.L223:
2153:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
2154:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 4420              		.loc 1 2154 0
 4421 0164 7B68     		ldr	r3, [r7, #4]
 4422 0166 5B68     		ldr	r3, [r3, #4]
 4423 0168 5B08     		lsrs	r3, r3, #1
 4424 016a 03F57403 		add	r3, r3, #15990784
 4425 016e 03F51053 		add	r3, r3, #9216
 4426 0172 7A68     		ldr	r2, [r7, #4]
 4427 0174 5268     		ldr	r2, [r2, #4]
 4428 0176 B3FBF2F3 		udiv	r3, r3, r2
 4429 017a BB82     		strh	r3, [r7, #20]	@ movhi
2155:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 4430              		.loc 1 2155 0
 4431 017c 1BE0     		b	.L226
 4432              	.L224:
2156:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case UART_CLOCKSOURCE_SYSCLK:
2157:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 4433              		.loc 1 2157 0
 4434 017e FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 4435 0182 0346     		mov	r3, r0
 4436 0184 5A00     		lsls	r2, r3, #1
 4437 0186 7B68     		ldr	r3, [r7, #4]
 4438 0188 5B68     		ldr	r3, [r3, #4]
 4439 018a 5B08     		lsrs	r3, r3, #1
 4440 018c 1A44     		add	r2, r2, r3
 4441 018e 7B68     		ldr	r3, [r7, #4]
 4442 0190 5B68     		ldr	r3, [r3, #4]
 4443 0192 B2FBF3F3 		udiv	r3, r2, r3
 4444 0196 BB82     		strh	r3, [r7, #20]	@ movhi
2158:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 4445              		.loc 1 2158 0
 4446 0198 0DE0     		b	.L226
 4447              	.L225:
2159:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
2160:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 4448              		.loc 1 2160 0
 4449 019a 7B68     		ldr	r3, [r7, #4]
 4450 019c 5B68     		ldr	r3, [r3, #4]
 4451 019e 5B08     		lsrs	r3, r3, #1
 4452 01a0 03F58032 		add	r2, r3, #65536
 4453 01a4 7B68     		ldr	r3, [r7, #4]
 4454 01a6 5B68     		ldr	r3, [r3, #4]
 4455 01a8 B2FBF3F3 		udiv	r3, r2, r3
 4456 01ac BB82     		strh	r3, [r7, #20]	@ movhi
2161:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 4457              		.loc 1 2161 0
 4458 01ae 02E0     		b	.L226
 4459              	.L219:
2162:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case UART_CLOCKSOURCE_UNDEFINED:
2163:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       default:
2164:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         ret = HAL_ERROR;
ARM GAS  /tmp/cca0gMDq.s 			page 116


 4460              		.loc 1 2164 0
 4461 01b0 0123     		movs	r3, #1
 4462 01b2 FB74     		strb	r3, [r7, #19]
2165:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 4463              		.loc 1 2165 0
 4464 01b4 00BF     		nop
 4465              	.L226:
2166:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2167:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2168:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     brrtemp = usartdiv & 0xFFF0U;
 4466              		.loc 1 2168 0
 4467 01b6 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 4468 01b8 23F00F03 		bic	r3, r3, #15
 4469 01bc 7B81     		strh	r3, [r7, #10]	@ movhi
2169:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 4470              		.loc 1 2169 0
 4471 01be BB8A     		ldrh	r3, [r7, #20]
 4472 01c0 03F00F03 		and	r3, r3, #15
 4473 01c4 5B10     		asrs	r3, r3, #1
 4474 01c6 9AB2     		uxth	r2, r3
 4475 01c8 7B89     		ldrh	r3, [r7, #10]	@ movhi
 4476 01ca 1343     		orrs	r3, r3, r2
 4477 01cc 7B81     		strh	r3, [r7, #10]	@ movhi
2170:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->Instance->BRR = brrtemp;
 4478              		.loc 1 2170 0
 4479 01ce 7B68     		ldr	r3, [r7, #4]
 4480 01d0 1B68     		ldr	r3, [r3]
 4481 01d2 7A89     		ldrh	r2, [r7, #10]
 4482 01d4 DA60     		str	r2, [r3, #12]
 4483 01d6 68E0     		b	.L227
 4484              	.L218:
2171:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2172:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
2173:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2174:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     switch (clocksource)
 4485              		.loc 1 2174 0
 4486 01d8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4487 01da 082B     		cmp	r3, #8
 4488 01dc 62D8     		bhi	.L228
 4489 01de 01A2     		adr	r2, .L230
 4490 01e0 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4491              		.p2align 2
 4492              	.L230:
 4493 01e4 09020000 		.word	.L229+1
 4494 01e8 29020000 		.word	.L231+1
 4495 01ec 49020000 		.word	.L232+1
 4496 01f0 A5020000 		.word	.L228+1
 4497 01f4 69020000 		.word	.L233+1
 4498 01f8 A5020000 		.word	.L228+1
 4499 01fc A5020000 		.word	.L228+1
 4500 0200 A5020000 		.word	.L228+1
 4501 0204 89020000 		.word	.L234+1
 4502              		.p2align 1
 4503              	.L229:
2175:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2176:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK1:
2177:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.B
ARM GAS  /tmp/cca0gMDq.s 			page 117


 4504              		.loc 1 2177 0
 4505 0208 7B68     		ldr	r3, [r7, #4]
 4506 020a 1C68     		ldr	r4, [r3]
 4507 020c FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 4508 0210 0246     		mov	r2, r0
 4509 0212 7B68     		ldr	r3, [r7, #4]
 4510 0214 5B68     		ldr	r3, [r3, #4]
 4511 0216 5B08     		lsrs	r3, r3, #1
 4512 0218 1A44     		add	r2, r2, r3
 4513 021a 7B68     		ldr	r3, [r7, #4]
 4514 021c 5B68     		ldr	r3, [r3, #4]
 4515 021e B2FBF3F3 		udiv	r3, r2, r3
 4516 0222 9BB2     		uxth	r3, r3
 4517 0224 E360     		str	r3, [r4, #12]
2178:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 4518              		.loc 1 2178 0
 4519 0226 40E0     		b	.L227
 4520              	.L231:
2179:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case UART_CLOCKSOURCE_PCLK2:
2180:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.B
 4521              		.loc 1 2180 0
 4522 0228 7B68     		ldr	r3, [r7, #4]
 4523 022a 1C68     		ldr	r4, [r3]
 4524 022c FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 4525 0230 0246     		mov	r2, r0
 4526 0232 7B68     		ldr	r3, [r7, #4]
 4527 0234 5B68     		ldr	r3, [r3, #4]
 4528 0236 5B08     		lsrs	r3, r3, #1
 4529 0238 1A44     		add	r2, r2, r3
 4530 023a 7B68     		ldr	r3, [r7, #4]
 4531 023c 5B68     		ldr	r3, [r3, #4]
 4532 023e B2FBF3F3 		udiv	r3, r2, r3
 4533 0242 9BB2     		uxth	r3, r3
 4534 0244 E360     		str	r3, [r4, #12]
2181:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 4535              		.loc 1 2181 0
 4536 0246 30E0     		b	.L227
 4537              	.L232:
2182:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
2183:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 4538              		.loc 1 2183 0
 4539 0248 7B68     		ldr	r3, [r7, #4]
 4540 024a 1A68     		ldr	r2, [r3]
 4541 024c 7B68     		ldr	r3, [r7, #4]
 4542 024e 5B68     		ldr	r3, [r3, #4]
 4543 0250 5B08     		lsrs	r3, r3, #1
 4544 0252 03F5F403 		add	r3, r3, #7995392
 4545 0256 03F59053 		add	r3, r3, #4608
 4546 025a 7968     		ldr	r1, [r7, #4]
 4547 025c 4968     		ldr	r1, [r1, #4]
 4548 025e B3FBF1F3 		udiv	r3, r3, r1
 4549 0262 9BB2     		uxth	r3, r3
 4550 0264 D360     		str	r3, [r2, #12]
2184:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 4551              		.loc 1 2184 0
 4552 0266 20E0     		b	.L227
 4553              	.L233:
ARM GAS  /tmp/cca0gMDq.s 			page 118


2185:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case UART_CLOCKSOURCE_SYSCLK:
2186:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Ini
 4554              		.loc 1 2186 0
 4555 0268 7B68     		ldr	r3, [r7, #4]
 4556 026a 1C68     		ldr	r4, [r3]
 4557 026c FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 4558 0270 0246     		mov	r2, r0
 4559 0272 7B68     		ldr	r3, [r7, #4]
 4560 0274 5B68     		ldr	r3, [r3, #4]
 4561 0276 5B08     		lsrs	r3, r3, #1
 4562 0278 1A44     		add	r2, r2, r3
 4563 027a 7B68     		ldr	r3, [r7, #4]
 4564 027c 5B68     		ldr	r3, [r3, #4]
 4565 027e B2FBF3F3 		udiv	r3, r2, r3
 4566 0282 9BB2     		uxth	r3, r3
 4567 0284 E360     		str	r3, [r4, #12]
2187:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 4568              		.loc 1 2187 0
 4569 0286 10E0     		b	.L227
 4570              	.L234:
2188:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
2189:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 4571              		.loc 1 2189 0
 4572 0288 7B68     		ldr	r3, [r7, #4]
 4573 028a 1B68     		ldr	r3, [r3]
 4574 028c 7A68     		ldr	r2, [r7, #4]
 4575 028e 5268     		ldr	r2, [r2, #4]
 4576 0290 5208     		lsrs	r2, r2, #1
 4577 0292 02F50041 		add	r1, r2, #32768
 4578 0296 7A68     		ldr	r2, [r7, #4]
 4579 0298 5268     		ldr	r2, [r2, #4]
 4580 029a B1FBF2F2 		udiv	r2, r1, r2
 4581 029e 92B2     		uxth	r2, r2
 4582 02a0 DA60     		str	r2, [r3, #12]
2190:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 4583              		.loc 1 2190 0
 4584 02a2 02E0     		b	.L227
 4585              	.L228:
2191:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       case UART_CLOCKSOURCE_UNDEFINED:
2192:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       default:
2193:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         ret = HAL_ERROR;
 4586              		.loc 1 2193 0
 4587 02a4 0123     		movs	r3, #1
 4588 02a6 FB74     		strb	r3, [r7, #19]
2194:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         break;
 4589              		.loc 1 2194 0
 4590 02a8 00BF     		nop
 4591              	.L227:
2195:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2196:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2197:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2198:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return ret;
 4592              		.loc 1 2198 0
 4593 02aa FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
2199:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2200:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 4594              		.loc 1 2200 0
ARM GAS  /tmp/cca0gMDq.s 			page 119


 4595 02ac 1846     		mov	r0, r3
 4596 02ae 1C37     		adds	r7, r7, #28
 4597              	.LCFI218:
 4598              		.cfi_def_cfa_offset 12
 4599 02b0 BD46     		mov	sp, r7
 4600              	.LCFI219:
 4601              		.cfi_def_cfa_register 13
 4602              		@ sp needed
 4603 02b2 90BD     		pop	{r4, r7, pc}
 4604              	.L238:
 4605              		.align	2
 4606              	.L237:
 4607 02b4 F369FFEF 		.word	-268473869
 4608 02b8 00380140 		.word	1073821696
 4609 02bc 00100240 		.word	1073876992
 4610 02c0 00440040 		.word	1073759232
 4611 02c4 00480040 		.word	1073760256
 4612              		.cfi_endproc
 4613              	.LFE162:
 4615              		.section	.text.UART_AdvFeatureConfig,"ax",%progbits
 4616              		.align	2
 4617              		.global	UART_AdvFeatureConfig
 4618              		.thumb
 4619              		.thumb_func
 4621              	UART_AdvFeatureConfig:
 4622              	.LFB163:
2201:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2202:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2203:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Configure the UART peripheral advanced features.
2204:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
2205:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2206:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2207:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
2208:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 4623              		.loc 1 2208 0
 4624              		.cfi_startproc
 4625              		@ args = 0, pretend = 0, frame = 8
 4626              		@ frame_needed = 1, uses_anonymous_args = 0
 4627              		@ link register save eliminated.
 4628 0000 80B4     		push	{r7}
 4629              	.LCFI220:
 4630              		.cfi_def_cfa_offset 4
 4631              		.cfi_offset 7, -4
 4632 0002 83B0     		sub	sp, sp, #12
 4633              	.LCFI221:
 4634              		.cfi_def_cfa_offset 16
 4635 0004 00AF     		add	r7, sp, #0
 4636              	.LCFI222:
 4637              		.cfi_def_cfa_register 7
 4638 0006 7860     		str	r0, [r7, #4]
2209:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check whether the set of advanced features to configure is properly set */
2210:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
2211:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2212:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* if required, configure TX pin active level inversion */
2213:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 4639              		.loc 1 2213 0
 4640 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cca0gMDq.s 			page 120


 4641 000a 5B6A     		ldr	r3, [r3, #36]
 4642 000c 03F00103 		and	r3, r3, #1
 4643 0010 002B     		cmp	r3, #0
 4644 0012 0AD0     		beq	.L240
2214:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2215:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
2216:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 4645              		.loc 1 2216 0
 4646 0014 7B68     		ldr	r3, [r7, #4]
 4647 0016 1B68     		ldr	r3, [r3]
 4648 0018 7A68     		ldr	r2, [r7, #4]
 4649 001a 1268     		ldr	r2, [r2]
 4650 001c 5268     		ldr	r2, [r2, #4]
 4651 001e 22F40031 		bic	r1, r2, #131072
 4652 0022 7A68     		ldr	r2, [r7, #4]
 4653 0024 926A     		ldr	r2, [r2, #40]
 4654 0026 0A43     		orrs	r2, r2, r1
 4655 0028 5A60     		str	r2, [r3, #4]
 4656              	.L240:
2217:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2218:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2219:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* if required, configure RX pin active level inversion */
2220:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 4657              		.loc 1 2220 0
 4658 002a 7B68     		ldr	r3, [r7, #4]
 4659 002c 5B6A     		ldr	r3, [r3, #36]
 4660 002e 03F00203 		and	r3, r3, #2
 4661 0032 002B     		cmp	r3, #0
 4662 0034 0AD0     		beq	.L241
2221:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2222:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
2223:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 4663              		.loc 1 2223 0
 4664 0036 7B68     		ldr	r3, [r7, #4]
 4665 0038 1B68     		ldr	r3, [r3]
 4666 003a 7A68     		ldr	r2, [r7, #4]
 4667 003c 1268     		ldr	r2, [r2]
 4668 003e 5268     		ldr	r2, [r2, #4]
 4669 0040 22F48031 		bic	r1, r2, #65536
 4670 0044 7A68     		ldr	r2, [r7, #4]
 4671 0046 D26A     		ldr	r2, [r2, #44]
 4672 0048 0A43     		orrs	r2, r2, r1
 4673 004a 5A60     		str	r2, [r3, #4]
 4674              	.L241:
2224:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2225:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2226:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* if required, configure data inversion */
2227:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 4675              		.loc 1 2227 0
 4676 004c 7B68     		ldr	r3, [r7, #4]
 4677 004e 5B6A     		ldr	r3, [r3, #36]
 4678 0050 03F00403 		and	r3, r3, #4
 4679 0054 002B     		cmp	r3, #0
 4680 0056 0AD0     		beq	.L242
2228:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2229:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
2230:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
ARM GAS  /tmp/cca0gMDq.s 			page 121


 4681              		.loc 1 2230 0
 4682 0058 7B68     		ldr	r3, [r7, #4]
 4683 005a 1B68     		ldr	r3, [r3]
 4684 005c 7A68     		ldr	r2, [r7, #4]
 4685 005e 1268     		ldr	r2, [r2]
 4686 0060 5268     		ldr	r2, [r2, #4]
 4687 0062 22F48021 		bic	r1, r2, #262144
 4688 0066 7A68     		ldr	r2, [r7, #4]
 4689 0068 126B     		ldr	r2, [r2, #48]
 4690 006a 0A43     		orrs	r2, r2, r1
 4691 006c 5A60     		str	r2, [r3, #4]
 4692              	.L242:
2231:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2232:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2233:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* if required, configure RX/TX pins swap */
2234:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 4693              		.loc 1 2234 0
 4694 006e 7B68     		ldr	r3, [r7, #4]
 4695 0070 5B6A     		ldr	r3, [r3, #36]
 4696 0072 03F00803 		and	r3, r3, #8
 4697 0076 002B     		cmp	r3, #0
 4698 0078 0AD0     		beq	.L243
2235:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2236:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
2237:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 4699              		.loc 1 2237 0
 4700 007a 7B68     		ldr	r3, [r7, #4]
 4701 007c 1B68     		ldr	r3, [r3]
 4702 007e 7A68     		ldr	r2, [r7, #4]
 4703 0080 1268     		ldr	r2, [r2]
 4704 0082 5268     		ldr	r2, [r2, #4]
 4705 0084 22F40041 		bic	r1, r2, #32768
 4706 0088 7A68     		ldr	r2, [r7, #4]
 4707 008a 526B     		ldr	r2, [r2, #52]
 4708 008c 0A43     		orrs	r2, r2, r1
 4709 008e 5A60     		str	r2, [r3, #4]
 4710              	.L243:
2238:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2239:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2240:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* if required, configure RX overrun detection disabling */
2241:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 4711              		.loc 1 2241 0
 4712 0090 7B68     		ldr	r3, [r7, #4]
 4713 0092 5B6A     		ldr	r3, [r3, #36]
 4714 0094 03F01003 		and	r3, r3, #16
 4715 0098 002B     		cmp	r3, #0
 4716 009a 0AD0     		beq	.L244
2242:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2243:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
2244:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 4717              		.loc 1 2244 0
 4718 009c 7B68     		ldr	r3, [r7, #4]
 4719 009e 1B68     		ldr	r3, [r3]
 4720 00a0 7A68     		ldr	r2, [r7, #4]
 4721 00a2 1268     		ldr	r2, [r2]
 4722 00a4 9268     		ldr	r2, [r2, #8]
 4723 00a6 22F48051 		bic	r1, r2, #4096
ARM GAS  /tmp/cca0gMDq.s 			page 122


 4724 00aa 7A68     		ldr	r2, [r7, #4]
 4725 00ac 926B     		ldr	r2, [r2, #56]
 4726 00ae 0A43     		orrs	r2, r2, r1
 4727 00b0 9A60     		str	r2, [r3, #8]
 4728              	.L244:
2245:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2246:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2247:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* if required, configure DMA disabling on reception error */
2248:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 4729              		.loc 1 2248 0
 4730 00b2 7B68     		ldr	r3, [r7, #4]
 4731 00b4 5B6A     		ldr	r3, [r3, #36]
 4732 00b6 03F02003 		and	r3, r3, #32
 4733 00ba 002B     		cmp	r3, #0
 4734 00bc 0AD0     		beq	.L245
2249:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2250:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
2251:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 4735              		.loc 1 2251 0
 4736 00be 7B68     		ldr	r3, [r7, #4]
 4737 00c0 1B68     		ldr	r3, [r3]
 4738 00c2 7A68     		ldr	r2, [r7, #4]
 4739 00c4 1268     		ldr	r2, [r2]
 4740 00c6 9268     		ldr	r2, [r2, #8]
 4741 00c8 22F40051 		bic	r1, r2, #8192
 4742 00cc 7A68     		ldr	r2, [r7, #4]
 4743 00ce D26B     		ldr	r2, [r2, #60]
 4744 00d0 0A43     		orrs	r2, r2, r1
 4745 00d2 9A60     		str	r2, [r3, #8]
 4746              	.L245:
2252:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2253:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2254:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* if required, configure auto Baud rate detection scheme */
2255:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 4747              		.loc 1 2255 0
 4748 00d4 7B68     		ldr	r3, [r7, #4]
 4749 00d6 5B6A     		ldr	r3, [r3, #36]
 4750 00d8 03F04003 		and	r3, r3, #64
 4751 00dc 002B     		cmp	r3, #0
 4752 00de 1AD0     		beq	.L246
2256:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2257:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
2258:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
2259:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 4753              		.loc 1 2259 0
 4754 00e0 7B68     		ldr	r3, [r7, #4]
 4755 00e2 1B68     		ldr	r3, [r3]
 4756 00e4 7A68     		ldr	r2, [r7, #4]
 4757 00e6 1268     		ldr	r2, [r2]
 4758 00e8 5268     		ldr	r2, [r2, #4]
 4759 00ea 22F48011 		bic	r1, r2, #1048576
 4760 00ee 7A68     		ldr	r2, [r7, #4]
 4761 00f0 126C     		ldr	r2, [r2, #64]
 4762 00f2 0A43     		orrs	r2, r2, r1
 4763 00f4 5A60     		str	r2, [r3, #4]
2260:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* set auto Baudrate detection parameters if detection is enabled */
2261:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
ARM GAS  /tmp/cca0gMDq.s 			page 123


 4764              		.loc 1 2261 0
 4765 00f6 7B68     		ldr	r3, [r7, #4]
 4766 00f8 1B6C     		ldr	r3, [r3, #64]
 4767 00fa B3F5801F 		cmp	r3, #1048576
 4768 00fe 0AD1     		bne	.L246
2262:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2263:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
2264:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 4769              		.loc 1 2264 0
 4770 0100 7B68     		ldr	r3, [r7, #4]
 4771 0102 1B68     		ldr	r3, [r3]
 4772 0104 7A68     		ldr	r2, [r7, #4]
 4773 0106 1268     		ldr	r2, [r2]
 4774 0108 5268     		ldr	r2, [r2, #4]
 4775 010a 22F4C001 		bic	r1, r2, #6291456
 4776 010e 7A68     		ldr	r2, [r7, #4]
 4777 0110 526C     		ldr	r2, [r2, #68]
 4778 0112 0A43     		orrs	r2, r2, r1
 4779 0114 5A60     		str	r2, [r3, #4]
 4780              	.L246:
2265:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2266:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2267:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2268:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* if required, configure MSB first on communication line */
2269:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 4781              		.loc 1 2269 0
 4782 0116 7B68     		ldr	r3, [r7, #4]
 4783 0118 5B6A     		ldr	r3, [r3, #36]
 4784 011a 03F08003 		and	r3, r3, #128
 4785 011e 002B     		cmp	r3, #0
 4786 0120 0AD0     		beq	.L239
2270:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2271:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
2272:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 4787              		.loc 1 2272 0
 4788 0122 7B68     		ldr	r3, [r7, #4]
 4789 0124 1B68     		ldr	r3, [r3]
 4790 0126 7A68     		ldr	r2, [r7, #4]
 4791 0128 1268     		ldr	r2, [r2]
 4792 012a 5268     		ldr	r2, [r2, #4]
 4793 012c 22F40021 		bic	r1, r2, #524288
 4794 0130 7A68     		ldr	r2, [r7, #4]
 4795 0132 926C     		ldr	r2, [r2, #72]
 4796 0134 0A43     		orrs	r2, r2, r1
 4797 0136 5A60     		str	r2, [r3, #4]
 4798              	.L239:
2273:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2274:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 4799              		.loc 1 2274 0
 4800 0138 0C37     		adds	r7, r7, #12
 4801              	.LCFI223:
 4802              		.cfi_def_cfa_offset 4
 4803 013a BD46     		mov	sp, r7
 4804              	.LCFI224:
 4805              		.cfi_def_cfa_register 13
 4806              		@ sp needed
 4807 013c 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/cca0gMDq.s 			page 124


 4808              	.LCFI225:
 4809              		.cfi_restore 7
 4810              		.cfi_def_cfa_offset 0
 4811 0140 7047     		bx	lr
 4812              		.cfi_endproc
 4813              	.LFE163:
 4815 0142 00BF     		.section	.text.UART_CheckIdleState,"ax",%progbits
 4816              		.align	2
 4817              		.global	UART_CheckIdleState
 4818              		.thumb
 4819              		.thumb_func
 4821              	UART_CheckIdleState:
 4822              	.LFB164:
2275:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2276:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2277:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Check the UART Idle State.
2278:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
2279:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
2280:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2281:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
2282:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 4823              		.loc 1 2282 0
 4824              		.cfi_startproc
 4825              		@ args = 0, pretend = 0, frame = 16
 4826              		@ frame_needed = 1, uses_anonymous_args = 0
 4827 0000 80B5     		push	{r7, lr}
 4828              	.LCFI226:
 4829              		.cfi_def_cfa_offset 8
 4830              		.cfi_offset 7, -8
 4831              		.cfi_offset 14, -4
 4832 0002 86B0     		sub	sp, sp, #24
 4833              	.LCFI227:
 4834              		.cfi_def_cfa_offset 32
 4835 0004 02AF     		add	r7, sp, #8
 4836              	.LCFI228:
 4837              		.cfi_def_cfa 7, 24
 4838 0006 7860     		str	r0, [r7, #4]
2283:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint32_t tickstart = 0U;
 4839              		.loc 1 2283 0
 4840 0008 0023     		movs	r3, #0
 4841 000a FB60     		str	r3, [r7, #12]
2284:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2285:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Initialize the UART ErrorCode */
2286:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 4842              		.loc 1 2286 0
 4843 000c 7B68     		ldr	r3, [r7, #4]
 4844 000e 0022     		movs	r2, #0
 4845 0010 DA66     		str	r2, [r3, #108]
2287:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2288:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Init tickstart for timeout managment*/
2289:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   tickstart = HAL_GetTick();
 4846              		.loc 1 2289 0
 4847 0012 FFF7FEFF 		bl	HAL_GetTick
 4848 0016 F860     		str	r0, [r7, #12]
2290:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2291:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check if the Transmitter is enabled */
2292:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
ARM GAS  /tmp/cca0gMDq.s 			page 125


 4849              		.loc 1 2292 0
 4850 0018 7B68     		ldr	r3, [r7, #4]
 4851 001a 1B68     		ldr	r3, [r3]
 4852 001c 1B68     		ldr	r3, [r3]
 4853 001e 03F00803 		and	r3, r3, #8
 4854 0022 002B     		cmp	r3, #0
 4855 0024 0ED0     		beq	.L249
2293:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2294:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Wait until TEACK flag is set */
2295:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE
 4856              		.loc 1 2295 0
 4857 0026 6FF07E43 		mvn	r3, #-33554432
 4858 002a 0093     		str	r3, [sp]
 4859 002c 7868     		ldr	r0, [r7, #4]
 4860 002e 4FF40011 		mov	r1, #2097152
 4861 0032 0022     		movs	r2, #0
 4862 0034 FB68     		ldr	r3, [r7, #12]
 4863 0036 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 4864 003a 0346     		mov	r3, r0
 4865 003c 002B     		cmp	r3, #0
 4866 003e 01D0     		beq	.L249
2296:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2297:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Timeout Occured */
2298:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return HAL_TIMEOUT;
 4867              		.loc 1 2298 0
 4868 0040 0323     		movs	r3, #3
 4869 0042 22E0     		b	.L250
 4870              	.L249:
2299:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2300:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2301:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check if the Receiver is enabled */
2302:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 4871              		.loc 1 2302 0
 4872 0044 7B68     		ldr	r3, [r7, #4]
 4873 0046 1B68     		ldr	r3, [r3]
 4874 0048 1B68     		ldr	r3, [r3]
 4875 004a 03F00403 		and	r3, r3, #4
 4876 004e 002B     		cmp	r3, #0
 4877 0050 0ED0     		beq	.L251
2303:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2304:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Wait until REACK flag is set */
2305:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE
 4878              		.loc 1 2305 0
 4879 0052 6FF07E43 		mvn	r3, #-33554432
 4880 0056 0093     		str	r3, [sp]
 4881 0058 7868     		ldr	r0, [r7, #4]
 4882 005a 4FF48001 		mov	r1, #4194304
 4883 005e 0022     		movs	r2, #0
 4884 0060 FB68     		ldr	r3, [r7, #12]
 4885 0062 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 4886 0066 0346     		mov	r3, r0
 4887 0068 002B     		cmp	r3, #0
 4888 006a 01D0     		beq	.L251
2306:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2307:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Timeout Occured */
2308:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return HAL_TIMEOUT;
 4889              		.loc 1 2308 0
ARM GAS  /tmp/cca0gMDq.s 			page 126


 4890 006c 0323     		movs	r3, #3
 4891 006e 0CE0     		b	.L250
 4892              	.L251:
2309:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2310:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2311:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2312:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Initialize the UART State */
2313:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 4893              		.loc 1 2313 0
 4894 0070 7B68     		ldr	r3, [r7, #4]
 4895 0072 2022     		movs	r2, #32
 4896 0074 83F86920 		strb	r2, [r3, #105]
2314:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 4897              		.loc 1 2314 0
 4898 0078 7B68     		ldr	r3, [r7, #4]
 4899 007a 2022     		movs	r2, #32
 4900 007c 83F86A20 		strb	r2, [r3, #106]
2315:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2316:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Process Unlocked */
2317:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 4901              		.loc 1 2317 0
 4902 0080 7B68     		ldr	r3, [r7, #4]
 4903 0082 0022     		movs	r2, #0
 4904 0084 83F86820 		strb	r2, [r3, #104]
2318:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2319:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 4905              		.loc 1 2319 0
 4906 0088 0023     		movs	r3, #0
 4907              	.L250:
2320:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 4908              		.loc 1 2320 0
 4909 008a 1846     		mov	r0, r3
 4910 008c 1037     		adds	r7, r7, #16
 4911              	.LCFI229:
 4912              		.cfi_def_cfa_offset 8
 4913 008e BD46     		mov	sp, r7
 4914              	.LCFI230:
 4915              		.cfi_def_cfa_register 13
 4916              		@ sp needed
 4917 0090 80BD     		pop	{r7, pc}
 4918              		.cfi_endproc
 4919              	.LFE164:
 4921 0092 00BF     		.section	.text.UART_WaitOnFlagUntilTimeout,"ax",%progbits
 4922              		.align	2
 4923              		.global	UART_WaitOnFlagUntilTimeout
 4924              		.thumb
 4925              		.thumb_func
 4927              	UART_WaitOnFlagUntilTimeout:
 4928              	.LFB165:
2321:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2322:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2323:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Handle UART Communication Timeout.
2324:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
2325:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  Flag Specifies the UART flag to check
2326:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  Status Flag status (SET or RESET)
2327:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  Tickstart Tick start value
2328:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  Timeout Timeout duration
ARM GAS  /tmp/cca0gMDq.s 			page 127


2329:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
2330:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2331:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus 
2332:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 4929              		.loc 1 2332 0
 4930              		.cfi_startproc
 4931              		@ args = 4, pretend = 0, frame = 16
 4932              		@ frame_needed = 1, uses_anonymous_args = 0
 4933 0000 80B5     		push	{r7, lr}
 4934              	.LCFI231:
 4935              		.cfi_def_cfa_offset 8
 4936              		.cfi_offset 7, -8
 4937              		.cfi_offset 14, -4
 4938 0002 84B0     		sub	sp, sp, #16
 4939              	.LCFI232:
 4940              		.cfi_def_cfa_offset 24
 4941 0004 00AF     		add	r7, sp, #0
 4942              	.LCFI233:
 4943              		.cfi_def_cfa_register 7
 4944 0006 F860     		str	r0, [r7, #12]
 4945 0008 B960     		str	r1, [r7, #8]
 4946 000a 3B60     		str	r3, [r7]
 4947 000c 1346     		mov	r3, r2
 4948 000e FB71     		strb	r3, [r7, #7]
2333:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Wait until flag is set */
2334:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 4949              		.loc 1 2334 0
 4950 0010 2CE0     		b	.L253
 4951              	.L256:
2335:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2336:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Check for the Timeout */
2337:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(Timeout != HAL_MAX_DELAY)
 4952              		.loc 1 2337 0
 4953 0012 BB69     		ldr	r3, [r7, #24]
 4954 0014 B3F1FF3F 		cmp	r3, #-1
 4955 0018 28D0     		beq	.L253
2338:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2339:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 4956              		.loc 1 2339 0
 4957 001a BB69     		ldr	r3, [r7, #24]
 4958 001c 002B     		cmp	r3, #0
 4959 001e 07D0     		beq	.L254
 4960              		.loc 1 2339 0 is_stmt 0 discriminator 1
 4961 0020 FFF7FEFF 		bl	HAL_GetTick
 4962 0024 0246     		mov	r2, r0
 4963 0026 3B68     		ldr	r3, [r7]
 4964 0028 D21A     		subs	r2, r2, r3
 4965 002a BB69     		ldr	r3, [r7, #24]
 4966 002c 9A42     		cmp	r2, r3
 4967 002e 1DD9     		bls	.L253
 4968              	.L254:
2340:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
2341:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
2342:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 4969              		.loc 1 2342 0 is_stmt 1
 4970 0030 FB68     		ldr	r3, [r7, #12]
 4971 0032 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cca0gMDq.s 			page 128


 4972 0034 FA68     		ldr	r2, [r7, #12]
 4973 0036 1268     		ldr	r2, [r2]
 4974 0038 1268     		ldr	r2, [r2]
 4975 003a 22F4D072 		bic	r2, r2, #416
 4976 003e 1A60     		str	r2, [r3]
2343:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 4977              		.loc 1 2343 0
 4978 0040 FB68     		ldr	r3, [r7, #12]
 4979 0042 1B68     		ldr	r3, [r3]
 4980 0044 FA68     		ldr	r2, [r7, #12]
 4981 0046 1268     		ldr	r2, [r2]
 4982 0048 9268     		ldr	r2, [r2, #8]
 4983 004a 22F00102 		bic	r2, r2, #1
 4984 004e 9A60     		str	r2, [r3, #8]
2344:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2345:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->gState  = HAL_UART_STATE_READY;
 4985              		.loc 1 2345 0
 4986 0050 FB68     		ldr	r3, [r7, #12]
 4987 0052 2022     		movs	r2, #32
 4988 0054 83F86920 		strb	r2, [r3, #105]
2346:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 4989              		.loc 1 2346 0
 4990 0058 FB68     		ldr	r3, [r7, #12]
 4991 005a 2022     		movs	r2, #32
 4992 005c 83F86A20 		strb	r2, [r3, #106]
2347:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2348:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         /* Process Unlocked */
2349:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         __HAL_UNLOCK(huart);
 4993              		.loc 1 2349 0
 4994 0060 FB68     		ldr	r3, [r7, #12]
 4995 0062 0022     		movs	r2, #0
 4996 0064 83F86820 		strb	r2, [r3, #104]
2350:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         return HAL_TIMEOUT;
 4997              		.loc 1 2350 0
 4998 0068 0323     		movs	r3, #3
 4999 006a 0FE0     		b	.L255
 5000              	.L253:
2334:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
 5001              		.loc 1 2334 0
 5002 006c FB68     		ldr	r3, [r7, #12]
 5003 006e 1B68     		ldr	r3, [r3]
 5004 0070 DA69     		ldr	r2, [r3, #28]
 5005 0072 BB68     		ldr	r3, [r7, #8]
 5006 0074 1A40     		ands	r2, r2, r3
 5007 0076 BB68     		ldr	r3, [r7, #8]
 5008 0078 9A42     		cmp	r2, r3
 5009 007a 0CBF     		ite	eq
 5010 007c 0123     		moveq	r3, #1
 5011 007e 0023     		movne	r3, #0
 5012 0080 DBB2     		uxtb	r3, r3
 5013 0082 1A46     		mov	r2, r3
 5014 0084 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 5015 0086 9A42     		cmp	r2, r3
 5016 0088 C3D0     		beq	.L256
2351:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
2352:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2353:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
ARM GAS  /tmp/cca0gMDq.s 			page 129


2354:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 5017              		.loc 1 2354 0
 5018 008a 0023     		movs	r3, #0
 5019              	.L255:
2355:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 5020              		.loc 1 2355 0
 5021 008c 1846     		mov	r0, r3
 5022 008e 1037     		adds	r7, r7, #16
 5023              	.LCFI234:
 5024              		.cfi_def_cfa_offset 8
 5025 0090 BD46     		mov	sp, r7
 5026              	.LCFI235:
 5027              		.cfi_def_cfa_register 13
 5028              		@ sp needed
 5029 0092 80BD     		pop	{r7, pc}
 5030              		.cfi_endproc
 5031              	.LFE165:
 5033              		.section	.text.UART_EndTxTransfer,"ax",%progbits
 5034              		.align	2
 5035              		.thumb
 5036              		.thumb_func
 5038              	UART_EndTxTransfer:
 5039              	.LFB166:
2356:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2357:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2358:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2359:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit compl
2360:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
2361:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2362:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2363:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
2364:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 5040              		.loc 1 2364 0
 5041              		.cfi_startproc
 5042              		@ args = 0, pretend = 0, frame = 8
 5043              		@ frame_needed = 1, uses_anonymous_args = 0
 5044              		@ link register save eliminated.
 5045 0000 80B4     		push	{r7}
 5046              	.LCFI236:
 5047              		.cfi_def_cfa_offset 4
 5048              		.cfi_offset 7, -4
 5049 0002 83B0     		sub	sp, sp, #12
 5050              	.LCFI237:
 5051              		.cfi_def_cfa_offset 16
 5052 0004 00AF     		add	r7, sp, #0
 5053              	.LCFI238:
 5054              		.cfi_def_cfa_register 7
 5055 0006 7860     		str	r0, [r7, #4]
2365:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable TXEIE and TCIE interrupts */
2366:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 5056              		.loc 1 2366 0
 5057 0008 7B68     		ldr	r3, [r7, #4]
 5058 000a 1B68     		ldr	r3, [r3]
 5059 000c 7A68     		ldr	r2, [r7, #4]
 5060 000e 1268     		ldr	r2, [r2]
 5061 0010 1268     		ldr	r2, [r2]
 5062 0012 22F0C002 		bic	r2, r2, #192
ARM GAS  /tmp/cca0gMDq.s 			page 130


 5063 0016 1A60     		str	r2, [r3]
2367:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2368:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* At end of Tx process, restore huart->gState to Ready */
2369:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 5064              		.loc 1 2369 0
 5065 0018 7B68     		ldr	r3, [r7, #4]
 5066 001a 2022     		movs	r2, #32
 5067 001c 83F86920 		strb	r2, [r3, #105]
2370:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 5068              		.loc 1 2370 0
 5069 0020 0C37     		adds	r7, r7, #12
 5070              	.LCFI239:
 5071              		.cfi_def_cfa_offset 4
 5072 0022 BD46     		mov	sp, r7
 5073              	.LCFI240:
 5074              		.cfi_def_cfa_register 13
 5075              		@ sp needed
 5076 0024 5DF8047B 		ldr	r7, [sp], #4
 5077              	.LCFI241:
 5078              		.cfi_restore 7
 5079              		.cfi_def_cfa_offset 0
 5080 0028 7047     		bx	lr
 5081              		.cfi_endproc
 5082              	.LFE166:
 5084 002a 00BF     		.section	.text.UART_EndRxTransfer,"ax",%progbits
 5085              		.align	2
 5086              		.thumb
 5087              		.thumb_func
 5089              	UART_EndRxTransfer:
 5090              	.LFB167:
2371:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2372:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2373:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2374:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception comp
2375:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
2376:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2377:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2378:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
2379:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 5091              		.loc 1 2379 0
 5092              		.cfi_startproc
 5093              		@ args = 0, pretend = 0, frame = 8
 5094              		@ frame_needed = 1, uses_anonymous_args = 0
 5095              		@ link register save eliminated.
 5096 0000 80B4     		push	{r7}
 5097              	.LCFI242:
 5098              		.cfi_def_cfa_offset 4
 5099              		.cfi_offset 7, -4
 5100 0002 83B0     		sub	sp, sp, #12
 5101              	.LCFI243:
 5102              		.cfi_def_cfa_offset 16
 5103 0004 00AF     		add	r7, sp, #0
 5104              	.LCFI244:
 5105              		.cfi_def_cfa_register 7
 5106 0006 7860     		str	r0, [r7, #4]
2380:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2381:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
ARM GAS  /tmp/cca0gMDq.s 			page 131


 5107              		.loc 1 2381 0
 5108 0008 7B68     		ldr	r3, [r7, #4]
 5109 000a 1B68     		ldr	r3, [r3]
 5110 000c 7A68     		ldr	r2, [r7, #4]
 5111 000e 1268     		ldr	r2, [r2]
 5112 0010 1268     		ldr	r2, [r2]
 5113 0012 22F49072 		bic	r2, r2, #288
 5114 0016 1A60     		str	r2, [r3]
2382:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5115              		.loc 1 2382 0
 5116 0018 7B68     		ldr	r3, [r7, #4]
 5117 001a 1B68     		ldr	r3, [r3]
 5118 001c 7A68     		ldr	r2, [r7, #4]
 5119 001e 1268     		ldr	r2, [r2]
 5120 0020 9268     		ldr	r2, [r2, #8]
 5121 0022 22F00102 		bic	r2, r2, #1
 5122 0026 9A60     		str	r2, [r3, #8]
2383:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2384:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* At end of Rx process, restore huart->RxState to Ready */
2385:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 5123              		.loc 1 2385 0
 5124 0028 7B68     		ldr	r3, [r7, #4]
 5125 002a 2022     		movs	r2, #32
 5126 002c 83F86A20 		strb	r2, [r3, #106]
2386:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 5127              		.loc 1 2386 0
 5128 0030 0C37     		adds	r7, r7, #12
 5129              	.LCFI245:
 5130              		.cfi_def_cfa_offset 4
 5131 0032 BD46     		mov	sp, r7
 5132              	.LCFI246:
 5133              		.cfi_def_cfa_register 13
 5134              		@ sp needed
 5135 0034 5DF8047B 		ldr	r7, [sp], #4
 5136              	.LCFI247:
 5137              		.cfi_restore 7
 5138              		.cfi_def_cfa_offset 0
 5139 0038 7047     		bx	lr
 5140              		.cfi_endproc
 5141              	.LFE167:
 5143 003a 00BF     		.section	.text.UART_DMATransmitCplt,"ax",%progbits
 5144              		.align	2
 5145              		.thumb
 5146              		.thumb_func
 5148              	UART_DMATransmitCplt:
 5149              	.LFB168:
2387:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2388:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2389:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2390:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief DMA UART transmit process complete callback.
2391:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param hdma DMA handle.
2392:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2393:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2394:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
2395:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 5150              		.loc 1 2395 0
 5151              		.cfi_startproc
ARM GAS  /tmp/cca0gMDq.s 			page 132


 5152              		@ args = 0, pretend = 0, frame = 16
 5153              		@ frame_needed = 1, uses_anonymous_args = 0
 5154 0000 80B5     		push	{r7, lr}
 5155              	.LCFI248:
 5156              		.cfi_def_cfa_offset 8
 5157              		.cfi_offset 7, -8
 5158              		.cfi_offset 14, -4
 5159 0002 84B0     		sub	sp, sp, #16
 5160              	.LCFI249:
 5161              		.cfi_def_cfa_offset 24
 5162 0004 00AF     		add	r7, sp, #0
 5163              	.LCFI250:
 5164              		.cfi_def_cfa_register 7
 5165 0006 7860     		str	r0, [r7, #4]
2396:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 5166              		.loc 1 2396 0
 5167 0008 7B68     		ldr	r3, [r7, #4]
 5168 000a 5B6A     		ldr	r3, [r3, #36]
 5169 000c FB60     		str	r3, [r7, #12]
2397:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   
2398:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* DMA Normal mode */
2399:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 5170              		.loc 1 2399 0
 5171 000e 7B68     		ldr	r3, [r7, #4]
 5172 0010 1B68     		ldr	r3, [r3]
 5173 0012 1B68     		ldr	r3, [r3]
 5174 0014 03F02003 		and	r3, r3, #32
 5175 0018 002B     		cmp	r3, #0
 5176 001a 14D1     		bne	.L260
2400:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2401:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->TxXferCount = 0U;
 5177              		.loc 1 2401 0
 5178 001c FB68     		ldr	r3, [r7, #12]
 5179 001e 0022     		movs	r2, #0
 5180 0020 A3F85220 		strh	r2, [r3, #82]	@ movhi
2402:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2403:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Disable the DMA transfer for transmit request by resetting the DMAT bit
2404:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        in the UART CR3 register */
2405:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 5181              		.loc 1 2405 0
 5182 0024 FB68     		ldr	r3, [r7, #12]
 5183 0026 1B68     		ldr	r3, [r3]
 5184 0028 FA68     		ldr	r2, [r7, #12]
 5185 002a 1268     		ldr	r2, [r2]
 5186 002c 9268     		ldr	r2, [r2, #8]
 5187 002e 22F08002 		bic	r2, r2, #128
 5188 0032 9A60     		str	r2, [r3, #8]
2406:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2407:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Enable the UART Transmit Complete Interrupt */
2408:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 5189              		.loc 1 2408 0
 5190 0034 FB68     		ldr	r3, [r7, #12]
 5191 0036 1B68     		ldr	r3, [r3]
 5192 0038 FA68     		ldr	r2, [r7, #12]
 5193 003a 1268     		ldr	r2, [r2]
 5194 003c 1268     		ldr	r2, [r2]
 5195 003e 42F04002 		orr	r2, r2, #64
ARM GAS  /tmp/cca0gMDq.s 			page 133


 5196 0042 1A60     		str	r2, [r3]
 5197 0044 02E0     		b	.L259
 5198              	.L260:
2409:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2410:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* DMA Circular mode */
2411:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
2412:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2413:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     HAL_UART_TxCpltCallback(huart);
 5199              		.loc 1 2413 0
 5200 0046 F868     		ldr	r0, [r7, #12]
 5201 0048 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 5202              	.L259:
2414:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2415:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2416:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 5203              		.loc 1 2416 0
 5204 004c 1037     		adds	r7, r7, #16
 5205              	.LCFI251:
 5206              		.cfi_def_cfa_offset 8
 5207 004e BD46     		mov	sp, r7
 5208              	.LCFI252:
 5209              		.cfi_def_cfa_register 13
 5210              		@ sp needed
 5211 0050 80BD     		pop	{r7, pc}
 5212              		.cfi_endproc
 5213              	.LFE168:
 5215 0052 00BF     		.section	.text.UART_DMATxHalfCplt,"ax",%progbits
 5216              		.align	2
 5217              		.thumb
 5218              		.thumb_func
 5220              	UART_DMATxHalfCplt:
 5221              	.LFB169:
2417:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2418:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2419:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief DMA UART transmit process half complete callback.
2420:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param hdma DMA handle.
2421:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2422:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2423:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
2424:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 5222              		.loc 1 2424 0
 5223              		.cfi_startproc
 5224              		@ args = 0, pretend = 0, frame = 16
 5225              		@ frame_needed = 1, uses_anonymous_args = 0
 5226 0000 80B5     		push	{r7, lr}
 5227              	.LCFI253:
 5228              		.cfi_def_cfa_offset 8
 5229              		.cfi_offset 7, -8
 5230              		.cfi_offset 14, -4
 5231 0002 84B0     		sub	sp, sp, #16
 5232              	.LCFI254:
 5233              		.cfi_def_cfa_offset 24
 5234 0004 00AF     		add	r7, sp, #0
 5235              	.LCFI255:
 5236              		.cfi_def_cfa_register 7
 5237 0006 7860     		str	r0, [r7, #4]
2425:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
ARM GAS  /tmp/cca0gMDq.s 			page 134


 5238              		.loc 1 2425 0
 5239 0008 7B68     		ldr	r3, [r7, #4]
 5240 000a 5B6A     		ldr	r3, [r3, #36]
 5241 000c FB60     		str	r3, [r7, #12]
2426:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2427:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_UART_TxHalfCpltCallback(huart);
 5242              		.loc 1 2427 0
 5243 000e F868     		ldr	r0, [r7, #12]
 5244 0010 FFF7FEFF 		bl	HAL_UART_TxHalfCpltCallback
2428:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 5245              		.loc 1 2428 0
 5246 0014 1037     		adds	r7, r7, #16
 5247              	.LCFI256:
 5248              		.cfi_def_cfa_offset 8
 5249 0016 BD46     		mov	sp, r7
 5250              	.LCFI257:
 5251              		.cfi_def_cfa_register 13
 5252              		@ sp needed
 5253 0018 80BD     		pop	{r7, pc}
 5254              		.cfi_endproc
 5255              	.LFE169:
 5257 001a 00BF     		.section	.text.UART_DMAReceiveCplt,"ax",%progbits
 5258              		.align	2
 5259              		.thumb
 5260              		.thumb_func
 5262              	UART_DMAReceiveCplt:
 5263              	.LFB170:
2429:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2430:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2431:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief DMA UART receive process complete callback.
2432:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param hdma DMA handle.
2433:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2434:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2435:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
2436:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 5264              		.loc 1 2436 0
 5265              		.cfi_startproc
 5266              		@ args = 0, pretend = 0, frame = 16
 5267              		@ frame_needed = 1, uses_anonymous_args = 0
 5268 0000 80B5     		push	{r7, lr}
 5269              	.LCFI258:
 5270              		.cfi_def_cfa_offset 8
 5271              		.cfi_offset 7, -8
 5272              		.cfi_offset 14, -4
 5273 0002 84B0     		sub	sp, sp, #16
 5274              	.LCFI259:
 5275              		.cfi_def_cfa_offset 24
 5276 0004 00AF     		add	r7, sp, #0
 5277              	.LCFI260:
 5278              		.cfi_def_cfa_register 7
 5279 0006 7860     		str	r0, [r7, #4]
2437:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 5280              		.loc 1 2437 0
 5281 0008 7B68     		ldr	r3, [r7, #4]
 5282 000a 5B6A     		ldr	r3, [r3, #36]
 5283 000c FB60     		str	r3, [r7, #12]
2438:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/cca0gMDq.s 			page 135


2439:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* DMA Normal mode */
2440:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 5284              		.loc 1 2440 0
 5285 000e 7B68     		ldr	r3, [r7, #4]
 5286 0010 1B68     		ldr	r3, [r3]
 5287 0012 1B68     		ldr	r3, [r3]
 5288 0014 03F02003 		and	r3, r3, #32
 5289 0018 002B     		cmp	r3, #0
 5290 001a 1FD1     		bne	.L264
2441:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2442:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxXferCount = 0U;
 5291              		.loc 1 2442 0
 5292 001c FB68     		ldr	r3, [r7, #12]
 5293 001e 0022     		movs	r2, #0
 5294 0020 A3F85A20 		strh	r2, [r3, #90]	@ movhi
2443:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2444:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
2445:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 5295              		.loc 1 2445 0
 5296 0024 FB68     		ldr	r3, [r7, #12]
 5297 0026 1B68     		ldr	r3, [r3]
 5298 0028 FA68     		ldr	r2, [r7, #12]
 5299 002a 1268     		ldr	r2, [r2]
 5300 002c 1268     		ldr	r2, [r2]
 5301 002e 22F48072 		bic	r2, r2, #256
 5302 0032 1A60     		str	r2, [r3]
2446:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5303              		.loc 1 2446 0
 5304 0034 FB68     		ldr	r3, [r7, #12]
 5305 0036 1B68     		ldr	r3, [r3]
 5306 0038 FA68     		ldr	r2, [r7, #12]
 5307 003a 1268     		ldr	r2, [r2]
 5308 003c 9268     		ldr	r2, [r2, #8]
 5309 003e 22F00102 		bic	r2, r2, #1
 5310 0042 9A60     		str	r2, [r3, #8]
2447:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2448:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
2449:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****        in the UART CR3 register */
2450:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 5311              		.loc 1 2450 0
 5312 0044 FB68     		ldr	r3, [r7, #12]
 5313 0046 1B68     		ldr	r3, [r3]
 5314 0048 FA68     		ldr	r2, [r7, #12]
 5315 004a 1268     		ldr	r2, [r2]
 5316 004c 9268     		ldr	r2, [r2, #8]
 5317 004e 22F04002 		bic	r2, r2, #64
 5318 0052 9A60     		str	r2, [r3, #8]
2451:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2452:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
2453:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 5319              		.loc 1 2453 0
 5320 0054 FB68     		ldr	r3, [r7, #12]
 5321 0056 2022     		movs	r2, #32
 5322 0058 83F86A20 		strb	r2, [r3, #106]
 5323              	.L264:
2454:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2455:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/cca0gMDq.s 			page 136


2456:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_UART_RxCpltCallback(huart);
 5324              		.loc 1 2456 0
 5325 005c F868     		ldr	r0, [r7, #12]
 5326 005e FFF7FEFF 		bl	HAL_UART_RxCpltCallback
2457:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 5327              		.loc 1 2457 0
 5328 0062 1037     		adds	r7, r7, #16
 5329              	.LCFI261:
 5330              		.cfi_def_cfa_offset 8
 5331 0064 BD46     		mov	sp, r7
 5332              	.LCFI262:
 5333              		.cfi_def_cfa_register 13
 5334              		@ sp needed
 5335 0066 80BD     		pop	{r7, pc}
 5336              		.cfi_endproc
 5337              	.LFE170:
 5339              		.section	.text.UART_DMARxHalfCplt,"ax",%progbits
 5340              		.align	2
 5341              		.thumb
 5342              		.thumb_func
 5344              	UART_DMARxHalfCplt:
 5345              	.LFB171:
2458:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2459:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2460:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief DMA UART receive process half complete callback.
2461:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param hdma DMA handle.
2462:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2463:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2464:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
2465:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 5346              		.loc 1 2465 0
 5347              		.cfi_startproc
 5348              		@ args = 0, pretend = 0, frame = 16
 5349              		@ frame_needed = 1, uses_anonymous_args = 0
 5350 0000 80B5     		push	{r7, lr}
 5351              	.LCFI263:
 5352              		.cfi_def_cfa_offset 8
 5353              		.cfi_offset 7, -8
 5354              		.cfi_offset 14, -4
 5355 0002 84B0     		sub	sp, sp, #16
 5356              	.LCFI264:
 5357              		.cfi_def_cfa_offset 24
 5358 0004 00AF     		add	r7, sp, #0
 5359              	.LCFI265:
 5360              		.cfi_def_cfa_register 7
 5361 0006 7860     		str	r0, [r7, #4]
2466:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 5362              		.loc 1 2466 0
 5363 0008 7B68     		ldr	r3, [r7, #4]
 5364 000a 5B6A     		ldr	r3, [r3, #36]
 5365 000c FB60     		str	r3, [r7, #12]
2467:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2468:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_UART_RxHalfCpltCallback(huart);
 5366              		.loc 1 2468 0
 5367 000e F868     		ldr	r0, [r7, #12]
 5368 0010 FFF7FEFF 		bl	HAL_UART_RxHalfCpltCallback
2469:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
ARM GAS  /tmp/cca0gMDq.s 			page 137


 5369              		.loc 1 2469 0
 5370 0014 1037     		adds	r7, r7, #16
 5371              	.LCFI266:
 5372              		.cfi_def_cfa_offset 8
 5373 0016 BD46     		mov	sp, r7
 5374              	.LCFI267:
 5375              		.cfi_def_cfa_register 13
 5376              		@ sp needed
 5377 0018 80BD     		pop	{r7, pc}
 5378              		.cfi_endproc
 5379              	.LFE171:
 5381 001a 00BF     		.section	.text.UART_DMAError,"ax",%progbits
 5382              		.align	2
 5383              		.thumb
 5384              		.thumb_func
 5386              	UART_DMAError:
 5387              	.LFB172:
2470:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2471:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2472:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief DMA UART communication error callback.
2473:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param hdma DMA handle.
2474:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2475:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2476:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma)
2477:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 5388              		.loc 1 2477 0
 5389              		.cfi_startproc
 5390              		@ args = 0, pretend = 0, frame = 16
 5391              		@ frame_needed = 1, uses_anonymous_args = 0
 5392 0000 80B5     		push	{r7, lr}
 5393              	.LCFI268:
 5394              		.cfi_def_cfa_offset 8
 5395              		.cfi_offset 7, -8
 5396              		.cfi_offset 14, -4
 5397 0002 84B0     		sub	sp, sp, #16
 5398              	.LCFI269:
 5399              		.cfi_def_cfa_offset 24
 5400 0004 00AF     		add	r7, sp, #0
 5401              	.LCFI270:
 5402              		.cfi_def_cfa_register 7
 5403 0006 7860     		str	r0, [r7, #4]
2478:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 5404              		.loc 1 2478 0
 5405 0008 7B68     		ldr	r3, [r7, #4]
 5406 000a 5B6A     		ldr	r3, [r3, #36]
 5407 000c FB60     		str	r3, [r7, #12]
2479:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2480:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
2481:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 5408              		.loc 1 2481 0
 5409 000e FB68     		ldr	r3, [r7, #12]
 5410 0010 93F86930 		ldrb	r3, [r3, #105]
 5411 0014 DBB2     		uxtb	r3, r3
 5412 0016 212B     		cmp	r3, #33
 5413 0018 0DD1     		bne	.L267
2482:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 5414              		.loc 1 2482 0
ARM GAS  /tmp/cca0gMDq.s 			page 138


 5415 001a FB68     		ldr	r3, [r7, #12]
 5416 001c 1B68     		ldr	r3, [r3]
 5417 001e 9B68     		ldr	r3, [r3, #8]
 5418 0020 03F08003 		and	r3, r3, #128
 5419 0024 002B     		cmp	r3, #0
 5420 0026 06D0     		beq	.L267
2483:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2484:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->TxXferCount = 0U;
 5421              		.loc 1 2484 0
 5422 0028 FB68     		ldr	r3, [r7, #12]
 5423 002a 0022     		movs	r2, #0
 5424 002c A3F85220 		strh	r2, [r3, #82]	@ movhi
2485:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 5425              		.loc 1 2485 0
 5426 0030 F868     		ldr	r0, [r7, #12]
 5427 0032 FFF7FEFF 		bl	UART_EndTxTransfer
 5428              	.L267:
2486:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2487:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2488:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
2489:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 5429              		.loc 1 2489 0
 5430 0036 FB68     		ldr	r3, [r7, #12]
 5431 0038 93F86A30 		ldrb	r3, [r3, #106]
 5432 003c DBB2     		uxtb	r3, r3
 5433 003e 222B     		cmp	r3, #34
 5434 0040 0DD1     		bne	.L268
2490:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 5435              		.loc 1 2490 0
 5436 0042 FB68     		ldr	r3, [r7, #12]
 5437 0044 1B68     		ldr	r3, [r3]
 5438 0046 9B68     		ldr	r3, [r3, #8]
 5439 0048 03F04003 		and	r3, r3, #64
 5440 004c 002B     		cmp	r3, #0
 5441 004e 06D0     		beq	.L268
2491:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2492:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     huart->RxXferCount = 0U;
 5442              		.loc 1 2492 0
 5443 0050 FB68     		ldr	r3, [r7, #12]
 5444 0052 0022     		movs	r2, #0
 5445 0054 A3F85A20 		strh	r2, [r3, #90]	@ movhi
2493:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 5446              		.loc 1 2493 0
 5447 0058 F868     		ldr	r0, [r7, #12]
 5448 005a FFF7FEFF 		bl	UART_EndRxTransfer
 5449              	.L268:
2494:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2495:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2496:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->ErrorCode |= HAL_UART_ERROR_DMA;
 5450              		.loc 1 2496 0
 5451 005e FB68     		ldr	r3, [r7, #12]
 5452 0060 DB6E     		ldr	r3, [r3, #108]
 5453 0062 43F01002 		orr	r2, r3, #16
 5454 0066 FB68     		ldr	r3, [r7, #12]
 5455 0068 DA66     		str	r2, [r3, #108]
2497:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 5456              		.loc 1 2497 0
ARM GAS  /tmp/cca0gMDq.s 			page 139


 5457 006a F868     		ldr	r0, [r7, #12]
 5458 006c FFF7FEFF 		bl	HAL_UART_ErrorCallback
2498:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 5459              		.loc 1 2498 0
 5460 0070 1037     		adds	r7, r7, #16
 5461              	.LCFI271:
 5462              		.cfi_def_cfa_offset 8
 5463 0072 BD46     		mov	sp, r7
 5464              	.LCFI272:
 5465              		.cfi_def_cfa_register 13
 5466              		@ sp needed
 5467 0074 80BD     		pop	{r7, pc}
 5468              		.cfi_endproc
 5469              	.LFE172:
 5471 0076 00BF     		.section	.text.UART_DMAAbortOnError,"ax",%progbits
 5472              		.align	2
 5473              		.thumb
 5474              		.thumb_func
 5476              	UART_DMAAbortOnError:
 5477              	.LFB173:
2499:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2500:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2501:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
2502:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
2503:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  hdma DMA handle.
2504:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2505:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2506:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
2507:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 5478              		.loc 1 2507 0
 5479              		.cfi_startproc
 5480              		@ args = 0, pretend = 0, frame = 16
 5481              		@ frame_needed = 1, uses_anonymous_args = 0
 5482 0000 80B5     		push	{r7, lr}
 5483              	.LCFI273:
 5484              		.cfi_def_cfa_offset 8
 5485              		.cfi_offset 7, -8
 5486              		.cfi_offset 14, -4
 5487 0002 84B0     		sub	sp, sp, #16
 5488              	.LCFI274:
 5489              		.cfi_def_cfa_offset 24
 5490 0004 00AF     		add	r7, sp, #0
 5491              	.LCFI275:
 5492              		.cfi_def_cfa_register 7
 5493 0006 7860     		str	r0, [r7, #4]
2508:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 5494              		.loc 1 2508 0
 5495 0008 7B68     		ldr	r3, [r7, #4]
 5496 000a 5B6A     		ldr	r3, [r3, #36]
 5497 000c FB60     		str	r3, [r7, #12]
2509:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxXferCount = 0U;
 5498              		.loc 1 2509 0
 5499 000e FB68     		ldr	r3, [r7, #12]
 5500 0010 0022     		movs	r2, #0
 5501 0012 A3F85A20 		strh	r2, [r3, #90]	@ movhi
2510:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->TxXferCount = 0U;
 5502              		.loc 1 2510 0
ARM GAS  /tmp/cca0gMDq.s 			page 140


 5503 0016 FB68     		ldr	r3, [r7, #12]
 5504 0018 0022     		movs	r2, #0
 5505 001a A3F85220 		strh	r2, [r3, #82]	@ movhi
2511:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2512:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
 5506              		.loc 1 2512 0
 5507 001e F868     		ldr	r0, [r7, #12]
 5508 0020 FFF7FEFF 		bl	HAL_UART_ErrorCallback
2513:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 5509              		.loc 1 2513 0
 5510 0024 1037     		adds	r7, r7, #16
 5511              	.LCFI276:
 5512              		.cfi_def_cfa_offset 8
 5513 0026 BD46     		mov	sp, r7
 5514              	.LCFI277:
 5515              		.cfi_def_cfa_register 13
 5516              		@ sp needed
 5517 0028 80BD     		pop	{r7, pc}
 5518              		.cfi_endproc
 5519              	.LFE173:
 5521 002a 00BF     		.section	.text.UART_DMATxAbortCallback,"ax",%progbits
 5522              		.align	2
 5523              		.thumb
 5524              		.thumb_func
 5526              	UART_DMATxAbortCallback:
 5527              	.LFB174:
2514:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2515:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2516:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user
2517:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
2518:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2519:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         Abort still ongoing for Rx DMA Handle.
2520:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  hdma DMA handle.
2521:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2522:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2523:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
2524:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 5528              		.loc 1 2524 0
 5529              		.cfi_startproc
 5530              		@ args = 0, pretend = 0, frame = 16
 5531              		@ frame_needed = 1, uses_anonymous_args = 0
 5532 0000 80B5     		push	{r7, lr}
 5533              	.LCFI278:
 5534              		.cfi_def_cfa_offset 8
 5535              		.cfi_offset 7, -8
 5536              		.cfi_offset 14, -4
 5537 0002 84B0     		sub	sp, sp, #16
 5538              	.LCFI279:
 5539              		.cfi_def_cfa_offset 24
 5540 0004 00AF     		add	r7, sp, #0
 5541              	.LCFI280:
 5542              		.cfi_def_cfa_register 7
 5543 0006 7860     		str	r0, [r7, #4]
2525:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef* )(hdma->Parent);
 5544              		.loc 1 2525 0
 5545 0008 7B68     		ldr	r3, [r7, #4]
 5546 000a 5B6A     		ldr	r3, [r3, #36]
ARM GAS  /tmp/cca0gMDq.s 			page 141


 5547 000c FB60     		str	r3, [r7, #12]
2526:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   
2527:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->hdmatx->XferAbortCallback = NULL;
 5548              		.loc 1 2527 0
 5549 000e FB68     		ldr	r3, [r7, #12]
 5550 0010 1B6E     		ldr	r3, [r3, #96]
 5551 0012 0022     		movs	r2, #0
 5552 0014 5A63     		str	r2, [r3, #52]
2528:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2529:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
2530:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(huart->hdmarx != NULL)
 5553              		.loc 1 2530 0
 5554 0016 FB68     		ldr	r3, [r7, #12]
 5555 0018 5B6E     		ldr	r3, [r3, #100]
 5556 001a 002B     		cmp	r3, #0
 5557 001c 05D0     		beq	.L271
2531:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2532:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(huart->hdmarx->XferAbortCallback != NULL)
 5558              		.loc 1 2532 0
 5559 001e FB68     		ldr	r3, [r7, #12]
 5560 0020 5B6E     		ldr	r3, [r3, #100]
 5561 0022 5B6B     		ldr	r3, [r3, #52]
 5562 0024 002B     		cmp	r3, #0
 5563 0026 00D0     		beq	.L271
2533:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2534:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return;
 5564              		.loc 1 2534 0
 5565 0028 19E0     		b	.L270
 5566              	.L271:
2535:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2536:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2537:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   
2538:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
2539:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->TxXferCount = 0U;
 5567              		.loc 1 2539 0
 5568 002a FB68     		ldr	r3, [r7, #12]
 5569 002c 0022     		movs	r2, #0
 5570 002e A3F85220 		strh	r2, [r3, #82]	@ movhi
2540:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxXferCount = 0U;
 5571              		.loc 1 2540 0
 5572 0032 FB68     		ldr	r3, [r7, #12]
 5573 0034 0022     		movs	r2, #0
 5574 0036 A3F85A20 		strh	r2, [r3, #90]	@ movhi
2541:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2542:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Reset errorCode */
2543:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 5575              		.loc 1 2543 0
 5576 003a FB68     		ldr	r3, [r7, #12]
 5577 003c 0022     		movs	r2, #0
 5578 003e DA66     		str	r2, [r3, #108]
2544:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2545:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
2546:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 5579              		.loc 1 2546 0
 5580 0040 FB68     		ldr	r3, [r7, #12]
 5581 0042 1B68     		ldr	r3, [r3]
 5582 0044 0F22     		movs	r2, #15
ARM GAS  /tmp/cca0gMDq.s 			page 142


 5583 0046 1A62     		str	r2, [r3, #32]
2547:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2548:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
2549:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 5584              		.loc 1 2549 0
 5585 0048 FB68     		ldr	r3, [r7, #12]
 5586 004a 2022     		movs	r2, #32
 5587 004c 83F86920 		strb	r2, [r3, #105]
2550:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 5588              		.loc 1 2550 0
 5589 0050 FB68     		ldr	r3, [r7, #12]
 5590 0052 2022     		movs	r2, #32
 5591 0054 83F86A20 		strb	r2, [r3, #106]
2551:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2552:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Call user Abort complete callback */
2553:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
 5592              		.loc 1 2553 0
 5593 0058 F868     		ldr	r0, [r7, #12]
 5594 005a FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 5595              	.L270:
2554:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 5596              		.loc 1 2554 0
 5597 005e 1037     		adds	r7, r7, #16
 5598              	.LCFI281:
 5599              		.cfi_def_cfa_offset 8
 5600 0060 BD46     		mov	sp, r7
 5601              	.LCFI282:
 5602              		.cfi_def_cfa_register 13
 5603              		@ sp needed
 5604 0062 80BD     		pop	{r7, pc}
 5605              		.cfi_endproc
 5606              	.LFE174:
 5608              		.section	.text.UART_DMARxAbortCallback,"ax",%progbits
 5609              		.align	2
 5610              		.thumb
 5611              		.thumb_func
 5613              	UART_DMARxAbortCallback:
 5614              	.LFB175:
2555:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2556:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2557:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2558:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user
2559:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
2560:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
2561:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         Abort still ongoing for Tx DMA Handle.
2562:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  hdma DMA handle.
2563:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2564:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2565:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
2566:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 5615              		.loc 1 2566 0
 5616              		.cfi_startproc
 5617              		@ args = 0, pretend = 0, frame = 16
 5618              		@ frame_needed = 1, uses_anonymous_args = 0
 5619 0000 80B5     		push	{r7, lr}
 5620              	.LCFI283:
 5621              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cca0gMDq.s 			page 143


 5622              		.cfi_offset 7, -8
 5623              		.cfi_offset 14, -4
 5624 0002 84B0     		sub	sp, sp, #16
 5625              	.LCFI284:
 5626              		.cfi_def_cfa_offset 24
 5627 0004 00AF     		add	r7, sp, #0
 5628              	.LCFI285:
 5629              		.cfi_def_cfa_register 7
 5630 0006 7860     		str	r0, [r7, #4]
2567:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef* )(hdma->Parent);
 5631              		.loc 1 2567 0
 5632 0008 7B68     		ldr	r3, [r7, #4]
 5633 000a 5B6A     		ldr	r3, [r3, #36]
 5634 000c FB60     		str	r3, [r7, #12]
2568:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   
2569:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
 5635              		.loc 1 2569 0
 5636 000e FB68     		ldr	r3, [r7, #12]
 5637 0010 5B6E     		ldr	r3, [r3, #100]
 5638 0012 0022     		movs	r2, #0
 5639 0014 5A63     		str	r2, [r3, #52]
2570:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2571:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
2572:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(huart->hdmatx != NULL)
 5640              		.loc 1 2572 0
 5641 0016 FB68     		ldr	r3, [r7, #12]
 5642 0018 1B6E     		ldr	r3, [r3, #96]
 5643 001a 002B     		cmp	r3, #0
 5644 001c 05D0     		beq	.L274
2573:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2574:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(huart->hdmatx->XferAbortCallback != NULL)
 5645              		.loc 1 2574 0
 5646 001e FB68     		ldr	r3, [r7, #12]
 5647 0020 1B6E     		ldr	r3, [r3, #96]
 5648 0022 5B6B     		ldr	r3, [r3, #52]
 5649 0024 002B     		cmp	r3, #0
 5650 0026 00D0     		beq	.L274
2575:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2576:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return;
 5651              		.loc 1 2576 0
 5652 0028 19E0     		b	.L273
 5653              	.L274:
2577:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2578:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2579:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   
2580:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
2581:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->TxXferCount = 0U;
 5654              		.loc 1 2581 0
 5655 002a FB68     		ldr	r3, [r7, #12]
 5656 002c 0022     		movs	r2, #0
 5657 002e A3F85220 		strh	r2, [r3, #82]	@ movhi
2582:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxXferCount = 0U;
 5658              		.loc 1 2582 0
 5659 0032 FB68     		ldr	r3, [r7, #12]
 5660 0034 0022     		movs	r2, #0
 5661 0036 A3F85A20 		strh	r2, [r3, #90]	@ movhi
2583:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
ARM GAS  /tmp/cca0gMDq.s 			page 144


2584:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Reset errorCode */
2585:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 5662              		.loc 1 2585 0
 5663 003a FB68     		ldr	r3, [r7, #12]
 5664 003c 0022     		movs	r2, #0
 5665 003e DA66     		str	r2, [r3, #108]
2586:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2587:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
2588:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 5666              		.loc 1 2588 0
 5667 0040 FB68     		ldr	r3, [r7, #12]
 5668 0042 1B68     		ldr	r3, [r3]
 5669 0044 0F22     		movs	r2, #15
 5670 0046 1A62     		str	r2, [r3, #32]
2589:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2590:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
2591:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
 5671              		.loc 1 2591 0
 5672 0048 FB68     		ldr	r3, [r7, #12]
 5673 004a 2022     		movs	r2, #32
 5674 004c 83F86920 		strb	r2, [r3, #105]
2592:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 5675              		.loc 1 2592 0
 5676 0050 FB68     		ldr	r3, [r7, #12]
 5677 0052 2022     		movs	r2, #32
 5678 0054 83F86A20 		strb	r2, [r3, #106]
2593:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2594:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Call user Abort complete callback */
2595:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
 5679              		.loc 1 2595 0
 5680 0058 F868     		ldr	r0, [r7, #12]
 5681 005a FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 5682              	.L273:
2596:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 5683              		.loc 1 2596 0
 5684 005e 1037     		adds	r7, r7, #16
 5685              	.LCFI286:
 5686              		.cfi_def_cfa_offset 8
 5687 0060 BD46     		mov	sp, r7
 5688              	.LCFI287:
 5689              		.cfi_def_cfa_register 13
 5690              		@ sp needed
 5691 0062 80BD     		pop	{r7, pc}
 5692              		.cfi_endproc
 5693              	.LFE175:
 5695              		.section	.text.UART_DMATxOnlyAbortCallback,"ax",%progbits
 5696              		.align	2
 5697              		.thumb
 5698              		.thumb_func
 5700              	UART_DMATxOnlyAbortCallback:
 5701              	.LFB176:
2597:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2598:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2599:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2600:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user by a call to
2601:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         HAL_UART_AbortTransmit_IT API (Abort only Tx transfer)
2602:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
ARM GAS  /tmp/cca0gMDq.s 			page 145


2603:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         and leads to user Tx Abort Complete callback execution).
2604:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  hdma DMA handle.
2605:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2606:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2607:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
2608:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 5702              		.loc 1 2608 0
 5703              		.cfi_startproc
 5704              		@ args = 0, pretend = 0, frame = 16
 5705              		@ frame_needed = 1, uses_anonymous_args = 0
 5706 0000 80B5     		push	{r7, lr}
 5707              	.LCFI288:
 5708              		.cfi_def_cfa_offset 8
 5709              		.cfi_offset 7, -8
 5710              		.cfi_offset 14, -4
 5711 0002 84B0     		sub	sp, sp, #16
 5712              	.LCFI289:
 5713              		.cfi_def_cfa_offset 24
 5714 0004 00AF     		add	r7, sp, #0
 5715              	.LCFI290:
 5716              		.cfi_def_cfa_register 7
 5717 0006 7860     		str	r0, [r7, #4]
2609:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 5718              		.loc 1 2609 0
 5719 0008 7B68     		ldr	r3, [r7, #4]
 5720 000a 5B6A     		ldr	r3, [r3, #36]
 5721 000c FB60     		str	r3, [r7, #12]
2610:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2611:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->TxXferCount = 0U;
 5722              		.loc 1 2611 0
 5723 000e FB68     		ldr	r3, [r7, #12]
 5724 0010 0022     		movs	r2, #0
 5725 0012 A3F85220 		strh	r2, [r3, #82]	@ movhi
2612:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2613:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Restore huart->gState to Ready */
2614:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 5726              		.loc 1 2614 0
 5727 0016 FB68     		ldr	r3, [r7, #12]
 5728 0018 2022     		movs	r2, #32
 5729 001a 83F86920 		strb	r2, [r3, #105]
2615:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2616:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Call user Abort complete callback */
2617:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_UART_AbortTransmitCpltCallback(huart);
 5730              		.loc 1 2617 0
 5731 001e F868     		ldr	r0, [r7, #12]
 5732 0020 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
2618:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 5733              		.loc 1 2618 0
 5734 0024 1037     		adds	r7, r7, #16
 5735              	.LCFI291:
 5736              		.cfi_def_cfa_offset 8
 5737 0026 BD46     		mov	sp, r7
 5738              	.LCFI292:
 5739              		.cfi_def_cfa_register 13
 5740              		@ sp needed
 5741 0028 80BD     		pop	{r7, pc}
 5742              		.cfi_endproc
ARM GAS  /tmp/cca0gMDq.s 			page 146


 5743              	.LFE176:
 5745 002a 00BF     		.section	.text.UART_DMARxOnlyAbortCallback,"ax",%progbits
 5746              		.align	2
 5747              		.thumb
 5748              		.thumb_func
 5750              	UART_DMARxOnlyAbortCallback:
 5751              	.LFB177:
2619:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2620:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2621:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user by a call to
2622:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         HAL_UART_AbortReceive_IT API (Abort only Rx transfer)
2623:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
2624:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         and leads to user Rx Abort Complete callback execution).
2625:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  hdma DMA handle.
2626:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2627:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2628:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
2629:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 5752              		.loc 1 2629 0
 5753              		.cfi_startproc
 5754              		@ args = 0, pretend = 0, frame = 16
 5755              		@ frame_needed = 1, uses_anonymous_args = 0
 5756 0000 80B5     		push	{r7, lr}
 5757              	.LCFI293:
 5758              		.cfi_def_cfa_offset 8
 5759              		.cfi_offset 7, -8
 5760              		.cfi_offset 14, -4
 5761 0002 84B0     		sub	sp, sp, #16
 5762              	.LCFI294:
 5763              		.cfi_def_cfa_offset 24
 5764 0004 00AF     		add	r7, sp, #0
 5765              	.LCFI295:
 5766              		.cfi_def_cfa_register 7
 5767 0006 7860     		str	r0, [r7, #4]
2630:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 5768              		.loc 1 2630 0
 5769 0008 7B68     		ldr	r3, [r7, #4]
 5770 000a 5B6A     		ldr	r3, [r3, #36]
 5771 000c FB60     		str	r3, [r7, #12]
2631:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2632:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxXferCount = 0U;
 5772              		.loc 1 2632 0
 5773 000e FB68     		ldr	r3, [r7, #12]
 5774 0010 0022     		movs	r2, #0
 5775 0012 A3F85A20 		strh	r2, [r3, #90]	@ movhi
2633:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2634:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
2635:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 5776              		.loc 1 2635 0
 5777 0016 FB68     		ldr	r3, [r7, #12]
 5778 0018 1B68     		ldr	r3, [r3]
 5779 001a 0F22     		movs	r2, #15
 5780 001c 1A62     		str	r2, [r3, #32]
2636:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2637:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
2638:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 5781              		.loc 1 2638 0
ARM GAS  /tmp/cca0gMDq.s 			page 147


 5782 001e FB68     		ldr	r3, [r7, #12]
 5783 0020 2022     		movs	r2, #32
 5784 0022 83F86A20 		strb	r2, [r3, #106]
2639:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2640:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Call user Abort complete callback */
2641:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_UART_AbortReceiveCpltCallback(huart);
 5785              		.loc 1 2641 0
 5786 0026 F868     		ldr	r0, [r7, #12]
 5787 0028 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
2642:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 5788              		.loc 1 2642 0
 5789 002c 1037     		adds	r7, r7, #16
 5790              	.LCFI296:
 5791              		.cfi_def_cfa_offset 8
 5792 002e BD46     		mov	sp, r7
 5793              	.LCFI297:
 5794              		.cfi_def_cfa_register 13
 5795              		@ sp needed
 5796 0030 80BD     		pop	{r7, pc}
 5797              		.cfi_endproc
 5798              	.LFE177:
 5800 0032 00BF     		.section	.text.UART_Transmit_IT,"ax",%progbits
 5801              		.align	2
 5802              		.global	UART_Transmit_IT
 5803              		.thumb
 5804              		.thumb_func
 5806              	UART_Transmit_IT:
 5807              	.LFB178:
2643:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2644:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2645:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Send an amount of data in interrupt mode.
2646:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   Function is called under interruption only, once
2647:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Transmit_IT().
2648:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
2649:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
2650:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2651:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
2652:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 5808              		.loc 1 2652 0
 5809              		.cfi_startproc
 5810              		@ args = 0, pretend = 0, frame = 16
 5811              		@ frame_needed = 1, uses_anonymous_args = 0
 5812              		@ link register save eliminated.
 5813 0000 80B4     		push	{r7}
 5814              	.LCFI298:
 5815              		.cfi_def_cfa_offset 4
 5816              		.cfi_offset 7, -4
 5817 0002 85B0     		sub	sp, sp, #20
 5818              	.LCFI299:
 5819              		.cfi_def_cfa_offset 24
 5820 0004 00AF     		add	r7, sp, #0
 5821              	.LCFI300:
 5822              		.cfi_def_cfa_register 7
 5823 0006 7860     		str	r0, [r7, #4]
2653:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint16_t* tmp;
2654:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2655:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
ARM GAS  /tmp/cca0gMDq.s 			page 148


2656:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 5824              		.loc 1 2656 0
 5825 0008 7B68     		ldr	r3, [r7, #4]
 5826 000a 93F86930 		ldrb	r3, [r3, #105]
 5827 000e DBB2     		uxtb	r3, r3
 5828 0010 212B     		cmp	r3, #33
 5829 0012 46D1     		bne	.L279
2657:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2658:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(huart->TxXferCount == 0U)
 5830              		.loc 1 2658 0
 5831 0014 7B68     		ldr	r3, [r7, #4]
 5832 0016 B3F85230 		ldrh	r3, [r3, #82]	@ movhi
 5833 001a 9BB2     		uxth	r3, r3
 5834 001c 002B     		cmp	r3, #0
 5835 001e 11D1     		bne	.L280
2659:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2660:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Disable the UART Transmit Data Register Empty Interrupt */
2661:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 5836              		.loc 1 2661 0
 5837 0020 7B68     		ldr	r3, [r7, #4]
 5838 0022 1B68     		ldr	r3, [r3]
 5839 0024 7A68     		ldr	r2, [r7, #4]
 5840 0026 1268     		ldr	r2, [r2]
 5841 0028 1268     		ldr	r2, [r2]
 5842 002a 22F08002 		bic	r2, r2, #128
 5843 002e 1A60     		str	r2, [r3]
2662:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2663:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */
2664:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 5844              		.loc 1 2664 0
 5845 0030 7B68     		ldr	r3, [r7, #4]
 5846 0032 1B68     		ldr	r3, [r3]
 5847 0034 7A68     		ldr	r2, [r7, #4]
 5848 0036 1268     		ldr	r2, [r2]
 5849 0038 1268     		ldr	r2, [r2]
 5850 003a 42F04002 		orr	r2, r2, #64
 5851 003e 1A60     		str	r2, [r3]
2665:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2666:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return HAL_OK;
 5852              		.loc 1 2666 0
 5853 0040 0023     		movs	r3, #0
 5854 0042 2FE0     		b	.L281
 5855              	.L280:
2667:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2668:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     else
2669:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2670:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE
 5856              		.loc 1 2670 0
 5857 0044 7B68     		ldr	r3, [r7, #4]
 5858 0046 9B68     		ldr	r3, [r3, #8]
 5859 0048 B3F5805F 		cmp	r3, #4096
 5860 004c 14D1     		bne	.L282
 5861              		.loc 1 2670 0 is_stmt 0 discriminator 1
 5862 004e 7B68     		ldr	r3, [r7, #4]
 5863 0050 1B69     		ldr	r3, [r3, #16]
 5864 0052 002B     		cmp	r3, #0
 5865 0054 10D1     		bne	.L282
ARM GAS  /tmp/cca0gMDq.s 			page 149


2671:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
2672:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         tmp = (uint16_t*) huart->pTxBuffPtr;
 5866              		.loc 1 2672 0 is_stmt 1
 5867 0056 7B68     		ldr	r3, [r7, #4]
 5868 0058 DB6C     		ldr	r3, [r3, #76]
 5869 005a FB60     		str	r3, [r7, #12]
2673:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 5870              		.loc 1 2673 0
 5871 005c 7B68     		ldr	r3, [r7, #4]
 5872 005e 1B68     		ldr	r3, [r3]
 5873 0060 FA68     		ldr	r2, [r7, #12]
 5874 0062 1288     		ldrh	r2, [r2]
 5875 0064 C2F30802 		ubfx	r2, r2, #0, #9
 5876 0068 92B2     		uxth	r2, r2
 5877 006a 1A85     		strh	r2, [r3, #40]	@ movhi
2674:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->pTxBuffPtr += 2U;
 5878              		.loc 1 2674 0
 5879 006c 7B68     		ldr	r3, [r7, #4]
 5880 006e DB6C     		ldr	r3, [r3, #76]
 5881 0070 9A1C     		adds	r2, r3, #2
 5882 0072 7B68     		ldr	r3, [r7, #4]
 5883 0074 DA64     		str	r2, [r3, #76]
 5884 0076 09E0     		b	.L283
 5885              	.L282:
2675:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
2676:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       else
2677:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       {
2678:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****         huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 5886              		.loc 1 2678 0
 5887 0078 7B68     		ldr	r3, [r7, #4]
 5888 007a 1A68     		ldr	r2, [r3]
 5889 007c 7B68     		ldr	r3, [r7, #4]
 5890 007e DB6C     		ldr	r3, [r3, #76]
 5891 0080 581C     		adds	r0, r3, #1
 5892 0082 7968     		ldr	r1, [r7, #4]
 5893 0084 C864     		str	r0, [r1, #76]
 5894 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5895 0088 9BB2     		uxth	r3, r3
 5896 008a 1385     		strh	r3, [r2, #40]	@ movhi
 5897              	.L283:
2679:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       }
2680:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->TxXferCount--;
 5898              		.loc 1 2680 0
 5899 008c 7B68     		ldr	r3, [r7, #4]
 5900 008e B3F85230 		ldrh	r3, [r3, #82]	@ movhi
 5901 0092 9BB2     		uxth	r3, r3
 5902 0094 013B     		subs	r3, r3, #1
 5903 0096 9AB2     		uxth	r2, r3
 5904 0098 7B68     		ldr	r3, [r7, #4]
 5905 009a A3F85220 		strh	r2, [r3, #82]	@ movhi
2681:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2682:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return HAL_OK;
 5906              		.loc 1 2682 0
 5907 009e 0023     		movs	r3, #0
 5908 00a0 00E0     		b	.L281
 5909              	.L279:
2683:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
ARM GAS  /tmp/cca0gMDq.s 			page 150


2684:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2685:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
2686:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2687:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_BUSY;
 5910              		.loc 1 2687 0
 5911 00a2 0223     		movs	r3, #2
 5912              	.L281:
2688:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2689:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 5913              		.loc 1 2689 0
 5914 00a4 1846     		mov	r0, r3
 5915 00a6 1437     		adds	r7, r7, #20
 5916              	.LCFI301:
 5917              		.cfi_def_cfa_offset 4
 5918 00a8 BD46     		mov	sp, r7
 5919              	.LCFI302:
 5920              		.cfi_def_cfa_register 13
 5921              		@ sp needed
 5922 00aa 5DF8047B 		ldr	r7, [sp], #4
 5923              	.LCFI303:
 5924              		.cfi_restore 7
 5925              		.cfi_def_cfa_offset 0
 5926 00ae 7047     		bx	lr
 5927              		.cfi_endproc
 5928              	.LFE178:
 5930              		.section	.text.UART_EndTransmit_IT,"ax",%progbits
 5931              		.align	2
 5932              		.global	UART_EndTransmit_IT
 5933              		.thumb
 5934              		.thumb_func
 5936              	UART_EndTransmit_IT:
 5937              	.LFB179:
2690:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2691:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2692:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Wrap up transmission in non-blocking mode.
2693:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
2694:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *               the configuration information for the specified UART module.
2695:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
2696:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2697:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
2698:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 5938              		.loc 1 2698 0
 5939              		.cfi_startproc
 5940              		@ args = 0, pretend = 0, frame = 8
 5941              		@ frame_needed = 1, uses_anonymous_args = 0
 5942 0000 80B5     		push	{r7, lr}
 5943              	.LCFI304:
 5944              		.cfi_def_cfa_offset 8
 5945              		.cfi_offset 7, -8
 5946              		.cfi_offset 14, -4
 5947 0002 82B0     		sub	sp, sp, #8
 5948              	.LCFI305:
 5949              		.cfi_def_cfa_offset 16
 5950 0004 00AF     		add	r7, sp, #0
 5951              	.LCFI306:
 5952              		.cfi_def_cfa_register 7
 5953 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/cca0gMDq.s 			page 151


2699:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Disable the UART Transmit Complete Interrupt */
2700:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 5954              		.loc 1 2700 0
 5955 0008 7B68     		ldr	r3, [r7, #4]
 5956 000a 1B68     		ldr	r3, [r3]
 5957 000c 7A68     		ldr	r2, [r7, #4]
 5958 000e 1268     		ldr	r2, [r2]
 5959 0010 1268     		ldr	r2, [r2]
 5960 0012 22F04002 		bic	r2, r2, #64
 5961 0016 1A60     		str	r2, [r3]
2701:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2702:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Tx process is ended, restore huart->gState to Ready */
2703:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 5962              		.loc 1 2703 0
 5963 0018 7B68     		ldr	r3, [r7, #4]
 5964 001a 2022     		movs	r2, #32
 5965 001c 83F86920 		strb	r2, [r3, #105]
2704:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2705:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   HAL_UART_TxCpltCallback(huart);
 5966              		.loc 1 2705 0
 5967 0020 7868     		ldr	r0, [r7, #4]
 5968 0022 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
2706:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2707:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   return HAL_OK;
 5969              		.loc 1 2707 0
 5970 0026 0023     		movs	r3, #0
2708:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 5971              		.loc 1 2708 0
 5972 0028 1846     		mov	r0, r3
 5973 002a 0837     		adds	r7, r7, #8
 5974              	.LCFI307:
 5975              		.cfi_def_cfa_offset 8
 5976 002c BD46     		mov	sp, r7
 5977              	.LCFI308:
 5978              		.cfi_def_cfa_register 13
 5979              		@ sp needed
 5980 002e 80BD     		pop	{r7, pc}
 5981              		.cfi_endproc
 5982              	.LFE179:
 5984              		.section	.text.UART_Receive_IT,"ax",%progbits
 5985              		.align	2
 5986              		.global	UART_Receive_IT
 5987              		.thumb
 5988              		.thumb_func
 5990              	UART_Receive_IT:
 5991              	.LFB180:
2709:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2710:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2711:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief  Receive an amount of data in interrupt mode.
2712:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @note   Function is called under interruption only, once
2713:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Receive_IT()
2714:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param  huart UART handle.
2715:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval HAL status
2716:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2717:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
2718:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 5992              		.loc 1 2718 0
ARM GAS  /tmp/cca0gMDq.s 			page 152


 5993              		.cfi_startproc
 5994              		@ args = 0, pretend = 0, frame = 16
 5995              		@ frame_needed = 1, uses_anonymous_args = 0
 5996 0000 80B5     		push	{r7, lr}
 5997              	.LCFI309:
 5998              		.cfi_def_cfa_offset 8
 5999              		.cfi_offset 7, -8
 6000              		.cfi_offset 14, -4
 6001 0002 84B0     		sub	sp, sp, #16
 6002              	.LCFI310:
 6003              		.cfi_def_cfa_offset 24
 6004 0004 00AF     		add	r7, sp, #0
 6005              	.LCFI311:
 6006              		.cfi_def_cfa_register 7
 6007 0006 7860     		str	r0, [r7, #4]
2719:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint16_t* tmp;
2720:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint16_t  uhMask = huart->Mask;
 6008              		.loc 1 2720 0
 6009 0008 7B68     		ldr	r3, [r7, #4]
 6010 000a B3F85C30 		ldrh	r3, [r3, #92]	@ movhi
 6011 000e FB81     		strh	r3, [r7, #14]	@ movhi
2721:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   uint16_t  uhdata;
2722:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2723:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
2724:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 6012              		.loc 1 2724 0
 6013 0010 7B68     		ldr	r3, [r7, #4]
 6014 0012 93F86A30 		ldrb	r3, [r3, #106]
 6015 0016 DBB2     		uxtb	r3, r3
 6016 0018 222B     		cmp	r3, #34
 6017 001a 4ED1     		bne	.L287
2725:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2726:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 6018              		.loc 1 2726 0
 6019 001c 7B68     		ldr	r3, [r7, #4]
 6020 001e 1B68     		ldr	r3, [r3]
 6021 0020 9B8C     		ldrh	r3, [r3, #36]	@ movhi
 6022 0022 BB81     		strh	r3, [r7, #12]	@ movhi
2727:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 6023              		.loc 1 2727 0
 6024 0024 7B68     		ldr	r3, [r7, #4]
 6025 0026 9B68     		ldr	r3, [r3, #8]
 6026 0028 B3F5805F 		cmp	r3, #4096
 6027 002c 12D1     		bne	.L288
 6028              		.loc 1 2727 0 is_stmt 0 discriminator 1
 6029 002e 7B68     		ldr	r3, [r7, #4]
 6030 0030 1B69     		ldr	r3, [r3, #16]
 6031 0032 002B     		cmp	r3, #0
 6032 0034 0ED1     		bne	.L288
2728:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2729:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       tmp = (uint16_t*) huart->pRxBuffPtr ;
 6033              		.loc 1 2729 0 is_stmt 1
 6034 0036 7B68     		ldr	r3, [r7, #4]
 6035 0038 5B6D     		ldr	r3, [r3, #84]
 6036 003a BB60     		str	r3, [r7, #8]
2730:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       *tmp = (uint16_t)(uhdata & uhMask);
 6037              		.loc 1 2730 0
ARM GAS  /tmp/cca0gMDq.s 			page 153


 6038 003c BA89     		ldrh	r2, [r7, #12]	@ movhi
 6039 003e FB89     		ldrh	r3, [r7, #14]	@ movhi
 6040 0040 1340     		ands	r3, r3, r2
 6041 0042 9AB2     		uxth	r2, r3
 6042 0044 BB68     		ldr	r3, [r7, #8]
 6043 0046 1A80     		strh	r2, [r3]	@ movhi
2731:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->pRxBuffPtr +=2U;
 6044              		.loc 1 2731 0
 6045 0048 7B68     		ldr	r3, [r7, #4]
 6046 004a 5B6D     		ldr	r3, [r3, #84]
 6047 004c 9A1C     		adds	r2, r3, #2
 6048 004e 7B68     		ldr	r3, [r7, #4]
 6049 0050 5A65     		str	r2, [r3, #84]
 6050 0052 0BE0     		b	.L289
 6051              	.L288:
2732:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2733:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     else
2734:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2735:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 6052              		.loc 1 2735 0
 6053 0054 7B68     		ldr	r3, [r7, #4]
 6054 0056 5B6D     		ldr	r3, [r3, #84]
 6055 0058 591C     		adds	r1, r3, #1
 6056 005a 7A68     		ldr	r2, [r7, #4]
 6057 005c 5165     		str	r1, [r2, #84]
 6058 005e BA89     		ldrh	r2, [r7, #12]	@ movhi
 6059 0060 D1B2     		uxtb	r1, r2
 6060 0062 FA89     		ldrh	r2, [r7, #14]	@ movhi
 6061 0064 D2B2     		uxtb	r2, r2
 6062 0066 0A40     		ands	r2, r2, r1
 6063 0068 D2B2     		uxtb	r2, r2
 6064 006a 1A70     		strb	r2, [r3]
 6065              	.L289:
2736:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2737:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2738:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     if(--huart->RxXferCount == 0U)
 6066              		.loc 1 2738 0
 6067 006c 7B68     		ldr	r3, [r7, #4]
 6068 006e B3F85A30 		ldrh	r3, [r3, #90]	@ movhi
 6069 0072 9BB2     		uxth	r3, r3
 6070 0074 013B     		subs	r3, r3, #1
 6071 0076 9BB2     		uxth	r3, r3
 6072 0078 7A68     		ldr	r2, [r7, #4]
 6073 007a 1946     		mov	r1, r3	@ movhi
 6074 007c A2F85A10 		strh	r1, [r2, #90]	@ movhi
 6075 0080 002B     		cmp	r3, #0
 6076 0082 18D1     		bne	.L290
2739:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     {
2740:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
2741:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 6077              		.loc 1 2741 0
 6078 0084 7B68     		ldr	r3, [r7, #4]
 6079 0086 1B68     		ldr	r3, [r3]
 6080 0088 7A68     		ldr	r2, [r7, #4]
 6081 008a 1268     		ldr	r2, [r2]
 6082 008c 1268     		ldr	r2, [r2]
 6083 008e 22F49072 		bic	r2, r2, #288
ARM GAS  /tmp/cca0gMDq.s 			page 154


 6084 0092 1A60     		str	r2, [r3]
2742:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2743:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
2744:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 6085              		.loc 1 2744 0
 6086 0094 7B68     		ldr	r3, [r7, #4]
 6087 0096 1B68     		ldr	r3, [r3]
 6088 0098 7A68     		ldr	r2, [r7, #4]
 6089 009a 1268     		ldr	r2, [r2]
 6090 009c 9268     		ldr	r2, [r2, #8]
 6091 009e 22F00102 		bic	r2, r2, #1
 6092 00a2 9A60     		str	r2, [r3, #8]
2745:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2746:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
2747:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
 6093              		.loc 1 2747 0
 6094 00a4 7B68     		ldr	r3, [r7, #4]
 6095 00a6 2022     		movs	r2, #32
 6096 00a8 83F86A20 		strb	r2, [r3, #106]
2748:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2749:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       HAL_UART_RxCpltCallback(huart);
 6097              		.loc 1 2749 0
 6098 00ac 7868     		ldr	r0, [r7, #4]
 6099 00ae FFF7FEFF 		bl	HAL_UART_RxCpltCallback
2750:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2751:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****       return HAL_OK;
 6100              		.loc 1 2751 0
 6101 00b2 0023     		movs	r3, #0
 6102 00b4 0AE0     		b	.L291
 6103              	.L290:
2752:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     }
2753:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2754:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_OK;
 6104              		.loc 1 2754 0
 6105 00b6 0023     		movs	r3, #0
 6106 00b8 08E0     		b	.L291
 6107              	.L287:
2755:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2756:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   else
2757:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   {
2758:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     /* Clear RXNE interrupt flag */
2759:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 6108              		.loc 1 2759 0
 6109 00ba 7B68     		ldr	r3, [r7, #4]
 6110 00bc 1B68     		ldr	r3, [r3]
 6111 00be 7A68     		ldr	r2, [r7, #4]
 6112 00c0 1268     		ldr	r2, [r2]
 6113 00c2 9269     		ldr	r2, [r2, #24]
 6114 00c4 42F00802 		orr	r2, r2, #8
 6115 00c8 9A61     		str	r2, [r3, #24]
2760:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2761:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****     return HAL_BUSY;
 6116              		.loc 1 2761 0
 6117 00ca 0223     		movs	r3, #2
 6118              	.L291:
2762:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   }
2763:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
ARM GAS  /tmp/cca0gMDq.s 			page 155


 6119              		.loc 1 2763 0
 6120 00cc 1846     		mov	r0, r3
 6121 00ce 1037     		adds	r7, r7, #16
 6122              	.LCFI312:
 6123              		.cfi_def_cfa_offset 8
 6124 00d0 BD46     		mov	sp, r7
 6125              	.LCFI313:
 6126              		.cfi_def_cfa_register 13
 6127              		@ sp needed
 6128 00d2 80BD     		pop	{r7, pc}
 6129              		.cfi_endproc
 6130              	.LFE180:
 6132              		.section	.text.UART_Wakeup_AddressConfig,"ax",%progbits
 6133              		.align	2
 6134              		.global	UART_Wakeup_AddressConfig
 6135              		.thumb
 6136              		.thumb_func
 6138              	UART_Wakeup_AddressConfig:
 6139              	.LFB181:
2764:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2765:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** /**
2766:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @brief Initialize the UART wake-up from stop mode parameters when triggered by address detectio
2767:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param huart UART handle.
2768:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @param WakeUpSelection UART wake up from stop mode parameters.
2769:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   * @retval None
2770:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   */
2771:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** void UART_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
2772:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** {
 6140              		.loc 1 2772 0
 6141              		.cfi_startproc
 6142              		@ args = 0, pretend = 0, frame = 16
 6143              		@ frame_needed = 1, uses_anonymous_args = 0
 6144              		@ link register save eliminated.
 6145 0000 80B4     		push	{r7}
 6146              	.LCFI314:
 6147              		.cfi_def_cfa_offset 4
 6148              		.cfi_offset 7, -4
 6149 0002 85B0     		sub	sp, sp, #20
 6150              	.LCFI315:
 6151              		.cfi_def_cfa_offset 24
 6152 0004 00AF     		add	r7, sp, #0
 6153              	.LCFI316:
 6154              		.cfi_def_cfa_register 7
 6155 0006 F860     		str	r0, [r7, #12]
 6156 0008 3B1D     		adds	r3, r7, #4
 6157 000a 83E80600 		stmia	r3, {r1, r2}
2773:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));
2774:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2775:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Set the USART address length */
2776:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 6158              		.loc 1 2776 0
 6159 000e FB68     		ldr	r3, [r7, #12]
 6160 0010 1B68     		ldr	r3, [r3]
 6161 0012 FA68     		ldr	r2, [r7, #12]
 6162 0014 1268     		ldr	r2, [r2]
 6163 0016 5268     		ldr	r2, [r2, #4]
 6164 0018 22F01002 		bic	r2, r2, #16
ARM GAS  /tmp/cca0gMDq.s 			page 156


 6165 001c 3989     		ldrh	r1, [r7, #8]
 6166 001e 0A43     		orrs	r2, r2, r1
 6167 0020 5A60     		str	r2, [r3, #4]
2777:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** 
2778:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   /* Set the USART address node */
2779:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_AD
 6168              		.loc 1 2779 0
 6169 0022 FB68     		ldr	r3, [r7, #12]
 6170 0024 1B68     		ldr	r3, [r3]
 6171 0026 FA68     		ldr	r2, [r7, #12]
 6172 0028 1268     		ldr	r2, [r2]
 6173 002a 5268     		ldr	r2, [r2, #4]
 6174 002c 22F07F41 		bic	r1, r2, #-16777216
 6175 0030 BA7A     		ldrb	r2, [r7, #10]	@ zero_extendqisi2
 6176 0032 1206     		lsls	r2, r2, #24
 6177 0034 0A43     		orrs	r2, r2, r1
 6178 0036 5A60     		str	r2, [r3, #4]
2780:Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_uart.c **** }
 6179              		.loc 1 2780 0
 6180 0038 1437     		adds	r7, r7, #20
 6181              	.LCFI317:
 6182              		.cfi_def_cfa_offset 4
 6183 003a BD46     		mov	sp, r7
 6184              	.LCFI318:
 6185              		.cfi_def_cfa_register 13
 6186              		@ sp needed
 6187 003c 5DF8047B 		ldr	r7, [sp], #4
 6188              	.LCFI319:
 6189              		.cfi_restore 7
 6190              		.cfi_def_cfa_offset 0
 6191 0040 7047     		bx	lr
 6192              		.cfi_endproc
 6193              	.LFE181:
 6195              		.text
 6196              	.Letext0:
 6197              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 6198              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 6199              		.file 4 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303x8.h"
 6200              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 6201              		.file 6 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 6202              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 6203              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
 6204              		.file 9 "Drivers/CMSIS/Include/core_cm4.h"
ARM GAS  /tmp/cca0gMDq.s 			page 157


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f3xx_hal_uart.c
     /tmp/cca0gMDq.s:21     .text.HAL_UART_Init:0000000000000000 $t
     /tmp/cca0gMDq.s:26     .text.HAL_UART_Init:0000000000000000 HAL_UART_Init
     /tmp/cca0gMDq.s:671    .text.HAL_UART_MspInit:0000000000000000 HAL_UART_MspInit
     /tmp/cca0gMDq.s:4204   .text.UART_SetConfig:0000000000000000 UART_SetConfig
     /tmp/cca0gMDq.s:4621   .text.UART_AdvFeatureConfig:0000000000000000 UART_AdvFeatureConfig
     /tmp/cca0gMDq.s:4821   .text.UART_CheckIdleState:0000000000000000 UART_CheckIdleState
     /tmp/cca0gMDq.s:141    .text.HAL_HalfDuplex_Init:0000000000000000 $t
     /tmp/cca0gMDq.s:146    .text.HAL_HalfDuplex_Init:0000000000000000 HAL_HalfDuplex_Init
     /tmp/cca0gMDq.s:268    .text.HAL_LIN_Init:0000000000000000 $t
     /tmp/cca0gMDq.s:273    .text.HAL_LIN_Init:0000000000000000 HAL_LIN_Init
     /tmp/cca0gMDq.s:424    .text.HAL_MultiProcessor_Init:0000000000000000 $t
     /tmp/cca0gMDq.s:429    .text.HAL_MultiProcessor_Init:0000000000000000 HAL_MultiProcessor_Init
     /tmp/cca0gMDq.s:572    .text.HAL_UART_DeInit:0000000000000000 $t
     /tmp/cca0gMDq.s:577    .text.HAL_UART_DeInit:0000000000000000 HAL_UART_DeInit
     /tmp/cca0gMDq.s:711    .text.HAL_UART_MspDeInit:0000000000000000 HAL_UART_MspDeInit
     /tmp/cca0gMDq.s:666    .text.HAL_UART_MspInit:0000000000000000 $t
     /tmp/cca0gMDq.s:706    .text.HAL_UART_MspDeInit:0000000000000000 $t
     /tmp/cca0gMDq.s:746    .text.HAL_UART_Transmit:0000000000000000 $t
     /tmp/cca0gMDq.s:751    .text.HAL_UART_Transmit:0000000000000000 HAL_UART_Transmit
     /tmp/cca0gMDq.s:4927   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 UART_WaitOnFlagUntilTimeout
     /tmp/cca0gMDq.s:940    .text.HAL_UART_Receive:0000000000000000 $t
     /tmp/cca0gMDq.s:945    .text.HAL_UART_Receive:0000000000000000 HAL_UART_Receive
     /tmp/cca0gMDq.s:1195   .text.HAL_UART_Transmit_IT:0000000000000000 $t
     /tmp/cca0gMDq.s:1200   .text.HAL_UART_Transmit_IT:0000000000000000 HAL_UART_Transmit_IT
     /tmp/cca0gMDq.s:1310   .text.HAL_UART_Receive_IT:0000000000000000 $t
     /tmp/cca0gMDq.s:1315   .text.HAL_UART_Receive_IT:0000000000000000 HAL_UART_Receive_IT
     /tmp/cca0gMDq.s:1498   .text.HAL_UART_Transmit_DMA:0000000000000000 $t
     /tmp/cca0gMDq.s:1503   .text.HAL_UART_Transmit_DMA:0000000000000000 HAL_UART_Transmit_DMA
     /tmp/cca0gMDq.s:1648   .text.HAL_UART_Transmit_DMA:00000000000000d0 $d
     /tmp/cca0gMDq.s:5148   .text.UART_DMATransmitCplt:0000000000000000 UART_DMATransmitCplt
     /tmp/cca0gMDq.s:5220   .text.UART_DMATxHalfCplt:0000000000000000 UART_DMATxHalfCplt
     /tmp/cca0gMDq.s:5386   .text.UART_DMAError:0000000000000000 UART_DMAError
     /tmp/cca0gMDq.s:1655   .text.HAL_UART_Receive_DMA:0000000000000000 $t
     /tmp/cca0gMDq.s:1660   .text.HAL_UART_Receive_DMA:0000000000000000 HAL_UART_Receive_DMA
     /tmp/cca0gMDq.s:1812   .text.HAL_UART_Receive_DMA:00000000000000e0 $d
     /tmp/cca0gMDq.s:5262   .text.UART_DMAReceiveCplt:0000000000000000 UART_DMAReceiveCplt
     /tmp/cca0gMDq.s:5344   .text.UART_DMARxHalfCplt:0000000000000000 UART_DMARxHalfCplt
     /tmp/cca0gMDq.s:1819   .text.HAL_UART_DMAPause:0000000000000000 $t
     /tmp/cca0gMDq.s:1824   .text.HAL_UART_DMAPause:0000000000000000 HAL_UART_DMAPause
     /tmp/cca0gMDq.s:1942   .text.HAL_UART_DMAResume:0000000000000000 $t
     /tmp/cca0gMDq.s:1947   .text.HAL_UART_DMAResume:0000000000000000 HAL_UART_DMAResume
     /tmp/cca0gMDq.s:2054   .text.HAL_UART_DMAStop:0000000000000000 $t
     /tmp/cca0gMDq.s:2059   .text.HAL_UART_DMAStop:0000000000000000 HAL_UART_DMAStop
     /tmp/cca0gMDq.s:5038   .text.UART_EndTxTransfer:0000000000000000 UART_EndTxTransfer
     /tmp/cca0gMDq.s:5089   .text.UART_EndRxTransfer:0000000000000000 UART_EndRxTransfer
     /tmp/cca0gMDq.s:2167   .text.HAL_UART_Abort:0000000000000000 $t
     /tmp/cca0gMDq.s:2172   .text.HAL_UART_Abort:0000000000000000 HAL_UART_Abort
     /tmp/cca0gMDq.s:2309   .text.HAL_UART_AbortTransmit:0000000000000000 $t
     /tmp/cca0gMDq.s:2314   .text.HAL_UART_AbortTransmit:0000000000000000 HAL_UART_AbortTransmit
     /tmp/cca0gMDq.s:2395   .text.HAL_UART_AbortReceive:0000000000000000 $t
     /tmp/cca0gMDq.s:2400   .text.HAL_UART_AbortReceive:0000000000000000 HAL_UART_AbortReceive
     /tmp/cca0gMDq.s:2494   .text.HAL_UART_Abort_IT:0000000000000000 $t
     /tmp/cca0gMDq.s:2499   .text.HAL_UART_Abort_IT:0000000000000000 HAL_UART_Abort_IT
     /tmp/cca0gMDq.s:3540   .text.HAL_UART_AbortCpltCallback:0000000000000000 HAL_UART_AbortCpltCallback
     /tmp/cca0gMDq.s:2715   .text.HAL_UART_Abort_IT:000000000000014c $d
ARM GAS  /tmp/cca0gMDq.s 			page 158


     /tmp/cca0gMDq.s:5526   .text.UART_DMATxAbortCallback:0000000000000000 UART_DMATxAbortCallback
     /tmp/cca0gMDq.s:5613   .text.UART_DMARxAbortCallback:0000000000000000 UART_DMARxAbortCallback
     /tmp/cca0gMDq.s:2721   .text.HAL_UART_AbortTransmit_IT:0000000000000000 $t
     /tmp/cca0gMDq.s:2726   .text.HAL_UART_AbortTransmit_IT:0000000000000000 HAL_UART_AbortTransmit_IT
     /tmp/cca0gMDq.s:3580   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 HAL_UART_AbortTransmitCpltCallback
     /tmp/cca0gMDq.s:2835   .text.HAL_UART_AbortTransmit_IT:00000000000000a0 $d
     /tmp/cca0gMDq.s:5700   .text.UART_DMATxOnlyAbortCallback:0000000000000000 UART_DMATxOnlyAbortCallback
     /tmp/cca0gMDq.s:2840   .text.HAL_UART_AbortReceive_IT:0000000000000000 $t
     /tmp/cca0gMDq.s:2845   .text.HAL_UART_AbortReceive_IT:0000000000000000 HAL_UART_AbortReceive_IT
     /tmp/cca0gMDq.s:3620   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 HAL_UART_AbortReceiveCpltCallback
     /tmp/cca0gMDq.s:2972   .text.HAL_UART_AbortReceive_IT:00000000000000c0 $d
     /tmp/cca0gMDq.s:5750   .text.UART_DMARxOnlyAbortCallback:0000000000000000 UART_DMARxOnlyAbortCallback
     /tmp/cca0gMDq.s:2977   .text.HAL_UART_IRQHandler:0000000000000000 $t
     /tmp/cca0gMDq.s:2982   .text.HAL_UART_IRQHandler:0000000000000000 HAL_UART_IRQHandler
     /tmp/cca0gMDq.s:5990   .text.UART_Receive_IT:0000000000000000 UART_Receive_IT
     /tmp/cca0gMDq.s:3500   .text.HAL_UART_ErrorCallback:0000000000000000 HAL_UART_ErrorCallback
     /tmp/cca0gMDq.s:5806   .text.UART_Transmit_IT:0000000000000000 UART_Transmit_IT
     /tmp/cca0gMDq.s:5936   .text.UART_EndTransmit_IT:0000000000000000 UART_EndTransmit_IT
     /tmp/cca0gMDq.s:3330   .text.HAL_UART_IRQHandler:0000000000000238 $d
     /tmp/cca0gMDq.s:5476   .text.UART_DMAAbortOnError:0000000000000000 UART_DMAAbortOnError
     /tmp/cca0gMDq.s:3335   .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/cca0gMDq.s:3340   .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/cca0gMDq.s:3375   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 $t
     /tmp/cca0gMDq.s:3380   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 HAL_UART_TxHalfCpltCallback
     /tmp/cca0gMDq.s:3415   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/cca0gMDq.s:3420   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/cca0gMDq.s:3455   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 $t
     /tmp/cca0gMDq.s:3460   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 HAL_UART_RxHalfCpltCallback
     /tmp/cca0gMDq.s:3495   .text.HAL_UART_ErrorCallback:0000000000000000 $t
     /tmp/cca0gMDq.s:3535   .text.HAL_UART_AbortCpltCallback:0000000000000000 $t
     /tmp/cca0gMDq.s:3575   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 $t
     /tmp/cca0gMDq.s:3615   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 $t
     /tmp/cca0gMDq.s:3655   .text.HAL_MultiProcessor_EnableMuteMode:0000000000000000 $t
     /tmp/cca0gMDq.s:3660   .text.HAL_MultiProcessor_EnableMuteMode:0000000000000000 HAL_MultiProcessor_EnableMuteMode
     /tmp/cca0gMDq.s:3726   .text.HAL_MultiProcessor_DisableMuteMode:0000000000000000 $t
     /tmp/cca0gMDq.s:3731   .text.HAL_MultiProcessor_DisableMuteMode:0000000000000000 HAL_MultiProcessor_DisableMuteMode
     /tmp/cca0gMDq.s:3797   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 $t
     /tmp/cca0gMDq.s:3802   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 HAL_MultiProcessor_EnterMuteMode
     /tmp/cca0gMDq.s:3845   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 $t
     /tmp/cca0gMDq.s:3850   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 HAL_HalfDuplex_EnableTransmitter
     /tmp/cca0gMDq.s:3930   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 $t
     /tmp/cca0gMDq.s:3935   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 HAL_HalfDuplex_EnableReceiver
     /tmp/cca0gMDq.s:4015   .text.HAL_LIN_SendBreak:0000000000000000 $t
     /tmp/cca0gMDq.s:4020   .text.HAL_LIN_SendBreak:0000000000000000 HAL_LIN_SendBreak
     /tmp/cca0gMDq.s:4092   .text.HAL_UART_GetState:0000000000000000 $t
     /tmp/cca0gMDq.s:4097   .text.HAL_UART_GetState:0000000000000000 HAL_UART_GetState
     /tmp/cca0gMDq.s:4155   .text.HAL_UART_GetError:0000000000000000 $t
     /tmp/cca0gMDq.s:4160   .text.HAL_UART_GetError:0000000000000000 HAL_UART_GetError
     /tmp/cca0gMDq.s:4199   .text.UART_SetConfig:0000000000000000 $t
     /tmp/cca0gMDq.s:4306   .text.UART_SetConfig:000000000000009c $d
     /tmp/cca0gMDq.s:4310   .text.UART_SetConfig:00000000000000ac $t
     /tmp/cca0gMDq.s:4379   .text.UART_SetConfig:0000000000000108 $d
     /tmp/cca0gMDq.s:4388   .text.UART_SetConfig:000000000000012c $t
     /tmp/cca0gMDq.s:4493   .text.UART_SetConfig:00000000000001e4 $d
     /tmp/cca0gMDq.s:4502   .text.UART_SetConfig:0000000000000208 $t
     /tmp/cca0gMDq.s:4607   .text.UART_SetConfig:00000000000002b4 $d
     /tmp/cca0gMDq.s:4616   .text.UART_AdvFeatureConfig:0000000000000000 $t
ARM GAS  /tmp/cca0gMDq.s 			page 159


     /tmp/cca0gMDq.s:4816   .text.UART_CheckIdleState:0000000000000000 $t
     /tmp/cca0gMDq.s:4922   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 $t
     /tmp/cca0gMDq.s:5034   .text.UART_EndTxTransfer:0000000000000000 $t
     /tmp/cca0gMDq.s:5085   .text.UART_EndRxTransfer:0000000000000000 $t
     /tmp/cca0gMDq.s:5144   .text.UART_DMATransmitCplt:0000000000000000 $t
     /tmp/cca0gMDq.s:5216   .text.UART_DMATxHalfCplt:0000000000000000 $t
     /tmp/cca0gMDq.s:5258   .text.UART_DMAReceiveCplt:0000000000000000 $t
     /tmp/cca0gMDq.s:5340   .text.UART_DMARxHalfCplt:0000000000000000 $t
     /tmp/cca0gMDq.s:5382   .text.UART_DMAError:0000000000000000 $t
     /tmp/cca0gMDq.s:5472   .text.UART_DMAAbortOnError:0000000000000000 $t
     /tmp/cca0gMDq.s:5522   .text.UART_DMATxAbortCallback:0000000000000000 $t
     /tmp/cca0gMDq.s:5609   .text.UART_DMARxAbortCallback:0000000000000000 $t
     /tmp/cca0gMDq.s:5696   .text.UART_DMATxOnlyAbortCallback:0000000000000000 $t
     /tmp/cca0gMDq.s:5746   .text.UART_DMARxOnlyAbortCallback:0000000000000000 $t
     /tmp/cca0gMDq.s:5801   .text.UART_Transmit_IT:0000000000000000 $t
     /tmp/cca0gMDq.s:5931   .text.UART_EndTransmit_IT:0000000000000000 $t
     /tmp/cca0gMDq.s:5985   .text.UART_Receive_IT:0000000000000000 $t
     /tmp/cca0gMDq.s:6133   .text.UART_Wakeup_AddressConfig:0000000000000000 $t
     /tmp/cca0gMDq.s:6138   .text.UART_Wakeup_AddressConfig:0000000000000000 UART_Wakeup_AddressConfig
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_Abort_IT
HAL_UARTEx_WakeupCallback
HAL_RCC_GetPCLK1Freq
HAL_RCC_GetPCLK2Freq
HAL_RCC_GetSysClockFreq
